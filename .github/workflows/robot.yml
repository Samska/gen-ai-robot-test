name: Robot Framework Tests # Name of the Github Action pipeline

on: # Triggers under which the pipeline will be executed
  push: # Trigger the pipeline on Git push events
    branches:
      - master # Only build on the 'master' branch push events
  pull_request: # Trigger the pipeline on pull request events
  schedule: # Trigger the pipeline on a schedule. The following runs once per day at midnight UTC.
    - cron: '0 0 * * *'
  workflow_dispatch: # Manually trigger the pipeline via the github actions UI


jobs: # Define the jobs that this pipeline will execute.
  setup-and-run-tests: # Stage name
    name: Setup the environment and run the tests
    runs-on: ubuntu-latest # Executes the job on an Ubuntu environment

    steps: # Steps to follow in the job
    - name: Project checkout
      uses: actions/checkout@v2 # This step checks out the code of the project

    - name: Set up Python 3.8 # Sets up python 3.8 environment for the project
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Cache pip packages # Caches pip packages for future builds
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('config/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies # Installs dependencies required for Robot framework test execution
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        npm install xml-js

    - name: Delete Old Test Reports # Deletes previous test reports before running new tests
      run: rm -rf test-reports/*

    - name: Run Robot Framework Tests # Runs Robot framework tests with some custom arguments for the tests. It also masks the errors produced by Robot Framework tests.
      run: |
        robot --variable HEADLESS:headless --exclude visual --outputdir test-reports tests || true

    - name: Convert XML Results to JSON # Convert output.xml to JSON to get test results and manipulate that data
      run: |        
        node -e "const fs = require('fs'); const xml2js = require('xml-js'); const xmlData = fs.readFileSync('./test-reports/output.xml', 'utf8'); const jsonData = xml2js.xml2json(xmlData, { compact: true, spaces: 2 }); fs.writeFileSync('output.json', jsonData);"

    - name: Upload Test Results # Uploads the test results artifact to Github Actions
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: test-reports

    - name: Publish Test Report # Publishes the test report to Github pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./test-reports/
        cname: ${{ env.CNAME }}
        commit_message: Update test report for ${{ github.sha }}

    - name: Display Test Report URL # Displays the URL where test reports can be accessed.
      run: |
        echo "Test report: https://${{ github.actor }}.github.io/gen-ai-robot-test/report.html"

    - name: Send Slack Notification # Send a slack notification to my slack project in the test-channel with URL Test results
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{
          "channel": "'"${SLACK_CHANNEL}"'",
          "attachments": [
            {
              "title": "Test Results",
              "text": "https://${{ github.actor }}.github.io/gen-ai-robot-test/report.html"
            }
          ]
        }' "${SLACK_WEBHOOK_URL}"
