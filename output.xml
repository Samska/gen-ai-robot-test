<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.8.18 on linux)" generated="20231121 00:10:41.534" rpa="false" schemaversion="4">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231121 00:10:41.937" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231121 00:10:41.937" endtime="20231121 00:10:41.937"/>
</kw>
<status status="PASS" starttime="20231121 00:10:41.937" endtime="20231121 00:10:41.938"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231121 00:10:42.049" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231121 00:10:42.049" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '0f096a909f35c960e367c4eb7bc2426b;o=1', 'Date': 'Tue, 21 Nov 2023 00:10:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '2329'} 
 body={
    "quantidade": 10,
    "usuarios": [
        {
            "nome": "com.github.javafaker.Name@74e2cfc5",
            "email": "jc.schultz@hotmail.com",
            "password": "pssfn7zi",
            "administrador": "true",
            "_id": "0bXsoJzMxfOyypwC"
        },
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "rateste@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "377XfzIYec1WtgfH"
        },
        {
            "nome": "com.github.javafaker.Name@47ae6c18",
            "email": "sherwood.pollich@yahoo.com",
            "password": "70soosf5indj6",
            "administrador": "true",
            "_id": "9GkCNGLFplsSbIm1"
        },
        {
            "nome": "com.github.javafaker.Name@78d61f17",
            "email": "jarrett.lakin@gmail.com",
            "password": "11zpb4qyic",
            "administrador": "true",
            "_id": "MqTtQ44h4Eed4wsm"
        },
        {
            "nome": "com.github.javafaker.Name@74e2cfc5",
            "email": "asuncion.walker@hotmail.com",
            "password": "orrdjbus",
            "administrador": "true",
            "_id": "VrtEL9zmq9F5yTd2"
        },
        {
            "nome": "com.github.javafaker.Name@4c5e4bfa",
            "email": "wynona.ullrich@yahoo.com",
            "password": "gbrf3pgc7w2y",
            "administrador": "true",
            "_id": "YmwYA0gj7AOSmJCR"
        },
        {
            "nome": "John Doe",
            "email": "johndoe@example.com",
            "password": "senha",
            "administrador": "false",
            "_id": "buCE9H37kTzUNOIQ"
        },
        {
            "nome": "com.github.javafaker.Name@74e2cfc5",
            "email": "nenita.walsh@gmail.com",
            "password": "ecj9di6pxx0",
            "administrador": "true",
            "_id": "oKlLK4rb01FbhRXe"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "poFXQoNgOwV5V2Xe"
        }
    ]
} 
 </msg>
<msg timestamp="20231121 00:10:42.049" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:41.938" endtime="20231121 00:10:42.049"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231121 00:10:42.049" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.049" endtime="20231121 00:10:42.049"/>
</kw>
<status status="PASS" starttime="20231121 00:10:41.938" endtime="20231121 00:10:42.049"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231121 00:10:42.050" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.050" endtime="20231121 00:10:42.050"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231121 00:10:42.050" endtime="20231121 00:10:42.051"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.050" endtime="20231121 00:10:42.051"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231121 00:10:42.052" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231121 00:10:42.051" endtime="20231121 00:10:42.052"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.051" endtime="20231121 00:10:42.052"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231121 00:10:41.936" endtime="20231121 00:10:42.052"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231121 00:10:42.053" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231121 00:10:42.053" endtime="20231121 00:10:42.053"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.053" endtime="20231121 00:10:42.053"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example: 'John Doe'</doc>
<msg timestamp="20231121 00:10:42.054" level="INFO">${name} = Tammy Sanchez</msg>
<status status="PASS" starttime="20231121 00:10:42.054" endtime="20231121 00:10:42.054"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20231121 00:10:42.055" level="INFO">${email} = richardsonjulie@example.org</msg>
<status status="PASS" starttime="20231121 00:10:42.054" endtime="20231121 00:10:42.055"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20231121 00:10:42.055" level="INFO">${password} = gI5uTYQk8NZc</msg>
<status status="PASS" starttime="20231121 00:10:42.055" endtime="20231121 00:10:42.055"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231121 00:10:42.055" level="INFO">${name} = Tammy Sanchez</msg>
<status status="PASS" starttime="20231121 00:10:42.055" endtime="20231121 00:10:42.055"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231121 00:10:42.056" level="INFO">${email} = richardsonjulie@example.org</msg>
<status status="PASS" starttime="20231121 00:10:42.056" endtime="20231121 00:10:42.056"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231121 00:10:42.056" level="INFO">${password} = gI5uTYQk8NZc</msg>
<status status="PASS" starttime="20231121 00:10:42.056" endtime="20231121 00:10:42.056"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.054" endtime="20231121 00:10:42.056"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231121 00:10:42.057" level="INFO">${payload} = {'nome': 'Tammy Sanchez', 'email': 'richardsonjulie@example.org', 'password': 'gI5uTYQk8NZc', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231121 00:10:42.056" endtime="20231121 00:10:42.057"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231121 00:10:42.057" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231121 00:10:42.057" endtime="20231121 00:10:42.057"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20231121 00:10:42.106" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '119'} 
 body=b'{"nome": "Tammy Sanchez", "email": "richardsonjulie@example.org", "password": "gI5uTYQk8NZc", "administrador": "false"}' 
 </msg>
<msg timestamp="20231121 00:10:42.106" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '4f3a36fc739e2ad7aa8349bbf83fc689', 'Date': 'Tue, 21 Nov 2023 00:10:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "csUmW2ed3Dx9KE0e"
} 
 </msg>
<msg timestamp="20231121 00:10:42.106" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.057" endtime="20231121 00:10:42.106"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231121 00:10:42.107" level="INFO">${user_id} = csUmW2ed3Dx9KE0e</msg>
<status status="PASS" starttime="20231121 00:10:42.107" endtime="20231121 00:10:42.107"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20231121 00:10:42.108" level="INFO">${USER_ID} = csUmW2ed3Dx9KE0e</msg>
<status status="PASS" starttime="20231121 00:10:42.107" endtime="20231121 00:10:42.108"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231121 00:10:42.108" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.108" endtime="20231121 00:10:42.108"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.056" endtime="20231121 00:10:42.108"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231121 00:10:42.109" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.108" endtime="20231121 00:10:42.109"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231121 00:10:42.109" endtime="20231121 00:10:42.109"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.108" endtime="20231121 00:10:42.109"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231121 00:10:42.110" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231121 00:10:42.110" endtime="20231121 00:10:42.110"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.110" endtime="20231121 00:10:42.110"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231121 00:10:42.052" endtime="20231121 00:10:42.110"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231121 00:10:42.112" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231121 00:10:42.111" endtime="20231121 00:10:42.112"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.111" endtime="20231121 00:10:42.112"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231121 00:10:42.166" level="INFO">GET Request : url=https://serverest.dev/usuarios/csUmW2ed3Dx9KE0e 
 path_url=/usuarios/csUmW2ed3Dx9KE0e 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231121 00:10:42.167" level="INFO">GET Response : url=https://serverest.dev/usuarios/csUmW2ed3Dx9KE0e 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '41fa7eadd54d88a79ba38f4660368c1d', 'Date': 'Tue, 21 Nov 2023 00:10:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '168'} 
 body={
    "nome": "Tammy Sanchez",
    "email": "richardsonjulie@example.org",
    "password": "gI5uTYQk8NZc",
    "administrador": "false",
    "_id": "csUmW2ed3Dx9KE0e"
} 
 </msg>
<msg timestamp="20231121 00:10:42.167" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.112" endtime="20231121 00:10:42.167"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231121 00:10:42.167" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.167" endtime="20231121 00:10:42.167"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.112" endtime="20231121 00:10:42.167"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231121 00:10:42.168" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.168" endtime="20231121 00:10:42.168"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231121 00:10:42.168" endtime="20231121 00:10:42.169"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.167" endtime="20231121 00:10:42.169"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231121 00:10:42.169" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20231121 00:10:42.169" endtime="20231121 00:10:42.169"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.169" endtime="20231121 00:10:42.170"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231121 00:10:42.111" endtime="20231121 00:10:42.170"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231121 00:10:42.171" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231121 00:10:42.171" endtime="20231121 00:10:42.171"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.170" endtime="20231121 00:10:42.171"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231121 00:10:42.172" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231121 00:10:42.171" endtime="20231121 00:10:42.172"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231121 00:10:42.172" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231121 00:10:42.172" endtime="20231121 00:10:42.172"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20231121 00:10:42.232" level="INFO">PUT Request : url=https://serverest.dev/usuarios/csUmW2ed3Dx9KE0e 
 path_url=/usuarios/csUmW2ed3Dx9KE0e 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20231121 00:10:42.232" level="INFO">PUT Response : url=https://serverest.dev/usuarios/csUmW2ed3Dx9KE0e 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '4b9b5134df9eb89d47126a3aeff1f04c', 'Date': 'Tue, 21 Nov 2023 00:10:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20231121 00:10:42.232" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.172" endtime="20231121 00:10:42.232"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231121 00:10:42.232" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.232" endtime="20231121 00:10:42.232"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.171" endtime="20231121 00:10:42.232"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231121 00:10:42.233" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.233" endtime="20231121 00:10:42.233"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231121 00:10:42.233" endtime="20231121 00:10:42.234"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.232" endtime="20231121 00:10:42.234"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231121 00:10:42.235" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231121 00:10:42.234" endtime="20231121 00:10:42.235"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.234" endtime="20231121 00:10:42.235"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231121 00:10:42.170" endtime="20231121 00:10:42.235"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231121 00:10:42.236" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231121 00:10:42.236" endtime="20231121 00:10:42.236"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.236" endtime="20231121 00:10:42.236"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20231121 00:10:42.286" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/csUmW2ed3Dx9KE0e 
 path_url=/usuarios/csUmW2ed3Dx9KE0e 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20231121 00:10:42.286" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/csUmW2ed3Dx9KE0e 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '1c7631b66754fff7e0bb50eb9ccfedf6', 'Date': 'Tue, 21 Nov 2023 00:10:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20231121 00:10:42.286" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.237" endtime="20231121 00:10:42.286"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231121 00:10:42.287" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.287" endtime="20231121 00:10:42.287"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.236" endtime="20231121 00:10:42.287"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231121 00:10:42.288" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231121 00:10:42.287" endtime="20231121 00:10:42.288"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231121 00:10:42.288" endtime="20231121 00:10:42.288"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.287" endtime="20231121 00:10:42.288"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231121 00:10:42.289" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231121 00:10:42.289" endtime="20231121 00:10:42.289"/>
</kw>
<status status="PASS" starttime="20231121 00:10:42.289" endtime="20231121 00:10:42.289"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231121 00:10:42.235" endtime="20231121 00:10:42.289"/>
</test>
<status status="PASS" starttime="20231121 00:10:41.553" endtime="20231121 00:10:42.290"/>
</suite>
<status status="PASS" starttime="20231121 00:10:41.551" endtime="20231121 00:10:42.291"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231121 00:10:42.301" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231121 00:10:43.234" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231121 00:10:43.234" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55f986e225e3 &lt;unknown&gt;
#1 0x55f986ae50b7 &lt;unknown&gt;
#2 0x55f986b1be55 &lt;unknown&gt;
#3 0x55f986b18b81 &lt;unknown&gt;
#4 0x55f986b6347f &lt;unknown&gt;
#5 0x55f986b59cc3 &lt;unknown&gt;
#6 0x55f986b250e4 &lt;unknown&gt;
#7 0x55f986b260ae &lt;unknown&gt;
#8 0x55f986de8ce1 &lt;unknown&gt;
#9 0x55f986decb7e &lt;unknown&gt;
#10 0x55f986dd64b5 &lt;unknown&gt;
#11 0x55f986ded7d6 &lt;unknown&gt;
#12 0x55f986db9dbf &lt;unknown&gt;
#13 0x55f986e10748 &lt;unknown&gt;
#14 0x55f986e10917 &lt;unknown&gt;
#15 0x55f986e21773 &lt;unknown&gt;
#16 0x7f3def294ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231121 00:10:42.300" endtime="20231121 00:10:43.235"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231121 00:10:43.236" endtime="20231121 00:10:43.236"/>
</kw>
<status status="FAIL" starttime="20231121 00:10:42.300" endtime="20231121 00:10:43.236"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231121 00:10:43.237" endtime="20231121 00:10:43.237"/>
</kw>
<status status="PASS" starttime="20231121 00:10:43.236" endtime="20231121 00:10:43.237"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231121 00:10:42.299" endtime="20231121 00:10:43.237">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55f986e225e3 &lt;unknown&gt;
#1 0x55f986ae50b7 &lt;unknown&gt;
#2 0x55f986b1be55 &lt;unknown&gt;
#3 0x55f986b18b81 &lt;unknown&gt;
#4 0x55f986b6347f &lt;unknown&gt;
#5 0x55f986b59cc3 &lt;unknown&gt;
#6 0x55f986b250e4 &lt;unknown&gt;
#7 0x55f986b260ae &lt;unknown&gt;
#8 0x55f986de8ce1 &lt;unknown&gt;
#9 0x55f986decb7e &lt;unknown&gt;
#10 0x55f986dd64b5 &lt;unknown&gt;
#11 0x55f986ded7d6 &lt;unknown&gt;
#12 0x55f986db9dbf &lt;unknown&gt;
#13 0x55f986e10748 &lt;unknown&gt;
#14 0x55f986e10917 &lt;unknown&gt;
#15 0x55f986e21773 &lt;unknown&gt;
#16 0x7f3def294ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231121 00:10:43.239" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231121 00:10:43.907" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231121 00:10:43.908" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55c7d508e5e3 &lt;unknown&gt;
#1 0x55c7d4d510b7 &lt;unknown&gt;
#2 0x55c7d4d87e55 &lt;unknown&gt;
#3 0x55c7d4d84b81 &lt;unknown&gt;
#4 0x55c7d4dcf47f &lt;unknown&gt;
#5 0x55c7d4dc5cc3 &lt;unknown&gt;
#6 0x55c7d4d910e4 &lt;unknown&gt;
#7 0x55c7d4d920ae &lt;unknown&gt;
#8 0x55c7d5054ce1 &lt;unknown&gt;
#9 0x55c7d5058b7e &lt;unknown&gt;
#10 0x55c7d50424b5 &lt;unknown&gt;
#11 0x55c7d50597d6 &lt;unknown&gt;
#12 0x55c7d5025dbf &lt;unknown&gt;
#13 0x55c7d507c748 &lt;unknown&gt;
#14 0x55c7d507c917 &lt;unknown&gt;
#15 0x55c7d508d773 &lt;unknown&gt;
#16 0x7f21aac94ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231121 00:10:43.239" endtime="20231121 00:10:43.908"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231121 00:10:43.908" endtime="20231121 00:10:43.908"/>
</kw>
<status status="FAIL" starttime="20231121 00:10:43.238" endtime="20231121 00:10:43.909"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231121 00:10:43.909" endtime="20231121 00:10:43.909"/>
</kw>
<status status="PASS" starttime="20231121 00:10:43.909" endtime="20231121 00:10:43.909"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231121 00:10:43.237" endtime="20231121 00:10:43.909">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55c7d508e5e3 &lt;unknown&gt;
#1 0x55c7d4d510b7 &lt;unknown&gt;
#2 0x55c7d4d87e55 &lt;unknown&gt;
#3 0x55c7d4d84b81 &lt;unknown&gt;
#4 0x55c7d4dcf47f &lt;unknown&gt;
#5 0x55c7d4dc5cc3 &lt;unknown&gt;
#6 0x55c7d4d910e4 &lt;unknown&gt;
#7 0x55c7d4d920ae &lt;unknown&gt;
#8 0x55c7d5054ce1 &lt;unknown&gt;
#9 0x55c7d5058b7e &lt;unknown&gt;
#10 0x55c7d50424b5 &lt;unknown&gt;
#11 0x55c7d50597d6 &lt;unknown&gt;
#12 0x55c7d5025dbf &lt;unknown&gt;
#13 0x55c7d507c748 &lt;unknown&gt;
#14 0x55c7d507c917 &lt;unknown&gt;
#15 0x55c7d508d773 &lt;unknown&gt;
#16 0x7f21aac94ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231121 00:10:43.911" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231121 00:10:44.579" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231121 00:10:44.579" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x556d333545e3 &lt;unknown&gt;
#1 0x556d330170b7 &lt;unknown&gt;
#2 0x556d3304de55 &lt;unknown&gt;
#3 0x556d3304ab81 &lt;unknown&gt;
#4 0x556d3309547f &lt;unknown&gt;
#5 0x556d3308bcc3 &lt;unknown&gt;
#6 0x556d330570e4 &lt;unknown&gt;
#7 0x556d330580ae &lt;unknown&gt;
#8 0x556d3331ace1 &lt;unknown&gt;
#9 0x556d3331eb7e &lt;unknown&gt;
#10 0x556d333084b5 &lt;unknown&gt;
#11 0x556d3331f7d6 &lt;unknown&gt;
#12 0x556d332ebdbf &lt;unknown&gt;
#13 0x556d33342748 &lt;unknown&gt;
#14 0x556d33342917 &lt;unknown&gt;
#15 0x556d33353773 &lt;unknown&gt;
#16 0x7f102d294ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231121 00:10:43.911" endtime="20231121 00:10:44.579"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231121 00:10:44.580" endtime="20231121 00:10:44.580"/>
</kw>
<status status="FAIL" starttime="20231121 00:10:43.910" endtime="20231121 00:10:44.580"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231121 00:10:44.580" endtime="20231121 00:10:44.581"/>
</kw>
<status status="PASS" starttime="20231121 00:10:44.580" endtime="20231121 00:10:44.581"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231121 00:10:43.910" endtime="20231121 00:10:44.581">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x556d333545e3 &lt;unknown&gt;
#1 0x556d330170b7 &lt;unknown&gt;
#2 0x556d3304de55 &lt;unknown&gt;
#3 0x556d3304ab81 &lt;unknown&gt;
#4 0x556d3309547f &lt;unknown&gt;
#5 0x556d3308bcc3 &lt;unknown&gt;
#6 0x556d330570e4 &lt;unknown&gt;
#7 0x556d330580ae &lt;unknown&gt;
#8 0x556d3331ace1 &lt;unknown&gt;
#9 0x556d3331eb7e &lt;unknown&gt;
#10 0x556d333084b5 &lt;unknown&gt;
#11 0x556d3331f7d6 &lt;unknown&gt;
#12 0x556d332ebdbf &lt;unknown&gt;
#13 0x556d33342748 &lt;unknown&gt;
#14 0x556d33342917 &lt;unknown&gt;
#15 0x556d33353773 &lt;unknown&gt;
#16 0x7f102d294ac3 &lt;unknown&gt;
</status>
</test>
<status status="FAIL" starttime="20231121 00:10:42.293" endtime="20231121 00:10:44.581"/>
</suite>
<status status="FAIL" starttime="20231121 00:10:42.292" endtime="20231121 00:10:44.582"/>
</suite>
<status status="FAIL" starttime="20231121 00:10:41.535" endtime="20231121 00:10:44.583"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
