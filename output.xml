<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230413 17:44:05.584" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users/test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:44:06.133" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:44:06.132" endtime="20230413 17:44:06.134"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.132" endtime="20230413 17:44:06.134"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:44:06.292" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:44:06.292" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'ccb66d50-fe4a-4943-8759-26835f7feb58', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '1f4f83e2f0e9a4c0dec30624b5a7e2e2;o=1', 'Date': 'Thu, 13 Apr 2023 17:44:06 GMT', 'Server': 'Google Frontend', 'Content-Length': '12209'} 
 body={
    "quantidade": 56,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "1I5MtFIUIIOY5fV8"
        },
        {
            "nome": "Windows da Silva",
            "email": "ipqxei@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "2JhTk8dSFIFe8lH6"
        },
        {
            "nome": "aaa",
            "email": "bbb@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "2Lp5Uq7pDHUbBffY"
        },
        {
            "nome": "Exemplo 9X7kfjTmz9SjcP4EYCr4",
            "email": "exemplo43626@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "4CFJWLaQTgUc4eMC"
        },
        {
            "nome": "Exemplo QPiYZF8TfPfPDcgTtgr1",
            "email": "exemplo11663@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "5N2ATjv2B0XGPBl9"
        },
        {
            "nome": "Beth Ratke",
            "email": "stacy@osinski-osinski.info",
            "password": "teste",
            "administrador": "true",
            "_id": "71wWcZo3ezwrC3Cr"
        },
        {
            "nome": "Exemplo tiHX2K0De67r5G5CeiTR",
            "email": "exemplo36633@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "9YIv3udFYuc0Tu0p"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ppfv@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "9mIJVW1Ol7xedZFs"
        },
        {
            "nome": "Fulano da Silva",
            "email": "bfulanobeltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "9yXfe3X9q1uk5fbb"
        },
        {
            "nome": "Fulano da Silva",
            "email": "pxwc@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "APyHOugT42PmdOBJ"
        },
        {
            "nome": "Exemplo 3KWBhxciIYciwz64LT0k",
            "email": "exemplo33482@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "BAFed8nK0CMGJdvn"
        },
        {
            "nome": "Fulano da Silva",
            "email": "mvsc@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "FxBMCLty8jySZP22"
        },
        {
            "nome": "Fulano da Silva",
            "email": "vasm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "GCpN2ihUBADVFECo"
        },
        {
            "nome": "Fulano da Silva",
            "email": "juvo@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "H7CG5GTrfZj2tn96"
        },
        {
            "nome": "Delma Welch",
            "email": "jermaine@rodriguez.com",
            "password": "teste",
            "administrador": "true",
            "_id": "IJG76Lf2CDJbbMsw"
        },
        {
            "nome": "Exemplo QvyWoqoUrwlllHQzHwOS",
            "email": "exemplo20570@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "IPNUsHyVhp454cGG"
        },
        {
            "nome": "Fulano da Silva",
            "email": "xisn@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "IPaJtKGqg7LbtiU8"
        },
        {
            "nome": "Fulano da Silva",
            "email": "jlnp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "J3UFFE8BkXHPl98Q"
        },
        {
            "nome": "Exemplo cV2NdMGFuBP7g6IjxSO9",
            "email": "exemplo38520@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "JMC2uZ4PkrodEZsx"
        },
        {
            "nome": "Erasmo Greenfelder",
            "email": "gary@green.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "L9YvsBccf96rb0IJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "dvrb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "LbqHhFaMoMXgzH6e"
        },
        {
            "nome": "Exemplo y8Vi0fzQWSxPmFBufSCa",
            "email": "exemplo38692@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "LxmLtRl5ATwDdSNl"
        },
        {
            "nome": "batata",
            "email": "hayden_steuber@cartwright.info",
            "password": "teste",
            "administrador": "true",
            "_id": "MFX1zgBTAv3RdyAw"
        },
        {
            "nome": "Fulano da Silva",
            "email": "gzmi@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "MVIuW7YbJau8fYqf"
        },
        {
            "nome": "Exemplo ljQudgVK4Ga69BFf0tCu",
            "email": "exemplo20866@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "NlPhsEzSKmeRHI2f"
        },
        {
            "nome": "Exemplo t94YbT6aJM36VqxxCLsC",
            "email": "exemplo17537@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "NobMSBGEj3fxxKna"
        },
        {
            "nome": "Exemplo Xj8qCRnDyaVIzw2JUVme",
            "email": "exemplo40666@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "OqZHuvhXeIghCmqZ"
        },
        {
            "nome": "Twila Hessel",
            "email": "derek@frami-huel.info",
            "password": "teste",
            "administrador": "true",
            "_id": "VkpCmTunrhycBbfW"
        },
        {
            "nome": "Fulano da Silva",
            "email": "crhp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "WaqzREFowvCuPHI4"
        },
        {
            "nome": "Windows da Silva",
            "email": "fslffc@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "XTwLaV0XfRxVQhUW"
        },
        {
            "nome": "Fulano da Silva",
            "email": "evlw@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "XgZqO6TvbkxB0ZiZ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "slqa@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "ZDWAI2kyN4JNLHdV"
        },
        {
            "nome": "Keshia Sanford",
            "email": "antonio_gleason@abbott.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "ZsGL8uPkee6KhzCc"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qrzm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "dBt5B3uvz6v6XJ1Y"
        },
        {
            "nome": "Windows da Silva",
            "email": "guiwtc@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "dYbAWCLodZs9INI4"
        },
        {
            "nome": "Exemplo TPTjZbIVN62pImWa033W",
            "email": "exemplo43422@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "eREDLXOay3DZEYyh"
        },
        {
            "nome": "Day Pimenta",
            "email": "dayannemp@yahoo.com.br",
            "password": "1234567",
            "administrador": "true",
            "_id": "eaamiT5kJbihf0bZ"
        },
        {
            "nome": "Keisha Witting",
            "email": "alexandra.jakubowski@hirthe-wisoky.org",
            "password": "teste",
            "administrador": "true",
            "_id": "gUKn5J99Pi2FaKPZ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "yrim@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "iHBbR39t0ubzjbPq"
        },
        {
            "nome": "Windows da Silva",
            "email": "lliebv@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "iv23MKIg4gCOCuqE"
        },
        {
            "nome": "Exemplo bEDatc3qqCzbIqr7vS4h",
            "email": "exemplo37341@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "j87MEnEet90kwJqD"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Abbigail.Purdy@example.org",
            "password": "teste",
            "administrador": "true",
            "_id": "jTe7D7OVhdK0Ggsf"
        },
        {
            "nome": "Basil Renner",
            "email": "valentin_heathcote@parisian.com",
            "password": "teste",
            "administrador": "true",
            "_id": "kiqxPiLVa1rvPRw7"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ywal@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "lFKFtZbCGJwdqrRd"
        },
        {
            "nome": "Windows da Silva",
            "email": "mdjicj@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id"... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230413 17:44:06.293" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.134" endtime="20230413 17:44:06.293"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:44:06.293" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.293" endtime="20230413 17:44:06.294"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.134" endtime="20230413 17:44:06.294"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:44:06.295" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.294" endtime="20230413 17:44:06.295"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:44:06.295" endtime="20230413 17:44:06.296"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.294" endtime="20230413 17:44:06.296"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:44:06.298" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230413 17:44:06.297" endtime="20230413 17:44:06.298"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.296" endtime="20230413 17:44:06.298"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.131" endtime="20230413 17:44:06.298"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:44:06.300" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:44:06.299" endtime="20230413 17:44:06.300"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.299" endtime="20230413 17:44:06.300"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230413 17:44:06.301" level="INFO">${name} = Debra Townsend</msg>
<status status="PASS" starttime="20230413 17:44:06.301" endtime="20230413 17:44:06.301"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230413 17:44:06.302" level="INFO">${email} = karenschneider@example.net</msg>
<status status="PASS" starttime="20230413 17:44:06.302" endtime="20230413 17:44:06.302"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230413 17:44:06.303" level="INFO">${password} = _7LNgxh02(</msg>
<status status="PASS" starttime="20230413 17:44:06.302" endtime="20230413 17:44:06.304"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:44:06.305" level="INFO">${name} = Debra Townsend</msg>
<status status="PASS" starttime="20230413 17:44:06.305" endtime="20230413 17:44:06.305"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:44:06.305" level="INFO">${email} = karenschneider@example.net</msg>
<status status="PASS" starttime="20230413 17:44:06.305" endtime="20230413 17:44:06.306"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:44:06.306" level="INFO">${password} = _7LNgxh02(</msg>
<status status="PASS" starttime="20230413 17:44:06.306" endtime="20230413 17:44:06.306"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.300" endtime="20230413 17:44:06.306"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:44:06.308" level="INFO">${payload} = {'nome': 'Debra Townsend', 'email': 'karenschneider@example.net', 'password': '_7LNgxh02(', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230413 17:44:06.307" endtime="20230413 17:44:06.308"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:44:06.308" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230413 17:44:06.308" endtime="20230413 17:44:06.308"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:44:06.374" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '117'} 
 body=b'{"nome": "Debra Townsend", "email": "karenschneider@example.net", "password": "_7LNgxh02(", "administrador": "false"}' 
 </msg>
<msg timestamp="20230413 17:44:06.375" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '8f6e5a93-9bf4-46e5-90c8-851dfd9f9906', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '926aa38ad1150d94d2e3759d1a78c492', 'Date': 'Thu, 13 Apr 2023 17:44:06 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "nCgpTu9NC9nBQIQD"
} 
 </msg>
<msg timestamp="20230413 17:44:06.375" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.308" endtime="20230413 17:44:06.375"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230413 17:44:06.376" level="INFO">${user_id} = nCgpTu9NC9nBQIQD</msg>
<status status="PASS" starttime="20230413 17:44:06.375" endtime="20230413 17:44:06.376"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230413 17:44:06.377" level="INFO">${USER_ID} = nCgpTu9NC9nBQIQD</msg>
<status status="PASS" starttime="20230413 17:44:06.376" endtime="20230413 17:44:06.377"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:44:06.378" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.378" endtime="20230413 17:44:06.378"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.306" endtime="20230413 17:44:06.378"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:44:06.380" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.379" endtime="20230413 17:44:06.380"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:44:06.380" endtime="20230413 17:44:06.382"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.378" endtime="20230413 17:44:06.382"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:44:06.383" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230413 17:44:06.383" endtime="20230413 17:44:06.383"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.382" endtime="20230413 17:44:06.384"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.299" endtime="20230413 17:44:06.384"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="21">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:44:06.385" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:44:06.385" endtime="20230413 17:44:06.387"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.385" endtime="20230413 17:44:06.387"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:44:06.459" level="INFO">GET Request : url=https://serverest.dev/usuarios/nCgpTu9NC9nBQIQD 
 path_url=/usuarios/nCgpTu9NC9nBQIQD 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:44:06.459" level="INFO">GET Response : url=https://serverest.dev/usuarios/nCgpTu9NC9nBQIQD 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'abc04976-c962-4d1d-95bd-f7f4ddad2ce6', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'b46527f538314895abda67713bb6a8b2', 'Date': 'Thu, 13 Apr 2023 17:44:06 GMT', 'Server': 'Google Frontend', 'Content-Length': '166'} 
 body={
    "nome": "Debra Townsend",
    "email": "karenschneider@example.net",
    "password": "_7LNgxh02(",
    "administrador": "false",
    "_id": "nCgpTu9NC9nBQIQD"
} 
 </msg>
<msg timestamp="20230413 17:44:06.460" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.387" endtime="20230413 17:44:06.460"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:44:06.460" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.460" endtime="20230413 17:44:06.460"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.387" endtime="20230413 17:44:06.461"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:44:06.462" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.461" endtime="20230413 17:44:06.462"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:44:06.462" endtime="20230413 17:44:06.463"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.461" endtime="20230413 17:44:06.463"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:44:06.464" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230413 17:44:06.464" endtime="20230413 17:44:06.464"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.463" endtime="20230413 17:44:06.465"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.384" endtime="20230413 17:44:06.465"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="26">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:44:06.466" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:44:06.466" endtime="20230413 17:44:06.467"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.465" endtime="20230413 17:44:06.467"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:44:06.468" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230413 17:44:06.467" endtime="20230413 17:44:06.468"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:44:06.468" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230413 17:44:06.468" endtime="20230413 17:44:06.468"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:44:06.555" level="INFO">PUT Request : url=https://serverest.dev/usuarios/nCgpTu9NC9nBQIQD 
 path_url=/usuarios/nCgpTu9NC9nBQIQD 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230413 17:44:06.555" level="INFO">PUT Response : url=https://serverest.dev/usuarios/nCgpTu9NC9nBQIQD 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'd199e7e5-f255-4f9a-8393-08f9925b904e', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '5a72f6da87cb958ecf1d9c84e6352714', 'Date': 'Thu, 13 Apr 2023 17:44:06 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230413 17:44:06.555" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.468" endtime="20230413 17:44:06.555"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:44:06.556" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.555" endtime="20230413 17:44:06.556"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.467" endtime="20230413 17:44:06.556"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:44:06.558" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.557" endtime="20230413 17:44:06.558"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:44:06.558" endtime="20230413 17:44:06.559"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.556" endtime="20230413 17:44:06.559"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:44:06.560" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230413 17:44:06.560" endtime="20230413 17:44:06.560"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.559" endtime="20230413 17:44:06.561"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.465" endtime="20230413 17:44:06.561"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="31">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:44:06.562" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:44:06.562" endtime="20230413 17:44:06.562"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.561" endtime="20230413 17:44:06.563"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:44:06.636" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/nCgpTu9NC9nBQIQD 
 path_url=/usuarios/nCgpTu9NC9nBQIQD 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:44:06.636" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/nCgpTu9NC9nBQIQD 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'c64d30a3-fc6a-46a9-a741-627d8e6bbb07', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '995c147b2fbef310703e12d71e0be91b', 'Date': 'Thu, 13 Apr 2023 17:44:06 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230413 17:44:06.636" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.563" endtime="20230413 17:44:06.636"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:44:06.637" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.636" endtime="20230413 17:44:06.637"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.563" endtime="20230413 17:44:06.637"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:44:06.638" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:44:06.637" endtime="20230413 17:44:06.638"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:44:06.639" endtime="20230413 17:44:06.639"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.637" endtime="20230413 17:44:06.639"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:44:06.641" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230413 17:44:06.640" endtime="20230413 17:44:06.641"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.640" endtime="20230413 17:44:06.641"/>
</kw>
<status status="PASS" starttime="20230413 17:44:06.561" endtime="20230413 17:44:06.641"/>
</test>
<status status="PASS" starttime="20230413 17:44:05.632" endtime="20230413 17:44:06.642"/>
</suite>
<status status="PASS" starttime="20230413 17:44:05.630" endtime="20230413 17:44:06.643"/>
</suite>
<status status="PASS" starttime="20230413 17:44:05.628" endtime="20230413 17:44:06.644"/>
</suite>
<status status="PASS" starttime="20230413 17:44:05.586" endtime="20230413 17:44:06.645"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
