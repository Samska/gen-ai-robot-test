<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230609 17:55:30.244" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:55:30.945" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:55:30.944" endtime="20230609 17:55:30.945"/>
</kw>
<status status="PASS" starttime="20230609 17:55:30.944" endtime="20230609 17:55:30.945"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:55:31.104" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 17:55:31.104" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'ac3f82c5-e5fc-4198-81ff-2edfa5dc4f14', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c63dad80b4165bdd33e7574aa6069fd3;o=1', 'Date': 'Fri, 09 Jun 2023 17:55:31 GMT', 'Server': 'Google Frontend', 'Content-Length': '35077'} 
 body={
    "quantidade": 160,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "ttdq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "02DQkHSzXSqpcIka"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano55@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "0F1dhHbEeX2mrwft"
        },
        {
            "nome": "Drew Gerhold",
            "email": "almamosciski@test.com",
            "password": "9rJt1UcYQcnYJ7S",
            "administrador": "true",
            "_id": "0bnETEAn1Bj6PNeB"
        },
        {
            "nome": "Fulano da Silva",
            "email": "tlji@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0v9qTX5aeOtCF1sZ"
        },
        {
            "nome": "Christie Murazik",
            "email": "Eleazar.Hand25@yahoo.com",
            "password": "RZu8J4l1RolHVA9",
            "administrador": "true",
            "_id": "0zJJLyoiAC4LDuvK"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltr23123213ano@qa.com.br",
            "password": "te21312321321321321321312312",
            "administrador": "true",
            "_id": "19qYwOl1yhTmb9BG"
        },
        {
            "nome": "Tanya Larson",
            "email": "Evelyn.Greenholt-Farrell45@gmail.com",
            "password": "xhsyXupps0dhUhd",
            "administrador": "true",
            "_id": "1roUnulKv3v1koBe"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "todd42@example.com",
            "password": "Abc@123",
            "administrador": "true",
            "_id": "1sgIbfnuiyiNZqrg"
        },
        {
            "nome": "Antonio Funk III",
            "email": "Dan1@hotmail.com",
            "password": "DRpPX1z2ZECGMOi",
            "administrador": "true",
            "_id": "24Gamt7XRlANtwIj"
        },
        {
            "nome": "Alfred Jaskolski",
            "email": "Marquise37@gmail.com",
            "password": "nqaFgugOOBVDLgZ",
            "administrador": "false",
            "_id": "3jE9j1N3PRSGSKXE"
        },
        {
            "nome": "Tyler Oberbrunner",
            "email": "Ralph.Kuhic77@gmail.com",
            "password": "jtnofzT612n3Xwf",
            "administrador": "true",
            "_id": "3qdUSEh1LherGOxK"
        },
        {
            "nome": "Candice Zieme",
            "email": "Karelle.Davis33@hotmail.com",
            "password": "6gFuBILhb53G5Dd",
            "administrador": "true",
            "_id": "3v0ICd9RA3lOxu95"
        },
        {
            "nome": "Juanita Champlin-Barrows",
            "email": "Kristofer.Koss91@yahoo.com",
            "password": "QTFqy_lAXaVN4Or",
            "administrador": "true",
            "_id": "59WU4Oi0SqCvoAfR"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "sanderson@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "5BGAG7FQWpC8XanE"
        },
        {
            "nome": "Ruty",
            "email": "rutysa@hotmail.com",
            "password": "abc123",
            "administrador": "true",
            "_id": "5NnUe3903HAV4j0X"
        },
        {
            "nome": "Olivia Jast",
            "email": "Tamara84@gmail.com",
            "password": "YHIi4p7y5BotON_",
            "administrador": "false",
            "_id": "5bh5PuewiWA7sbyL"
        },
        {
            "nome": "Dr. Genevieve Abbott",
            "email": "Thelma.Johns99@hotmail.com",
            "password": "STu4AA3MMHDAnvo",
            "administrador": "true",
            "_id": "5l70IkKnpYUhr79n"
        },
        {
            "nome": "Dr. Antonio Collins",
            "email": "Demond91@hotmail.com",
            "password": "NqGDrB7bBw9VIwF",
            "administrador": "true",
            "_id": "6TAOnbRy0UrP9Ove"
        },
        {
            "nome": "Ms. Sophie Carter",
            "email": "Alysha18@yahoo.com",
            "password": "WvUzLByxSI_c8mN",
            "administrador": "true",
            "_id": "6lJRxOuN7m67apKs"
        },
        {
            "nome": "teste",
            "email": "teste@hotmail.br",
            "password": "1",
            "administrador": "true",
            "_id": "72dcS17y72QsiCjf"
        },
        {
            "nome": "Antonia Metz",
            "email": "Frederic_Reinger74@hotmail.com",
            "password": "bnmLvoWV21UGlkH",
            "administrador": "true",
            "_id": "7Un0DB88ipdaWPMM"
        },
        {
            "nome": "Brenda Waelchi",
            "email": "Trey_Wiegand81@hotmail.com",
            "password": "nA6gyxKUUqaA26D",
            "administrador": "true",
            "_id": "8CtP2qA9OnaIAnYp"
        },
        {
            "nome": "Jacsonsm",
            "email": "whodge@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "8SvBtCnNTB4cCSCJ"
        },
        {
            "nome": "Joanne Hintz",
            "email": "Ladarius_Champlin@yahoo.com",
            "password": "y190q3go3p0VrZY",
            "administrador": "true",
            "_id": "9LxF0vW4m0Bc7Rtu"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qliw@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "A0XW4CgHSmYnnlUf"
        },
        {
            "nome": "Brandon Jakubowski",
            "email": "Maritza45@hotmail.com",
            "password": "yKsneR_sw2NT8Un",
            "administrador": "true",
            "_id": "ASGTkKRr0F1f7ATG"
        },
        {
            "nome": "Margie Koch-Stehr",
            "email": "Brennon_Littel81@hotmail.com",
            "password": "fQl5qQkd6xHbYVo",
            "administrador": "false",
            "_id": "AZzE7UeEwSBdI11l"
        },
        {
            "nome": "Leslie Ondricka I",
            "email": "Jackie83@yahoo.com",
            "password": "4nyqqgA0c8nDc6A",
            "administrador": "true",
            "_id": "Ak1Wh4evPpp7z2bN"
        },
        {
            "nome": "Teste Eduardo edite",
            "email": "testeeduardo222@qa.com",
            "password": "12345789",
            "administrador": "true",
            "_id": "Axldi78KNMfO1ShP"
        },
        {
            "nome": "Christina Beer IV",
            "email": "Jacinthe1@hotmail.com",
            "password": "rY3BqzIHSdUQS5Z",
            "administrador": "true",
            "_id": "ByIp6wYmfcU36L3Z"
        },
        {
            "nome": "Bryan Reynolds",
            "email": "agreen@example.org",
            "password": "E9ClRZZvx4Th",
            "administrador": "true",
            "_id": "C7OvK06XohCWgFIU"
        },
        {
            "nome": "Kimberly Reinger",
            "email": "Maritza50@yahoo.com",
            "password": "XTsbHkKBFM45RIO",
            "administrador": "true",
            "_id": "CY9EWrxoytmjxUDJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "xgnp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "Cbr6oAFoAWyLzhhX"
        },
        {
            "nome": "Raphael Luiz",
            "email": "raphaluiz@qa.com.br",
            "password": "teste3212",
            "administrador": "true",
            "_id": "DNSyGQbQW0jxCR0R"
        },
        {
            "nome": "Evan Schmitt",
            "email": "Florida_Beier-Mitchell@hotmail.com",
            "password": "Bu0y6HVKVrADVdp",
            "administrador": "true",
            "_id": "Dc4eLDemlemniGXq"
        },
        {
            "nome": "Catherine Stark IV",
            "email": "Max97@yahoo.com",
            "password": "6_wmElvxgWu5D_r",
            "administrador": "true",
            "_id": "DjlloxVdhp1ROguN"
        },
        {
            "nome": "Cris",
            "email": "testeqa@teste.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "E0oPC5p9YIuYLekG"
        },
        {
            "nome": "oooo",
            "email": "0@email.com",
            "password": "000",
            "administrador": "true",
            "_id": "EYmjNQ4OIhVVksEl"
        },
        {
            "nome": "Ms. Tonya Shields",
            "email": "Brionna_Reilly22@yahoo.com",
            "password": "Pwk9g00GyMuU0AB",
            "administrador": "true",
            "_id": "Effb9VyPoEfW9Vxe"
        },
        {
            "nome": "Candace Swaniawski",
            "email": "Durward_Brown@hotmail.com",
            "password": "BCcvoP3EtLi8PQW",
            "administrador": "false",
            "_id": "FQD5HyjaIVhaqLTV"
        },
        {
            "nome": "Rolando Heaney",
            "email": "Keaton_Stamm@hotmail.com",
            "password": "Zke9Wn9MtK1pMAS",
            "administrador": "true",
            "_id": "G0nIzUm3mwIfVdyd"
        },
        {
            "nome": "Stacy Doyle-Carter",
            "email": "Sister.Lakin@gmail.com",
            "password": "vB7YiZKErLE77Rh",
            "administrador": "true",
            "_id": "G3BkpG0GRlLYsN3U"
        },
        {
            "nome": "Raphael Luiz",
            "email": "raphaelluiz@qa.com.br",
            "password": "teste321",
            "administrador": "true",
            "_id": "G9cQybqUUiascXGV"
        },
        {
            "nome": "Amaury Sobrinho",
            "email": "teste@mail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "GL9Cz8IIGWYN8Som"
        },
        {
            "nome": "Fulano da Silva",
            "email": "dyab@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "GfuviAxGK4rqVHJQ"
        },
        {
            "nome": "Fulan... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230609 17:55:31.105" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:30.946" endtime="20230609 17:55:31.105"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:55:31.105" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.105" endtime="20230609 17:55:31.105"/>
</kw>
<status status="PASS" starttime="20230609 17:55:30.945" endtime="20230609 17:55:31.105"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:55:31.106" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.106" endtime="20230609 17:55:31.106"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:55:31.107" endtime="20230609 17:55:31.107"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.105" endtime="20230609 17:55:31.107"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:55:31.109" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 17:55:31.108" endtime="20230609 17:55:31.109"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.108" endtime="20230609 17:55:31.109"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:55:30.943" endtime="20230609 17:55:31.109"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:55:31.110" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:55:31.110" endtime="20230609 17:55:31.111"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.110" endtime="20230609 17:55:31.111"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230609 17:55:31.111" level="INFO">${name} = Holly Perry</msg>
<status status="PASS" starttime="20230609 17:55:31.111" endtime="20230609 17:55:31.111"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230609 17:55:31.112" level="INFO">${email} = kimberly22@example.org</msg>
<status status="PASS" starttime="20230609 17:55:31.112" endtime="20230609 17:55:31.112"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230609 17:55:31.112" level="INFO">${password} = PZI4jPz59Auh</msg>
<status status="PASS" starttime="20230609 17:55:31.112" endtime="20230609 17:55:31.112"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 17:55:31.113" level="INFO">${name} = Holly Perry</msg>
<status status="PASS" starttime="20230609 17:55:31.112" endtime="20230609 17:55:31.113"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 17:55:31.113" level="INFO">${email} = kimberly22@example.org</msg>
<status status="PASS" starttime="20230609 17:55:31.113" endtime="20230609 17:55:31.113"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 17:55:31.113" level="INFO">${password} = PZI4jPz59Auh</msg>
<status status="PASS" starttime="20230609 17:55:31.113" endtime="20230609 17:55:31.113"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.111" endtime="20230609 17:55:31.114"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:55:31.114" level="INFO">${payload} = {'nome': 'Holly Perry', 'email': 'kimberly22@example.org', 'password': 'PZI4jPz59Auh', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 17:55:31.114" endtime="20230609 17:55:31.114"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:55:31.115" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 17:55:31.114" endtime="20230609 17:55:31.115"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:55:31.194" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '112'} 
 body=b'{"nome": "Holly Perry", "email": "kimberly22@example.org", "password": "PZI4jPz59Auh", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 17:55:31.194" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '5b629681-3d66-4c33-aaf6-5a55df7cab11', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'd0e44f8134f0d4695e9b9d78fd8c2631', 'Date': 'Fri, 09 Jun 2023 17:55:31 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "YUd1gXOLFOFo4N12"
} 
 </msg>
<msg timestamp="20230609 17:55:31.194" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.115" endtime="20230609 17:55:31.194"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230609 17:55:31.195" level="INFO">${user_id} = YUd1gXOLFOFo4N12</msg>
<status status="PASS" starttime="20230609 17:55:31.194" endtime="20230609 17:55:31.195"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230609 17:55:31.195" level="INFO">${USER_ID} = YUd1gXOLFOFo4N12</msg>
<status status="PASS" starttime="20230609 17:55:31.195" endtime="20230609 17:55:31.195"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:55:31.196" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.196" endtime="20230609 17:55:31.196"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.114" endtime="20230609 17:55:31.196"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:55:31.197" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.196" endtime="20230609 17:55:31.197"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:55:31.197" endtime="20230609 17:55:31.198"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.196" endtime="20230609 17:55:31.198"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:55:31.199" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 17:55:31.198" endtime="20230609 17:55:31.199"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.198" endtime="20230609 17:55:31.199"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:55:31.109" endtime="20230609 17:55:31.199"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:55:31.200" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:55:31.200" endtime="20230609 17:55:31.201"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.200" endtime="20230609 17:55:31.201"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:55:31.277" level="INFO">GET Request : url=https://serverest.dev/usuarios/YUd1gXOLFOFo4N12 
 path_url=/usuarios/YUd1gXOLFOFo4N12 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 17:55:31.277" level="INFO">GET Response : url=https://serverest.dev/usuarios/YUd1gXOLFOFo4N12 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'f1f23caa-55a5-4f34-8c07-c3f75bc2d015', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '2e1082e9feb5710b9701477243a30f3c', 'Date': 'Fri, 09 Jun 2023 17:55:31 GMT', 'Server': 'Google Frontend', 'Content-Length': '161'} 
 body={
    "nome": "Holly Perry",
    "email": "kimberly22@example.org",
    "password": "PZI4jPz59Auh",
    "administrador": "false",
    "_id": "YUd1gXOLFOFo4N12"
} 
 </msg>
<msg timestamp="20230609 17:55:31.277" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.201" endtime="20230609 17:55:31.278"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:55:31.278" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.278" endtime="20230609 17:55:31.278"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.201" endtime="20230609 17:55:31.278"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:55:31.279" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.279" endtime="20230609 17:55:31.279"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:55:31.279" endtime="20230609 17:55:31.280"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.278" endtime="20230609 17:55:31.280"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:55:31.281" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230609 17:55:31.280" endtime="20230609 17:55:31.281"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.280" endtime="20230609 17:55:31.281"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:55:31.199" endtime="20230609 17:55:31.281"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:55:31.283" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:55:31.283" endtime="20230609 17:55:31.283"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.282" endtime="20230609 17:55:31.283"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:55:31.284" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 17:55:31.284" endtime="20230609 17:55:31.284"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:55:31.284" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 17:55:31.284" endtime="20230609 17:55:31.284"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:55:31.372" level="INFO">PUT Request : url=https://serverest.dev/usuarios/YUd1gXOLFOFo4N12 
 path_url=/usuarios/YUd1gXOLFOFo4N12 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 17:55:31.372" level="INFO">PUT Response : url=https://serverest.dev/usuarios/YUd1gXOLFOFo4N12 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '069da7de-c5ef-4943-ad13-19ebd7ece81c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'cb407cc16205e4d640b60a5a262ff833', 'Date': 'Fri, 09 Jun 2023 17:55:31 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230609 17:55:31.373" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.284" endtime="20230609 17:55:31.373"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:55:31.373" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.373" endtime="20230609 17:55:31.373"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.283" endtime="20230609 17:55:31.373"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:55:31.374" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.374" endtime="20230609 17:55:31.374"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:55:31.375" endtime="20230609 17:55:31.375"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.373" endtime="20230609 17:55:31.375"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:55:31.376" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 17:55:31.376" endtime="20230609 17:55:31.376"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.375" endtime="20230609 17:55:31.376"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:55:31.282" endtime="20230609 17:55:31.376"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:55:31.378" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:55:31.377" endtime="20230609 17:55:31.378"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.377" endtime="20230609 17:55:31.378"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:55:31.462" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/YUd1gXOLFOFo4N12 
 path_url=/usuarios/YUd1gXOLFOFo4N12 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230609 17:55:31.462" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/YUd1gXOLFOFo4N12 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '27779978-22aa-4d06-8f60-fe3f4dd59020', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '0e075dd4e9eca9948136d8f1839e4c0e', 'Date': 'Fri, 09 Jun 2023 17:55:31 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230609 17:55:31.462" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.378" endtime="20230609 17:55:31.462"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:55:31.463" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.462" endtime="20230609 17:55:31.463"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.378" endtime="20230609 17:55:31.463"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:55:31.464" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:55:31.463" endtime="20230609 17:55:31.464"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:55:31.464" endtime="20230609 17:55:31.465"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.463" endtime="20230609 17:55:31.465"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:55:31.466" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 17:55:31.465" endtime="20230609 17:55:31.466"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.465" endtime="20230609 17:55:31.466"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:55:31.377" endtime="20230609 17:55:31.466"/>
</test>
<status status="PASS" starttime="20230609 17:55:30.265" endtime="20230609 17:55:31.467"/>
</suite>
<status status="PASS" starttime="20230609 17:55:30.263" endtime="20230609 17:55:31.468"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 17:55:31.479" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 17:55:31.479" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 17:55:31.479" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 17:55:31.478" endtime="20230609 17:55:31.480"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 17:55:31.480" endtime="20230609 17:55:31.480"/>
</kw>
<status status="FAIL" starttime="20230609 17:55:31.478" endtime="20230609 17:55:31.480"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 17:55:31.480" endtime="20230609 17:55:31.481"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.480" endtime="20230609 17:55:31.481"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 17:55:31.477" endtime="20230609 17:55:31.481">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 17:55:31.484" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 17:55:31.484" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 17:55:31.484" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 17:55:31.483" endtime="20230609 17:55:31.484"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 17:55:31.484" endtime="20230609 17:55:31.484"/>
</kw>
<status status="FAIL" starttime="20230609 17:55:31.482" endtime="20230609 17:55:31.484"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 17:55:31.485" endtime="20230609 17:55:31.485"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.484" endtime="20230609 17:55:31.485"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 17:55:31.482" endtime="20230609 17:55:31.485">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 17:55:31.487" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 17:55:31.487" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 17:55:31.487" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 17:55:31.486" endtime="20230609 17:55:31.487"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 17:55:31.487" endtime="20230609 17:55:31.487"/>
</kw>
<status status="FAIL" starttime="20230609 17:55:31.486" endtime="20230609 17:55:31.487"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 17:55:31.488" endtime="20230609 17:55:31.488"/>
</kw>
<status status="PASS" starttime="20230609 17:55:31.488" endtime="20230609 17:55:31.488"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 17:55:31.486" endtime="20230609 17:55:31.488">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<status status="FAIL" starttime="20230609 17:55:31.470" endtime="20230609 17:55:31.489"/>
</suite>
<status status="FAIL" starttime="20230609 17:55:31.469" endtime="20230609 17:55:31.490"/>
</suite>
<status status="FAIL" starttime="20230609 17:55:30.245" endtime="20230609 17:55:31.491"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
