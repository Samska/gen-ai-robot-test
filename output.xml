<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230413 17:48:34.278" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users/test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:48:34.800" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:48:34.800" endtime="20230413 17:48:34.801"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.799" endtime="20230413 17:48:34.801"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:48:34.968" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:48:34.968" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '7a17d4fb-0270-4457-b96e-a11eead23798', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '4d0e9986807e0fca298b1d7733198b1d;o=1', 'Date': 'Thu, 13 Apr 2023 17:48:34 GMT', 'Server': 'Google Frontend', 'Content-Length': '13054'} 
 body={
    "quantidade": 60,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "1I5MtFIUIIOY5fV8"
        },
        {
            "nome": "Windows da Silva",
            "email": "ipqxei@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "2JhTk8dSFIFe8lH6"
        },
        {
            "nome": "aaa",
            "email": "bbb@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "2Lp5Uq7pDHUbBffY"
        },
        {
            "nome": "Exemplo 9X7kfjTmz9SjcP4EYCr4",
            "email": "exemplo43626@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "4CFJWLaQTgUc4eMC"
        },
        {
            "nome": "Exemplo QPiYZF8TfPfPDcgTtgr1",
            "email": "exemplo11663@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "5N2ATjv2B0XGPBl9"
        },
        {
            "nome": "Beth Ratke",
            "email": "stacy@osinski-osinski.info",
            "password": "teste",
            "administrador": "true",
            "_id": "71wWcZo3ezwrC3Cr"
        },
        {
            "nome": "Exemplo tiHX2K0De67r5G5CeiTR",
            "email": "exemplo36633@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "9YIv3udFYuc0Tu0p"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ppfv@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "9mIJVW1Ol7xedZFs"
        },
        {
            "nome": "Fulano da Silva",
            "email": "bfulanobeltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "9yXfe3X9q1uk5fbb"
        },
        {
            "nome": "Fulano da Silva",
            "email": "pxwc@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "APyHOugT42PmdOBJ"
        },
        {
            "nome": "Exemplo 3KWBhxciIYciwz64LT0k",
            "email": "exemplo33482@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "BAFed8nK0CMGJdvn"
        },
        {
            "nome": "Fulano da Silva",
            "email": "mvsc@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "FxBMCLty8jySZP22"
        },
        {
            "nome": "Fulano da Silva",
            "email": "vasm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "GCpN2ihUBADVFECo"
        },
        {
            "nome": "Fulano da Silva",
            "email": "juvo@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "H7CG5GTrfZj2tn96"
        },
        {
            "nome": "Delma Welch",
            "email": "jermaine@rodriguez.com",
            "password": "teste",
            "administrador": "true",
            "_id": "IJG76Lf2CDJbbMsw"
        },
        {
            "nome": "Exemplo QvyWoqoUrwlllHQzHwOS",
            "email": "exemplo20570@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "IPNUsHyVhp454cGG"
        },
        {
            "nome": "Fulano da Silva",
            "email": "xisn@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "IPaJtKGqg7LbtiU8"
        },
        {
            "nome": "Fulano da Silva",
            "email": "jlnp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "J3UFFE8BkXHPl98Q"
        },
        {
            "nome": "Exemplo cV2NdMGFuBP7g6IjxSO9",
            "email": "exemplo38520@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "JMC2uZ4PkrodEZsx"
        },
        {
            "nome": "Erasmo Greenfelder",
            "email": "gary@green.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "L9YvsBccf96rb0IJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "dvrb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "LbqHhFaMoMXgzH6e"
        },
        {
            "nome": "Exemplo y8Vi0fzQWSxPmFBufSCa",
            "email": "exemplo38692@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "LxmLtRl5ATwDdSNl"
        },
        {
            "nome": "batata",
            "email": "hayden_steuber@cartwright.info",
            "password": "teste",
            "administrador": "true",
            "_id": "MFX1zgBTAv3RdyAw"
        },
        {
            "nome": "Fulano da Silva",
            "email": "gzmi@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "MVIuW7YbJau8fYqf"
        },
        {
            "nome": "Exemplo ljQudgVK4Ga69BFf0tCu",
            "email": "exemplo20866@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "NlPhsEzSKmeRHI2f"
        },
        {
            "nome": "Exemplo t94YbT6aJM36VqxxCLsC",
            "email": "exemplo17537@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "NobMSBGEj3fxxKna"
        },
        {
            "nome": "Exemplo Xj8qCRnDyaVIzw2JUVme",
            "email": "exemplo40666@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "OqZHuvhXeIghCmqZ"
        },
        {
            "nome": "Alva Lockman VM",
            "email": "cyndy@stehr-kessler.org",
            "password": "teste",
            "administrador": "true",
            "_id": "QZPWUihL06UUtchr"
        },
        {
            "nome": "Twila Hessel",
            "email": "derek@frami-huel.info",
            "password": "teste",
            "administrador": "true",
            "_id": "VkpCmTunrhycBbfW"
        },
        {
            "nome": "Fulano da Silva",
            "email": "crhp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "WaqzREFowvCuPHI4"
        },
        {
            "nome": "Windows da Silva",
            "email": "fslffc@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "XTwLaV0XfRxVQhUW"
        },
        {
            "nome": "Fulano da Silva",
            "email": "evlw@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "XgZqO6TvbkxB0ZiZ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "slqa@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "ZDWAI2kyN4JNLHdV"
        },
        {
            "nome": "Keshia Sanford",
            "email": "antonio_gleason@abbott.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "ZsGL8uPkee6KhzCc"
        },
        {
            "nome": "Lawanda Batz",
            "email": "clint@greenfelder.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "a2CavA8YTDhJTJmg"
        },
        {
            "nome": "Alycia Ziemann",
            "email": "susy@sporer-stark.org",
            "password": "teste",
            "administrador": "true",
            "_id": "aEsRWoDckR1I79vo"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qrzm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "dBt5B3uvz6v6XJ1Y"
        },
        {
            "nome": "Windows da Silva",
            "email": "guiwtc@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "dYbAWCLodZs9INI4"
        },
        {
            "nome": "Exemplo TPTjZbIVN62pImWa033W",
            "email": "exemplo43422@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "eREDLXOay3DZEYyh"
        },
        {
            "nome": "Day Pimenta",
            "email": "dayannemp@yahoo.com.br",
            "password": "1234567",
            "administrador": "true",
            "_id": "eaamiT5kJbihf0bZ"
        },
        {
            "nome": "Keisha Witting",
            "email": "alexandra.jakubowski@hirthe-wisoky.org",
            "password": "teste",
            "administrador": "true",
            "_id": "gUKn5J99Pi2FaKPZ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "yrim@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "iHBbR39t0ubzjbPq"
        },
        {
            "nome": "Windows da Silva",
            "email": "lliebv@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "iv23MKIg4gCOCuqE"
        },
        {
            "nome": "Exemplo bEDatc3qqCzbIqr7vS4h",
            "email": "exemplo37341@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "j87MEnEet90kwJqD"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Abbigail.Purdy@example.org",
            "password": "teste",
            "administrador": "true",
            "_id": "jTe7... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230413 17:48:34.968" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:34.801" endtime="20230413 17:48:34.968"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:48:34.969" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:34.969" endtime="20230413 17:48:34.969"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.801" endtime="20230413 17:48:34.969"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:48:34.971" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:48:34.970" endtime="20230413 17:48:34.971"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:48:34.971" endtime="20230413 17:48:34.972"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.969" endtime="20230413 17:48:34.972"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:48:34.973" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230413 17:48:34.972" endtime="20230413 17:48:34.973"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.972" endtime="20230413 17:48:34.973"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.799" endtime="20230413 17:48:34.973"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:48:34.975" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:48:34.974" endtime="20230413 17:48:34.975"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.974" endtime="20230413 17:48:34.975"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230413 17:48:34.976" level="INFO">${name} = Samuel Scott</msg>
<status status="PASS" starttime="20230413 17:48:34.976" endtime="20230413 17:48:34.976"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230413 17:48:34.977" level="INFO">${email} = stacyevans@example.org</msg>
<status status="PASS" starttime="20230413 17:48:34.976" endtime="20230413 17:48:34.977"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230413 17:48:34.977" level="INFO">${password} = p18!5nExD+</msg>
<status status="PASS" starttime="20230413 17:48:34.977" endtime="20230413 17:48:34.978"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:48:34.978" level="INFO">${name} = Samuel Scott</msg>
<status status="PASS" starttime="20230413 17:48:34.978" endtime="20230413 17:48:34.978"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:48:34.979" level="INFO">${email} = stacyevans@example.org</msg>
<status status="PASS" starttime="20230413 17:48:34.979" endtime="20230413 17:48:34.979"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:48:34.979" level="INFO">${password} = p18!5nExD+</msg>
<status status="PASS" starttime="20230413 17:48:34.979" endtime="20230413 17:48:34.979"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.975" endtime="20230413 17:48:34.982"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:48:34.983" level="INFO">${payload} = {'nome': 'Samuel Scott', 'email': 'stacyevans@example.org', 'password': 'p18!5nExD+', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230413 17:48:34.982" endtime="20230413 17:48:34.983"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:48:34.984" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230413 17:48:34.983" endtime="20230413 17:48:34.984"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:48:35.064" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '111'} 
 body=b'{"nome": "Samuel Scott", "email": "stacyevans@example.org", "password": "p18!5nExD+", "administrador": "false"}' 
 </msg>
<msg timestamp="20230413 17:48:35.065" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'c2c31824-5c63-4591-bb46-94bd4dc3ae78', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '4201b7d1ac7d6aa65706b78e365c3a67', 'Date': 'Thu, 13 Apr 2023 17:48:35 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "h48FUPMti5IWHPCq"
} 
 </msg>
<msg timestamp="20230413 17:48:35.065" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:34.984" endtime="20230413 17:48:35.065"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230413 17:48:35.066" level="INFO">${user_id} = h48FUPMti5IWHPCq</msg>
<status status="PASS" starttime="20230413 17:48:35.065" endtime="20230413 17:48:35.066"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230413 17:48:35.066" level="INFO">${USER_ID} = h48FUPMti5IWHPCq</msg>
<status status="PASS" starttime="20230413 17:48:35.066" endtime="20230413 17:48:35.067"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:48:35.067" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.067" endtime="20230413 17:48:35.067"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.982" endtime="20230413 17:48:35.067"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:48:35.068" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.068" endtime="20230413 17:48:35.068"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:48:35.068" endtime="20230413 17:48:35.069"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.067" endtime="20230413 17:48:35.069"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:48:35.071" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230413 17:48:35.070" endtime="20230413 17:48:35.071"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.070" endtime="20230413 17:48:35.071"/>
</kw>
<status status="PASS" starttime="20230413 17:48:34.974" endtime="20230413 17:48:35.071"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="21">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:48:35.073" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:48:35.072" endtime="20230413 17:48:35.073"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.072" endtime="20230413 17:48:35.073"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:48:35.147" level="INFO">GET Request : url=https://serverest.dev/usuarios/h48FUPMti5IWHPCq 
 path_url=/usuarios/h48FUPMti5IWHPCq 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:48:35.147" level="INFO">GET Response : url=https://serverest.dev/usuarios/h48FUPMti5IWHPCq 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'dc90c22a-5dc4-49bb-9295-c1da6fa5d493', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '504aa873a771ce8b5893b733a3927eb8', 'Date': 'Thu, 13 Apr 2023 17:48:35 GMT', 'Server': 'Google Frontend', 'Content-Length': '160'} 
 body={
    "nome": "Samuel Scott",
    "email": "stacyevans@example.org",
    "password": "p18!5nExD+",
    "administrador": "false",
    "_id": "h48FUPMti5IWHPCq"
} 
 </msg>
<msg timestamp="20230413 17:48:35.147" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.073" endtime="20230413 17:48:35.147"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:48:35.148" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.148" endtime="20230413 17:48:35.148"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.073" endtime="20230413 17:48:35.148"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:48:35.150" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.149" endtime="20230413 17:48:35.150"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:48:35.150" endtime="20230413 17:48:35.151"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.148" endtime="20230413 17:48:35.151"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:48:35.152" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230413 17:48:35.151" endtime="20230413 17:48:35.152"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.151" endtime="20230413 17:48:35.152"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.072" endtime="20230413 17:48:35.152"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="26">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:48:35.154" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:48:35.153" endtime="20230413 17:48:35.154"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.153" endtime="20230413 17:48:35.155"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:48:35.155" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230413 17:48:35.155" endtime="20230413 17:48:35.155"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:48:35.156" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230413 17:48:35.156" endtime="20230413 17:48:35.156"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:48:35.225" level="INFO">PUT Request : url=https://serverest.dev/usuarios/h48FUPMti5IWHPCq 
 path_url=/usuarios/h48FUPMti5IWHPCq 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230413 17:48:35.225" level="INFO">PUT Response : url=https://serverest.dev/usuarios/h48FUPMti5IWHPCq 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'ab86e137-e8d1-4f89-b249-6bbb74b3fb84', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '3a14a99a7df1bc03d79f32d2606d03ec', 'Date': 'Thu, 13 Apr 2023 17:48:35 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230413 17:48:35.225" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.156" endtime="20230413 17:48:35.225"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:48:35.226" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.225" endtime="20230413 17:48:35.226"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.155" endtime="20230413 17:48:35.226"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:48:35.227" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.226" endtime="20230413 17:48:35.227"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:48:35.228" endtime="20230413 17:48:35.228"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.226" endtime="20230413 17:48:35.228"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:48:35.230" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230413 17:48:35.229" endtime="20230413 17:48:35.230"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.229" endtime="20230413 17:48:35.230"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.153" endtime="20230413 17:48:35.230"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="31">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:48:35.232" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:48:35.231" endtime="20230413 17:48:35.232"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.231" endtime="20230413 17:48:35.232"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:48:35.305" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/h48FUPMti5IWHPCq 
 path_url=/usuarios/h48FUPMti5IWHPCq 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:48:35.305" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/h48FUPMti5IWHPCq 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'd9046bca-2109-4a13-885d-5d9bd0f19327', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c8eda238d6be6be9c7c53b0b62310e8f', 'Date': 'Thu, 13 Apr 2023 17:48:35 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230413 17:48:35.306" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.233" endtime="20230413 17:48:35.306"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:48:35.306" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.306" endtime="20230413 17:48:35.306"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.232" endtime="20230413 17:48:35.307"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:48:35.308" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:48:35.307" endtime="20230413 17:48:35.308"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:48:35.308" endtime="20230413 17:48:35.309"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.307" endtime="20230413 17:48:35.309"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:48:35.310" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230413 17:48:35.310" endtime="20230413 17:48:35.310"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.309" endtime="20230413 17:48:35.310"/>
</kw>
<status status="PASS" starttime="20230413 17:48:35.230" endtime="20230413 17:48:35.311"/>
</test>
<status status="PASS" starttime="20230413 17:48:34.309" endtime="20230413 17:48:35.312"/>
</suite>
<status status="PASS" starttime="20230413 17:48:34.308" endtime="20230413 17:48:35.313"/>
</suite>
<status status="PASS" starttime="20230413 17:48:34.306" endtime="20230413 17:48:35.314"/>
</suite>
<status status="PASS" starttime="20230413 17:48:34.279" endtime="20230413 17:48:35.316"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
