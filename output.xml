<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.8.18 on linux)" generated="20231107 00:10:28.606" rpa="false" schemaversion="4">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231107 00:10:29.375" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231107 00:10:29.374" endtime="20231107 00:10:29.375"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.374" endtime="20231107 00:10:29.375"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231107 00:10:29.519" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231107 00:10:29.519" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'b6f87c7f71176d65379b5a3eb0918a5e', 'Date': 'Tue, 07 Nov 2023 00:10:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '13707'} 
 body={
    "quantidade": 63,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "zwpa@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2KDRVqZpg1J8doyg"
        },
        {
            "nome": "Fulano da Silva",
            "email": "rateste@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "2Th8vSj240L8uZ7Q"
        },
        {
            "nome": "Vince.Lind12",
            "email": "Charlene.Lowe@hotmail.com",
            "password": "213329378",
            "administrador": "true",
            "_id": "3nl8K9mMzglksUTJ"
        },
        {
            "nome": "Margie_Steuber72",
            "email": "Camron4@hotmail.com",
            "password": "222229259",
            "administrador": "true",
            "_id": "7ydNUhmC8MztW3FG"
        },
        {
            "nome": "com.github.javafaker.Name@48a38a12",
            "email": "trevor.sauer@yahoo.com",
            "password": "flb4yr2n1",
            "administrador": "true",
            "_id": "7zMp6RNhGT1LgeRD"
        },
        {
            "nome": "Fulano da Silva",
            "email": "iifq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "9HHexvssYyLY3KqY"
        },
        {
            "nome": "Vitor Oliveira",
            "email": "alberto.pollich@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "B1bJWRUwM4YRbDU6"
        },
        {
            "nome": "Vitor Oliveira",
            "email": "raymond.kemmer@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "BaZDyFqGYQydA36l"
        },
        {
            "nome": "Morris Bogan PhD",
            "email": "bronwyn.hartmann@gmail.com",
            "password": "75f3kn7ve0g2zb",
            "administrador": "true",
            "_id": "CHD3ChkqJVTPTxWf"
        },
        {
            "nome": "Miguel",
            "email": "miguel.hoffman@example.com",
            "password": "browns",
            "administrador": "false",
            "_id": "CtfItrpSgjQ7JnNp"
        },
        {
            "nome": "Hector.Satterfield",
            "email": "Evans84@hotmail.com",
            "password": "412722504",
            "administrador": "true",
            "_id": "EmI8wkJuQwatqmhT"
        },
        {
            "nome": "Williams Bins Sr.",
            "email": "stevie.roberts@hotmail.com",
            "password": "b0mo3s4g61k",
            "administrador": "false",
            "_id": "F1MXfe5kLezjTFYg"
        },
        {
            "nome": "Ila_Pfeffer",
            "email": "Diego.Welch83@yahoo.com",
            "password": "868380406",
            "administrador": "true",
            "_id": "FkXC6tKFhCDRRPFj"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "Fwzcv7Kba4Ivz9BH"
        },
        {
            "nome": "com.github.javafaker.Name@2aa65672",
            "email": "nathaniel.ruecker@gmail.com",
            "password": "d2j7v1dvbnbodgt",
            "administrador": "true",
            "_id": "I0PsMlb0LJ4XZduF"
        },
        {
            "nome": "Brittany_Bartoletti",
            "email": "Autumn49@hotmail.com",
            "password": "025544945",
            "administrador": "true",
            "_id": "IWUBsnGtfsIX1RZo"
        },
        {
            "nome": "Fulano1 da Silva",
            "email": "beltrano123@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "IpAexdAvBKFWn8jy"
        },
        {
            "nome": "Peao ",
            "email": "felecia.hegmann@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "JRVYyoZhVhF4G4Gh"
        },
        {
            "nome": "Jonas Neto",
            "email": "melissakane@example.org",
            "password": "123456",
            "administrador": "true",
            "_id": "K7xQlxBeWzihzxdK"
        },
        {
            "nome": "Fulano da Silva",
            "email": "mklq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "LzI8BUKytvSDzE7X"
        },
        {
            "nome": "Fulano da Silva",
            "email": "djib@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "MowSmO3Ou2AFoO0V"
        },
        {
            "nome": "com.github.javafaker.Name@2aa65672",
            "email": "eli.denesik@gmail.com",
            "password": "zdi0z415tk9",
            "administrador": "true",
            "_id": "NqzXBdcYE8oMTV8w"
        },
        {
            "nome": "Jonas Neto",
            "email": "jonesmatthew@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "NrToEORi4MnvgHHk"
        },
        {
            "nome": "Fulano da Silva",
            "email": "nxxc@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "PCD64aCO8Oe6ywis"
        },
        {
            "nome": "Peao ",
            "email": "norman.paucek@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "Pd5dSY7KhV0PPD71"
        },
        {
            "nome": "Fulano da Silva",
            "email": "zxvb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "QbFCBOssRcreQumm"
        },
        {
            "nome": "com.github.javafaker.Name@5e25085",
            "email": "juan.conn@gmail.com",
            "password": "0h3o79t61o",
            "administrador": "true",
            "_id": "SsITYyLwZrQW9hTi"
        },
        {
            "nome": "Emerald 9876f35c-ec39-4983-9c3e-101462399400",
            "email": "automation-postUser5acec589-093d-4544-bd8d-60a0f387ca0f@moviautomation.com",
            "password": "1234",
            "administrador": "true",
            "_id": "TlnktmgumSecGvxR"
        },
        {
            "nome": "Tara34",
            "email": "Hope91@gmail.com",
            "password": "067866486",
            "administrador": "true",
            "_id": "Tn4otB035Upmx4A6"
        },
        {
            "nome": "Miss Georgann Johns",
            "email": "rolf.mcdermott@yahoo.com",
            "password": "i5ln459ifqeyt",
            "administrador": "true",
            "_id": "U2V84Ag95b9SsL6R"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ghlu@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "U33zFZQ6FT3JPfb2"
        },
        {
            "nome": "Dr. Santo Daugherty",
            "email": "henry.balistreri@yahoo.com",
            "password": "qvanjy8ecptood7",
            "administrador": "false",
            "_id": "W22fBlcn4w4K5eVg"
        },
        {
            "nome": "Bryce21",
            "email": "Mark56@yahoo.com",
            "password": "830294141",
            "administrador": "true",
            "_id": "WKJFf3Gkio558cv9"
        },
        {
            "nome": "Vitor Oliveira",
            "email": "ella.morissette@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "XLhsnU6QXoAQKckl"
        },
        {
            "nome": "Hiram Wolff",
            "email": "perry.langworth@yahoo.com",
            "password": "y4w5944zx",
            "administrador": "true",
            "_id": "Y4YD2LKR51RiryWO"
        },
        {
            "nome": "Maiya41",
            "email": "Mekhi_Towne57@hotmail.com",
            "password": "313245031",
            "administrador": "true",
            "_id": "YJFFIOpqwO0SZbva"
        },
        {
            "nome": "Peao",
            "email": "hilaria.kreiger@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "YXAICgpEu2Rr1TGB"
        },
        {
            "nome": "Fulano da Silva",
            "email": "mtiq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "YwCAUg8OOZqWisoL"
        },
        {
            "nome": "Fulano da Silva",
            "email": "bnbk@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "agsV7lcBn1P8kn32"
        },
        {
            "nome": "Alan_Stoltenberg57",
            "email": "Curt.Wunsch@gmail.com",
            "password": "261183373",
            "administrador": "true",
            "_id": "aqfZNDB5cQqby82A"
        },
        {
            "nome": "Peao ",
            "email": "max.deckow@qa.com",
            "password": "teste@123",
            "administrador": "true",
            "_id": "b7S9n7WDzIPz0RY4"
        },
        {
            "nome": "Curt69",
            "email": "Alphonso18@hotmail.com",
            "password": "369883927",
            "administrador": "true",
            "_id": "bjOoTin3PubTWqSi"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qknl@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "cosfxgNLwfg6pTec"
        },
        {
            "nome": "Jonas Neto",
            "email": "eboyle@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "daebC7F25uehRho3"
        },
        {
            "nome": "Logan_Stanton75",
            "email": "Solon_Stanton@gmail.com",
            "password": "790738877",
       ... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20231107 00:10:29.520" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.376" endtime="20231107 00:10:29.520"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231107 00:10:29.520" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.520" endtime="20231107 00:10:29.520"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.375" endtime="20231107 00:10:29.521"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231107 00:10:29.522" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.521" endtime="20231107 00:10:29.522"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231107 00:10:29.522" endtime="20231107 00:10:29.523"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.521" endtime="20231107 00:10:29.523"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231107 00:10:29.525" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231107 00:10:29.524" endtime="20231107 00:10:29.525"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.524" endtime="20231107 00:10:29.525"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231107 00:10:29.372" endtime="20231107 00:10:29.526"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231107 00:10:29.528" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231107 00:10:29.527" endtime="20231107 00:10:29.528"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.527" endtime="20231107 00:10:29.528"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example: 'John Doe'</doc>
<msg timestamp="20231107 00:10:29.529" level="INFO">${name} = Benjamin Whitaker</msg>
<status status="PASS" starttime="20231107 00:10:29.529" endtime="20231107 00:10:29.530"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20231107 00:10:29.530" level="INFO">${email} = ggonzales@example.net</msg>
<status status="PASS" starttime="20231107 00:10:29.530" endtime="20231107 00:10:29.530"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20231107 00:10:29.531" level="INFO">${password} = wB8AVbys5z8d</msg>
<status status="PASS" starttime="20231107 00:10:29.530" endtime="20231107 00:10:29.531"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231107 00:10:29.531" level="INFO">${name} = Benjamin Whitaker</msg>
<status status="PASS" starttime="20231107 00:10:29.531" endtime="20231107 00:10:29.531"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231107 00:10:29.532" level="INFO">${email} = ggonzales@example.net</msg>
<status status="PASS" starttime="20231107 00:10:29.532" endtime="20231107 00:10:29.532"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231107 00:10:29.532" level="INFO">${password} = wB8AVbys5z8d</msg>
<status status="PASS" starttime="20231107 00:10:29.532" endtime="20231107 00:10:29.532"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.528" endtime="20231107 00:10:29.533"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231107 00:10:29.534" level="INFO">${payload} = {'nome': 'Benjamin Whitaker', 'email': 'ggonzales@example.net', 'password': 'wB8AVbys5z8d', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231107 00:10:29.533" endtime="20231107 00:10:29.534"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231107 00:10:29.534" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231107 00:10:29.534" endtime="20231107 00:10:29.534"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20231107 00:10:29.597" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '117'} 
 body=b'{"nome": "Benjamin Whitaker", "email": "ggonzales@example.net", "password": "wB8AVbys5z8d", "administrador": "false"}' 
 </msg>
<msg timestamp="20231107 00:10:29.598" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '4db72691145ccf66a2112de8e96bd5b1', 'Date': 'Tue, 07 Nov 2023 00:10:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "59H3MIYGD166fQ20"
} 
 </msg>
<msg timestamp="20231107 00:10:29.598" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.534" endtime="20231107 00:10:29.598"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231107 00:10:29.599" level="INFO">${user_id} = 59H3MIYGD166fQ20</msg>
<status status="PASS" starttime="20231107 00:10:29.598" endtime="20231107 00:10:29.599"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20231107 00:10:29.600" level="INFO">${USER_ID} = 59H3MIYGD166fQ20</msg>
<status status="PASS" starttime="20231107 00:10:29.599" endtime="20231107 00:10:29.600"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231107 00:10:29.601" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.600" endtime="20231107 00:10:29.601"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.533" endtime="20231107 00:10:29.601"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231107 00:10:29.602" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.602" endtime="20231107 00:10:29.602"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231107 00:10:29.603" endtime="20231107 00:10:29.603"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.601" endtime="20231107 00:10:29.603"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231107 00:10:29.605" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231107 00:10:29.604" endtime="20231107 00:10:29.605"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.604" endtime="20231107 00:10:29.605"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231107 00:10:29.527" endtime="20231107 00:10:29.605"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231107 00:10:29.607" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231107 00:10:29.607" endtime="20231107 00:10:29.608"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.607" endtime="20231107 00:10:29.608"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231107 00:10:29.712" level="INFO">GET Request : url=https://serverest.dev/usuarios/59H3MIYGD166fQ20 
 path_url=/usuarios/59H3MIYGD166fQ20 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231107 00:10:29.712" level="INFO">GET Response : url=https://serverest.dev/usuarios/59H3MIYGD166fQ20 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a2a36338e126fa207819ccecc1298c80', 'Date': 'Tue, 07 Nov 2023 00:10:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '166'} 
 body={
    "nome": "Benjamin Whitaker",
    "email": "ggonzales@example.net",
    "password": "wB8AVbys5z8d",
    "administrador": "false",
    "_id": "59H3MIYGD166fQ20"
} 
 </msg>
<msg timestamp="20231107 00:10:29.712" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.608" endtime="20231107 00:10:29.712"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231107 00:10:29.713" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.712" endtime="20231107 00:10:29.713"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.608" endtime="20231107 00:10:29.713"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231107 00:10:29.715" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.714" endtime="20231107 00:10:29.715"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231107 00:10:29.715" endtime="20231107 00:10:29.716"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.713" endtime="20231107 00:10:29.716"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231107 00:10:29.717" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20231107 00:10:29.717" endtime="20231107 00:10:29.717"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.716" endtime="20231107 00:10:29.718"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231107 00:10:29.606" endtime="20231107 00:10:29.718"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231107 00:10:29.720" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231107 00:10:29.720" endtime="20231107 00:10:29.720"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.719" endtime="20231107 00:10:29.720"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231107 00:10:29.721" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231107 00:10:29.721" endtime="20231107 00:10:29.721"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231107 00:10:29.723" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231107 00:10:29.722" endtime="20231107 00:10:29.723"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20231107 00:10:29.796" level="INFO">PUT Request : url=https://serverest.dev/usuarios/59H3MIYGD166fQ20 
 path_url=/usuarios/59H3MIYGD166fQ20 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20231107 00:10:29.796" level="INFO">PUT Response : url=https://serverest.dev/usuarios/59H3MIYGD166fQ20 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '237a0c76eec0c282aea132a82bc65aea', 'Date': 'Tue, 07 Nov 2023 00:10:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20231107 00:10:29.796" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.723" endtime="20231107 00:10:29.796"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231107 00:10:29.797" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.797" endtime="20231107 00:10:29.797"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.721" endtime="20231107 00:10:29.797"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231107 00:10:29.799" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.798" endtime="20231107 00:10:29.799"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231107 00:10:29.799" endtime="20231107 00:10:29.800"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.798" endtime="20231107 00:10:29.800"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231107 00:10:29.801" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231107 00:10:29.801" endtime="20231107 00:10:29.801"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.800" endtime="20231107 00:10:29.802"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231107 00:10:29.719" endtime="20231107 00:10:29.802"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231107 00:10:29.804" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231107 00:10:29.804" endtime="20231107 00:10:29.804"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.803" endtime="20231107 00:10:29.804"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20231107 00:10:29.867" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/59H3MIYGD166fQ20 
 path_url=/usuarios/59H3MIYGD166fQ20 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20231107 00:10:29.867" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/59H3MIYGD166fQ20 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'cd499f65d343ce7cf56890df316b201b', 'Date': 'Tue, 07 Nov 2023 00:10:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20231107 00:10:29.867" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.805" endtime="20231107 00:10:29.867"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231107 00:10:29.868" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.868" endtime="20231107 00:10:29.868"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.805" endtime="20231107 00:10:29.868"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231107 00:10:29.870" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231107 00:10:29.869" endtime="20231107 00:10:29.870"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231107 00:10:29.870" endtime="20231107 00:10:29.871"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.868" endtime="20231107 00:10:29.871"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231107 00:10:29.872" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231107 00:10:29.872" endtime="20231107 00:10:29.872"/>
</kw>
<status status="PASS" starttime="20231107 00:10:29.871" endtime="20231107 00:10:29.872"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231107 00:10:29.803" endtime="20231107 00:10:29.873"/>
</test>
<status status="PASS" starttime="20231107 00:10:28.637" endtime="20231107 00:10:29.874"/>
</suite>
<status status="PASS" starttime="20231107 00:10:28.634" endtime="20231107 00:10:29.876"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231107 00:10:29.893" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231107 00:10:37.103" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231107 00:10:37.104" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55baf494bfb3 &lt;unknown&gt;
#1 0x55baf461f4a7 &lt;unknown&gt;
#2 0x55baf4652c93 &lt;unknown&gt;
#3 0x55baf464f10c &lt;unknown&gt;
#4 0x55baf4691ac6 &lt;unknown&gt;
#5 0x55baf4688713 &lt;unknown&gt;
#6 0x55baf465b18b &lt;unknown&gt;
#7 0x55baf465bf7e &lt;unknown&gt;
#8 0x55baf49118d8 &lt;unknown&gt;
#9 0x55baf4915800 &lt;unknown&gt;
#10 0x55baf491fcfc &lt;unknown&gt;
#11 0x55baf4916418 &lt;unknown&gt;
#12 0x55baf48e342f &lt;unknown&gt;
#13 0x55baf493a4e8 &lt;unknown&gt;
#14 0x55baf493a6b4 &lt;unknown&gt;
#15 0x55baf494b143 &lt;unknown&gt;
#16 0x7f8807a94ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231107 00:10:29.892" endtime="20231107 00:10:37.106"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231107 00:10:37.106" endtime="20231107 00:10:37.106"/>
</kw>
<status status="FAIL" starttime="20231107 00:10:29.892" endtime="20231107 00:10:37.107"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231107 00:10:37.108" endtime="20231107 00:10:37.108"/>
</kw>
<status status="PASS" starttime="20231107 00:10:37.107" endtime="20231107 00:10:37.109"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231107 00:10:29.891" endtime="20231107 00:10:37.109">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55baf494bfb3 &lt;unknown&gt;
#1 0x55baf461f4a7 &lt;unknown&gt;
#2 0x55baf4652c93 &lt;unknown&gt;
#3 0x55baf464f10c &lt;unknown&gt;
#4 0x55baf4691ac6 &lt;unknown&gt;
#5 0x55baf4688713 &lt;unknown&gt;
#6 0x55baf465b18b &lt;unknown&gt;
#7 0x55baf465bf7e &lt;unknown&gt;
#8 0x55baf49118d8 &lt;unknown&gt;
#9 0x55baf4915800 &lt;unknown&gt;
#10 0x55baf491fcfc &lt;unknown&gt;
#11 0x55baf4916418 &lt;unknown&gt;
#12 0x55baf48e342f &lt;unknown&gt;
#13 0x55baf493a4e8 &lt;unknown&gt;
#14 0x55baf493a6b4 &lt;unknown&gt;
#15 0x55baf494b143 &lt;unknown&gt;
#16 0x7f8807a94ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231107 00:10:37.112" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231107 00:10:37.854" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231107 00:10:37.855" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x559c1d945fb3 &lt;unknown&gt;
#1 0x559c1d6194a7 &lt;unknown&gt;
#2 0x559c1d64cc93 &lt;unknown&gt;
#3 0x559c1d64910c &lt;unknown&gt;
#4 0x559c1d68bac6 &lt;unknown&gt;
#5 0x559c1d682713 &lt;unknown&gt;
#6 0x559c1d65518b &lt;unknown&gt;
#7 0x559c1d655f7e &lt;unknown&gt;
#8 0x559c1d90b8d8 &lt;unknown&gt;
#9 0x559c1d90f800 &lt;unknown&gt;
#10 0x559c1d919cfc &lt;unknown&gt;
#11 0x559c1d910418 &lt;unknown&gt;
#12 0x559c1d8dd42f &lt;unknown&gt;
#13 0x559c1d9344e8 &lt;unknown&gt;
#14 0x559c1d9346b4 &lt;unknown&gt;
#15 0x559c1d945143 &lt;unknown&gt;
#16 0x7f5aafc94ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231107 00:10:37.111" endtime="20231107 00:10:37.855"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231107 00:10:37.856" endtime="20231107 00:10:37.856"/>
</kw>
<status status="FAIL" starttime="20231107 00:10:37.110" endtime="20231107 00:10:37.856"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231107 00:10:37.857" endtime="20231107 00:10:37.858"/>
</kw>
<status status="PASS" starttime="20231107 00:10:37.857" endtime="20231107 00:10:37.858"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231107 00:10:37.109" endtime="20231107 00:10:37.858">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x559c1d945fb3 &lt;unknown&gt;
#1 0x559c1d6194a7 &lt;unknown&gt;
#2 0x559c1d64cc93 &lt;unknown&gt;
#3 0x559c1d64910c &lt;unknown&gt;
#4 0x559c1d68bac6 &lt;unknown&gt;
#5 0x559c1d682713 &lt;unknown&gt;
#6 0x559c1d65518b &lt;unknown&gt;
#7 0x559c1d655f7e &lt;unknown&gt;
#8 0x559c1d90b8d8 &lt;unknown&gt;
#9 0x559c1d90f800 &lt;unknown&gt;
#10 0x559c1d919cfc &lt;unknown&gt;
#11 0x559c1d910418 &lt;unknown&gt;
#12 0x559c1d8dd42f &lt;unknown&gt;
#13 0x559c1d9344e8 &lt;unknown&gt;
#14 0x559c1d9346b4 &lt;unknown&gt;
#15 0x559c1d945143 &lt;unknown&gt;
#16 0x7f5aafc94ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231107 00:10:37.861" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231107 00:10:38.607" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231107 00:10:38.607" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55ca81c12fb3 &lt;unknown&gt;
#1 0x55ca818e64a7 &lt;unknown&gt;
#2 0x55ca81919c93 &lt;unknown&gt;
#3 0x55ca8191610c &lt;unknown&gt;
#4 0x55ca81958ac6 &lt;unknown&gt;
#5 0x55ca8194f713 &lt;unknown&gt;
#6 0x55ca8192218b &lt;unknown&gt;
#7 0x55ca81922f7e &lt;unknown&gt;
#8 0x55ca81bd88d8 &lt;unknown&gt;
#9 0x55ca81bdc800 &lt;unknown&gt;
#10 0x55ca81be6cfc &lt;unknown&gt;
#11 0x55ca81bdd418 &lt;unknown&gt;
#12 0x55ca81baa42f &lt;unknown&gt;
#13 0x55ca81c014e8 &lt;unknown&gt;
#14 0x55ca81c016b4 &lt;unknown&gt;
#15 0x55ca81c12143 &lt;unknown&gt;
#16 0x7f7eb6e94ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231107 00:10:37.860" endtime="20231107 00:10:38.608"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231107 00:10:38.608" endtime="20231107 00:10:38.608"/>
</kw>
<status status="FAIL" starttime="20231107 00:10:37.860" endtime="20231107 00:10:38.608"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231107 00:10:38.610" endtime="20231107 00:10:38.610"/>
</kw>
<status status="PASS" starttime="20231107 00:10:38.609" endtime="20231107 00:10:38.610"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231107 00:10:37.858" endtime="20231107 00:10:38.610">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55ca81c12fb3 &lt;unknown&gt;
#1 0x55ca818e64a7 &lt;unknown&gt;
#2 0x55ca81919c93 &lt;unknown&gt;
#3 0x55ca8191610c &lt;unknown&gt;
#4 0x55ca81958ac6 &lt;unknown&gt;
#5 0x55ca8194f713 &lt;unknown&gt;
#6 0x55ca8192218b &lt;unknown&gt;
#7 0x55ca81922f7e &lt;unknown&gt;
#8 0x55ca81bd88d8 &lt;unknown&gt;
#9 0x55ca81bdc800 &lt;unknown&gt;
#10 0x55ca81be6cfc &lt;unknown&gt;
#11 0x55ca81bdd418 &lt;unknown&gt;
#12 0x55ca81baa42f &lt;unknown&gt;
#13 0x55ca81c014e8 &lt;unknown&gt;
#14 0x55ca81c016b4 &lt;unknown&gt;
#15 0x55ca81c12143 &lt;unknown&gt;
#16 0x7f7eb6e94ac3 &lt;unknown&gt;
</status>
</test>
<status status="FAIL" starttime="20231107 00:10:29.880" endtime="20231107 00:10:38.613"/>
</suite>
<status status="FAIL" starttime="20231107 00:10:29.877" endtime="20231107 00:10:38.615"/>
</suite>
<status status="FAIL" starttime="20231107 00:10:28.607" endtime="20231107 00:10:38.616"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
