<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230609 19:02:37.568" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" starttime="20230609 19:02:38.179" endtime="20230609 19:02:38.180"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.179" endtime="20230609 19:02:38.180"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" starttime="20230609 19:02:38.180" endtime="20230609 19:02:38.359"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" starttime="20230609 19:02:38.359" endtime="20230609 19:02:38.360"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.180" endtime="20230609 19:02:38.360"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" starttime="20230609 19:02:38.360" endtime="20230609 19:02:38.361"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:02:38.361" endtime="20230609 19:02:38.362"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.360" endtime="20230609 19:02:38.362"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" starttime="20230609 19:02:38.362" endtime="20230609 19:02:38.363"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.362" endtime="20230609 19:02:38.363"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:02:38.178" endtime="20230609 19:02:38.363"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" starttime="20230609 19:02:38.364" endtime="20230609 19:02:38.365"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.364" endtime="20230609 19:02:38.365"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<status status="PASS" starttime="20230609 19:02:38.365" endtime="20230609 19:02:38.366"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<status status="PASS" starttime="20230609 19:02:38.366" endtime="20230609 19:02:38.366"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<status status="PASS" starttime="20230609 19:02:38.366" endtime="20230609 19:02:38.366"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" starttime="20230609 19:02:38.367" endtime="20230609 19:02:38.367"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" starttime="20230609 19:02:38.367" endtime="20230609 19:02:38.367"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<status status="PASS" starttime="20230609 19:02:38.367" endtime="20230609 19:02:38.367"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.365" endtime="20230609 19:02:38.368"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" starttime="20230609 19:02:38.368" endtime="20230609 19:02:38.368"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" starttime="20230609 19:02:38.368" endtime="20230609 19:02:38.369"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<status status="PASS" starttime="20230609 19:02:38.369" endtime="20230609 19:02:38.447"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20230609 19:02:38.447" endtime="20230609 19:02:38.448"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="PASS" starttime="20230609 19:02:38.448" endtime="20230609 19:02:38.449"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" starttime="20230609 19:02:38.449" endtime="20230609 19:02:38.449"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.368" endtime="20230609 19:02:38.449"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" starttime="20230609 19:02:38.449" endtime="20230609 19:02:38.450"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:02:38.450" endtime="20230609 19:02:38.451"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.449" endtime="20230609 19:02:38.451"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" starttime="20230609 19:02:38.451" endtime="20230609 19:02:38.452"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.451" endtime="20230609 19:02:38.452"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:02:38.364" endtime="20230609 19:02:38.452"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" starttime="20230609 19:02:38.453" endtime="20230609 19:02:38.453"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.453" endtime="20230609 19:02:38.453"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" starttime="20230609 19:02:38.454" endtime="20230609 19:02:38.531"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" starttime="20230609 19:02:38.531" endtime="20230609 19:02:38.532"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.453" endtime="20230609 19:02:38.532"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" starttime="20230609 19:02:38.532" endtime="20230609 19:02:38.533"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:02:38.533" endtime="20230609 19:02:38.533"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.532" endtime="20230609 19:02:38.534"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" starttime="20230609 19:02:38.534" endtime="20230609 19:02:38.535"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.534" endtime="20230609 19:02:38.535"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:02:38.452" endtime="20230609 19:02:38.535"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" starttime="20230609 19:02:38.536" endtime="20230609 19:02:38.536"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.535" endtime="20230609 19:02:38.536"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" starttime="20230609 19:02:38.537" endtime="20230609 19:02:38.537"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<status status="PASS" starttime="20230609 19:02:38.537" endtime="20230609 19:02:38.537"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<status status="PASS" starttime="20230609 19:02:38.537" endtime="20230609 19:02:38.616"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" starttime="20230609 19:02:38.616" endtime="20230609 19:02:38.617"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.536" endtime="20230609 19:02:38.617"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" starttime="20230609 19:02:38.617" endtime="20230609 19:02:38.618"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:02:38.618" endtime="20230609 19:02:38.618"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.617" endtime="20230609 19:02:38.619"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" starttime="20230609 19:02:38.619" endtime="20230609 19:02:38.619"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.619" endtime="20230609 19:02:38.620"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:02:38.535" endtime="20230609 19:02:38.620"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" starttime="20230609 19:02:38.621" endtime="20230609 19:02:38.621"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.620" endtime="20230609 19:02:38.621"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<status status="PASS" starttime="20230609 19:02:38.621" endtime="20230609 19:02:38.700"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" starttime="20230609 19:02:38.701" endtime="20230609 19:02:38.701"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.621" endtime="20230609 19:02:38.701"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" starttime="20230609 19:02:38.701" endtime="20230609 19:02:38.702"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:02:38.702" endtime="20230609 19:02:38.703"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.701" endtime="20230609 19:02:38.703"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="PASS" starttime="20230609 19:02:38.703" endtime="20230609 19:02:38.704"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.703" endtime="20230609 19:02:38.704"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:02:38.620" endtime="20230609 19:02:38.704"/>
</test>
<status status="PASS" starttime="20230609 19:02:37.588" endtime="20230609 19:02:38.704"/>
</suite>
<status status="PASS" starttime="20230609 19:02:37.587" endtime="20230609 19:02:38.705"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<status status="FAIL" starttime="20230609 19:02:38.715" endtime="20230609 19:02:38.716"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 19:02:38.716" endtime="20230609 19:02:38.716"/>
</kw>
<status status="FAIL" starttime="20230609 19:02:38.714" endtime="20230609 19:02:38.716"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 19:02:38.717" endtime="20230609 19:02:38.717"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.717" endtime="20230609 19:02:38.717"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 19:02:38.714" endtime="20230609 19:02:38.717">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<status status="FAIL" starttime="20230609 19:02:38.719" endtime="20230609 19:02:38.720"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 19:02:38.720" endtime="20230609 19:02:38.720"/>
</kw>
<status status="FAIL" starttime="20230609 19:02:38.718" endtime="20230609 19:02:38.720"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 19:02:38.720" endtime="20230609 19:02:38.721"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.720" endtime="20230609 19:02:38.721"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 19:02:38.717" endtime="20230609 19:02:38.721">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<status status="FAIL" starttime="20230609 19:02:38.722" endtime="20230609 19:02:38.722"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 19:02:38.723" endtime="20230609 19:02:38.723"/>
</kw>
<status status="FAIL" starttime="20230609 19:02:38.721" endtime="20230609 19:02:38.723"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 19:02:38.723" endtime="20230609 19:02:38.723"/>
</kw>
<status status="PASS" starttime="20230609 19:02:38.723" endtime="20230609 19:02:38.723"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 19:02:38.721" endtime="20230609 19:02:38.723">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<status status="FAIL" starttime="20230609 19:02:38.707" endtime="20230609 19:02:38.724"/>
</suite>
<status status="FAIL" starttime="20230609 19:02:38.706" endtime="20230609 19:02:38.725"/>
</suite>
<status status="FAIL" starttime="20230609 19:02:37.569" endtime="20230609 19:02:38.725"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
