<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230609 17:46:28.027" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:46:28.714" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:46:28.713" endtime="20230609 17:46:28.714"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.713" endtime="20230609 17:46:28.714"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:46:28.856" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 17:46:28.856" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '790149f3-06fc-4641-b338-63966a3af3a3', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'e5f578c3921255b45fe379f8610f8b98;o=1', 'Date': 'Fri, 09 Jun 2023 17:46:28 GMT', 'Server': 'Google Frontend', 'Content-Length': '32177'} 
 body={
    "quantidade": 147,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "ttdq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "02DQkHSzXSqpcIka"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano55@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "0F1dhHbEeX2mrwft"
        },
        {
            "nome": "Drew Gerhold",
            "email": "almamosciski@test.com",
            "password": "9rJt1UcYQcnYJ7S",
            "administrador": "true",
            "_id": "0bnETEAn1Bj6PNeB"
        },
        {
            "nome": "Fulano da Silva",
            "email": "tlji@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0v9qTX5aeOtCF1sZ"
        },
        {
            "nome": "Christie Murazik",
            "email": "Eleazar.Hand25@yahoo.com",
            "password": "RZu8J4l1RolHVA9",
            "administrador": "true",
            "_id": "0zJJLyoiAC4LDuvK"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltr23123213ano@qa.com.br",
            "password": "te21312321321321321321312312",
            "administrador": "true",
            "_id": "19qYwOl1yhTmb9BG"
        },
        {
            "nome": "Tanya Larson",
            "email": "Evelyn.Greenholt-Farrell45@gmail.com",
            "password": "xhsyXupps0dhUhd",
            "administrador": "true",
            "_id": "1roUnulKv3v1koBe"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "todd42@example.com",
            "password": "Abc@123",
            "administrador": "true",
            "_id": "1sgIbfnuiyiNZqrg"
        },
        {
            "nome": "Antonio Funk III",
            "email": "Dan1@hotmail.com",
            "password": "DRpPX1z2ZECGMOi",
            "administrador": "true",
            "_id": "24Gamt7XRlANtwIj"
        },
        {
            "nome": "Alfred Jaskolski",
            "email": "Marquise37@gmail.com",
            "password": "nqaFgugOOBVDLgZ",
            "administrador": "false",
            "_id": "3jE9j1N3PRSGSKXE"
        },
        {
            "nome": "Tyler Oberbrunner",
            "email": "Ralph.Kuhic77@gmail.com",
            "password": "jtnofzT612n3Xwf",
            "administrador": "true",
            "_id": "3qdUSEh1LherGOxK"
        },
        {
            "nome": "Juanita Champlin-Barrows",
            "email": "Kristofer.Koss91@yahoo.com",
            "password": "QTFqy_lAXaVN4Or",
            "administrador": "true",
            "_id": "59WU4Oi0SqCvoAfR"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "sanderson@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "5BGAG7FQWpC8XanE"
        },
        {
            "nome": "Ruty",
            "email": "rutysa@hotmail.com",
            "password": "abc123",
            "administrador": "true",
            "_id": "5NnUe3903HAV4j0X"
        },
        {
            "nome": "Olivia Jast",
            "email": "Tamara84@gmail.com",
            "password": "YHIi4p7y5BotON_",
            "administrador": "false",
            "_id": "5bh5PuewiWA7sbyL"
        },
        {
            "nome": "Dr. Genevieve Abbott",
            "email": "Thelma.Johns99@hotmail.com",
            "password": "STu4AA3MMHDAnvo",
            "administrador": "true",
            "_id": "5l70IkKnpYUhr79n"
        },
        {
            "nome": "Dr. Antonio Collins",
            "email": "Demond91@hotmail.com",
            "password": "NqGDrB7bBw9VIwF",
            "administrador": "true",
            "_id": "6TAOnbRy0UrP9Ove"
        },
        {
            "nome": "teste",
            "email": "teste@hotmail.br",
            "password": "1",
            "administrador": "true",
            "_id": "72dcS17y72QsiCjf"
        },
        {
            "nome": "Antonia Metz",
            "email": "Frederic_Reinger74@hotmail.com",
            "password": "bnmLvoWV21UGlkH",
            "administrador": "true",
            "_id": "7Un0DB88ipdaWPMM"
        },
        {
            "nome": "Brenda Waelchi",
            "email": "Trey_Wiegand81@hotmail.com",
            "password": "nA6gyxKUUqaA26D",
            "administrador": "true",
            "_id": "8CtP2qA9OnaIAnYp"
        },
        {
            "nome": "Jacsonsm",
            "email": "whodge@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "8SvBtCnNTB4cCSCJ"
        },
        {
            "nome": "Joanne Hintz",
            "email": "Ladarius_Champlin@yahoo.com",
            "password": "y190q3go3p0VrZY",
            "administrador": "true",
            "_id": "9LxF0vW4m0Bc7Rtu"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qliw@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "A0XW4CgHSmYnnlUf"
        },
        {
            "nome": "Brandon Jakubowski",
            "email": "Maritza45@hotmail.com",
            "password": "yKsneR_sw2NT8Un",
            "administrador": "true",
            "_id": "ASGTkKRr0F1f7ATG"
        },
        {
            "nome": "Margie Koch-Stehr",
            "email": "Brennon_Littel81@hotmail.com",
            "password": "fQl5qQkd6xHbYVo",
            "administrador": "false",
            "_id": "AZzE7UeEwSBdI11l"
        },
        {
            "nome": "Leslie Ondricka I",
            "email": "Jackie83@yahoo.com",
            "password": "4nyqqgA0c8nDc6A",
            "administrador": "true",
            "_id": "Ak1Wh4evPpp7z2bN"
        },
        {
            "nome": "Teste Eduardo edite",
            "email": "testeeduardo222@qa.com",
            "password": "12345789",
            "administrador": "true",
            "_id": "Axldi78KNMfO1ShP"
        },
        {
            "nome": "Christina Beer IV",
            "email": "Jacinthe1@hotmail.com",
            "password": "rY3BqzIHSdUQS5Z",
            "administrador": "true",
            "_id": "ByIp6wYmfcU36L3Z"
        },
        {
            "nome": "Kimberly Reinger",
            "email": "Maritza50@yahoo.com",
            "password": "XTsbHkKBFM45RIO",
            "administrador": "true",
            "_id": "CY9EWrxoytmjxUDJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "xgnp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "Cbr6oAFoAWyLzhhX"
        },
        {
            "nome": "Raphael Luiz",
            "email": "raphaluiz@qa.com.br",
            "password": "teste3212",
            "administrador": "true",
            "_id": "DNSyGQbQW0jxCR0R"
        },
        {
            "nome": "Evan Schmitt",
            "email": "Florida_Beier-Mitchell@hotmail.com",
            "password": "Bu0y6HVKVrADVdp",
            "administrador": "true",
            "_id": "Dc4eLDemlemniGXq"
        },
        {
            "nome": "Cris",
            "email": "testeqa@teste.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "E0oPC5p9YIuYLekG"
        },
        {
            "nome": "oooo",
            "email": "0@email.com",
            "password": "000",
            "administrador": "true",
            "_id": "EYmjNQ4OIhVVksEl"
        },
        {
            "nome": "Ms. Tonya Shields",
            "email": "Brionna_Reilly22@yahoo.com",
            "password": "Pwk9g00GyMuU0AB",
            "administrador": "true",
            "_id": "Effb9VyPoEfW9Vxe"
        },
        {
            "nome": "Candace Swaniawski",
            "email": "Durward_Brown@hotmail.com",
            "password": "BCcvoP3EtLi8PQW",
            "administrador": "false",
            "_id": "FQD5HyjaIVhaqLTV"
        },
        {
            "nome": "Rolando Heaney",
            "email": "Keaton_Stamm@hotmail.com",
            "password": "Zke9Wn9MtK1pMAS",
            "administrador": "true",
            "_id": "G0nIzUm3mwIfVdyd"
        },
        {
            "nome": "Stacy Doyle-Carter",
            "email": "Sister.Lakin@gmail.com",
            "password": "vB7YiZKErLE77Rh",
            "administrador": "true",
            "_id": "G3BkpG0GRlLYsN3U"
        },
        {
            "nome": "Raphael Luiz",
            "email": "raphaelluiz@qa.com.br",
            "password": "teste321",
            "administrador": "true",
            "_id": "G9cQybqUUiascXGV"
        },
        {
            "nome": "Amaury Sobrinho",
            "email": "teste@mail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "GL9Cz8IIGWYN8Som"
        },
        {
            "nome": "Fulano da Silva",
            "email": "dyab@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "GfuviAxGK4rqVHJQ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "rgtt@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "GivTkjDh5ni3okMn"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "te",
            "administrador": "true",
            "_id": "H04AjjsSELnIGN3a"
        },
        {
            "nome": "Shane Friesen",
            "email": "Florine65@yahoo.com",
            "password": "zIFtHfaHF5hklI3",
            "administrador": "true",
            "_id": "HWTMglu4nN2MuzLw"
        },
        {
            "nome": "Lila O'Conner",
            "email": "Adolphus88@gmail.com",
            "password": "lYGEFI3cDlUUQW3",
            "administrador": "true",
            "_id": "IL1xjTsjU8PsnGRA"
        },
        {
            "nome": "Josefina Luettgen",
            "e... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230609 17:46:28.856" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.715" endtime="20230609 17:46:28.856"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:46:28.857" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.856" endtime="20230609 17:46:28.857"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.714" endtime="20230609 17:46:28.857"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:46:28.858" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.858" endtime="20230609 17:46:28.858"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:46:28.859" endtime="20230609 17:46:28.860"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.857" endtime="20230609 17:46:28.860"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:46:28.861" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 17:46:28.860" endtime="20230609 17:46:28.861"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.860" endtime="20230609 17:46:28.861"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:46:28.712" endtime="20230609 17:46:28.861"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:46:28.863" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:46:28.862" endtime="20230609 17:46:28.863"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.862" endtime="20230609 17:46:28.863"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230609 17:46:28.864" level="INFO">${name} = Eric Bailey</msg>
<status status="PASS" starttime="20230609 17:46:28.863" endtime="20230609 17:46:28.864"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230609 17:46:28.864" level="INFO">${email} = elizabethferguson@example.com</msg>
<status status="PASS" starttime="20230609 17:46:28.864" endtime="20230609 17:46:28.864"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230609 17:46:28.865" level="INFO">${password} = FG3chIEo6Exn</msg>
<status status="PASS" starttime="20230609 17:46:28.865" endtime="20230609 17:46:28.865"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 17:46:28.865" level="INFO">${name} = Eric Bailey</msg>
<status status="PASS" starttime="20230609 17:46:28.865" endtime="20230609 17:46:28.865"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 17:46:28.866" level="INFO">${email} = elizabethferguson@example.com</msg>
<status status="PASS" starttime="20230609 17:46:28.865" endtime="20230609 17:46:28.866"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 17:46:28.866" level="INFO">${password} = FG3chIEo6Exn</msg>
<status status="PASS" starttime="20230609 17:46:28.866" endtime="20230609 17:46:28.866"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.863" endtime="20230609 17:46:28.866"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:46:28.867" level="INFO">${payload} = {'nome': 'Eric Bailey', 'email': 'elizabethferguson@example.com', 'password': 'FG3chIEo6Exn', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 17:46:28.867" endtime="20230609 17:46:28.867"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:46:28.867" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 17:46:28.867" endtime="20230609 17:46:28.867"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:46:28.936" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '119'} 
 body=b'{"nome": "Eric Bailey", "email": "elizabethferguson@example.com", "password": "FG3chIEo6Exn", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 17:46:28.936" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'c933ef09-f3f8-48c6-aeee-5de0a297e45b', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '2dc6259616017045815ab9489b499f1c', 'Date': 'Fri, 09 Jun 2023 17:46:28 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "bK2iEQzMXCB37y4s"
} 
 </msg>
<msg timestamp="20230609 17:46:28.936" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.868" endtime="20230609 17:46:28.936"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230609 17:46:28.937" level="INFO">${user_id} = bK2iEQzMXCB37y4s</msg>
<status status="PASS" starttime="20230609 17:46:28.936" endtime="20230609 17:46:28.937"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230609 17:46:28.938" level="INFO">${USER_ID} = bK2iEQzMXCB37y4s</msg>
<status status="PASS" starttime="20230609 17:46:28.937" endtime="20230609 17:46:28.938"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:46:28.938" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.938" endtime="20230609 17:46:28.938"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.866" endtime="20230609 17:46:28.938"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:46:28.939" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.939" endtime="20230609 17:46:28.939"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:46:28.940" endtime="20230609 17:46:28.940"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.938" endtime="20230609 17:46:28.940"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:46:28.941" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 17:46:28.941" endtime="20230609 17:46:28.942"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.940" endtime="20230609 17:46:28.942"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:46:28.862" endtime="20230609 17:46:28.942"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:46:28.943" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:46:28.943" endtime="20230609 17:46:28.944"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.943" endtime="20230609 17:46:28.944"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:46:29.016" level="INFO">GET Request : url=https://serverest.dev/usuarios/bK2iEQzMXCB37y4s 
 path_url=/usuarios/bK2iEQzMXCB37y4s 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 17:46:29.017" level="INFO">GET Response : url=https://serverest.dev/usuarios/bK2iEQzMXCB37y4s 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '35b65643-17ae-4551-a838-0146414d2d3d', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '2f96f8c7af4902de38fad1b64acaa865', 'Date': 'Fri, 09 Jun 2023 17:46:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '168'} 
 body={
    "nome": "Eric Bailey",
    "email": "elizabethferguson@example.com",
    "password": "FG3chIEo6Exn",
    "administrador": "false",
    "_id": "bK2iEQzMXCB37y4s"
} 
 </msg>
<msg timestamp="20230609 17:46:29.017" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:28.944" endtime="20230609 17:46:29.017"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:46:29.017" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.017" endtime="20230609 17:46:29.017"/>
</kw>
<status status="PASS" starttime="20230609 17:46:28.944" endtime="20230609 17:46:29.018"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:46:29.019" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.018" endtime="20230609 17:46:29.019"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:46:29.019" endtime="20230609 17:46:29.020"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.018" endtime="20230609 17:46:29.020"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:46:29.021" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230609 17:46:29.020" endtime="20230609 17:46:29.021"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.020" endtime="20230609 17:46:29.021"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:46:28.942" endtime="20230609 17:46:29.021"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:46:29.023" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:46:29.023" endtime="20230609 17:46:29.023"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.022" endtime="20230609 17:46:29.023"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:46:29.024" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 17:46:29.024" endtime="20230609 17:46:29.024"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 17:46:29.025" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 17:46:29.024" endtime="20230609 17:46:29.025"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:46:29.092" level="INFO">PUT Request : url=https://serverest.dev/usuarios/bK2iEQzMXCB37y4s 
 path_url=/usuarios/bK2iEQzMXCB37y4s 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 17:46:29.092" level="INFO">PUT Response : url=https://serverest.dev/usuarios/bK2iEQzMXCB37y4s 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'cb075f02-4484-4284-a9db-ecd8e1727a43', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '99083a737f20fecf1ef5309aa203750c', 'Date': 'Fri, 09 Jun 2023 17:46:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230609 17:46:29.093" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.025" endtime="20230609 17:46:29.093"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:46:29.093" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.093" endtime="20230609 17:46:29.093"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.023" endtime="20230609 17:46:29.093"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:46:29.095" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.094" endtime="20230609 17:46:29.095"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:46:29.095" endtime="20230609 17:46:29.096"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.094" endtime="20230609 17:46:29.096"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:46:29.097" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 17:46:29.096" endtime="20230609 17:46:29.097"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.096" endtime="20230609 17:46:29.097"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:46:29.022" endtime="20230609 17:46:29.097"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 17:46:29.099" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 17:46:29.098" endtime="20230609 17:46:29.099"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.098" endtime="20230609 17:46:29.099"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 17:46:29.165" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/bK2iEQzMXCB37y4s 
 path_url=/usuarios/bK2iEQzMXCB37y4s 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230609 17:46:29.165" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/bK2iEQzMXCB37y4s 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '5046adcf-ced7-41a8-8568-e1ec3e1b6b8f', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '5df425166d756f3df2747fffd6a81dad', 'Date': 'Fri, 09 Jun 2023 17:46:29 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230609 17:46:29.165" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.099" endtime="20230609 17:46:29.165"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 17:46:29.166" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.166" endtime="20230609 17:46:29.166"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.099" endtime="20230609 17:46:29.166"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 17:46:29.168" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 17:46:29.167" endtime="20230609 17:46:29.168"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 17:46:29.168" endtime="20230609 17:46:29.168"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.166" endtime="20230609 17:46:29.169"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 17:46:29.170" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 17:46:29.169" endtime="20230609 17:46:29.170"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.169" endtime="20230609 17:46:29.170"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 17:46:29.097" endtime="20230609 17:46:29.170"/>
</test>
<status status="PASS" starttime="20230609 17:46:28.048" endtime="20230609 17:46:29.170"/>
</suite>
<status status="PASS" starttime="20230609 17:46:28.047" endtime="20230609 17:46:29.172"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 17:46:29.183" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 17:46:29.183" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 17:46:29.183" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 17:46:29.182" endtime="20230609 17:46:29.184"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 17:46:29.184" endtime="20230609 17:46:29.184"/>
</kw>
<status status="FAIL" starttime="20230609 17:46:29.182" endtime="20230609 17:46:29.184"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 17:46:29.184" endtime="20230609 17:46:29.185"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.184" endtime="20230609 17:46:29.185"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 17:46:29.181" endtime="20230609 17:46:29.185">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 17:46:29.187" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 17:46:29.187" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 17:46:29.187" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 17:46:29.187" endtime="20230609 17:46:29.188"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 17:46:29.188" endtime="20230609 17:46:29.188"/>
</kw>
<status status="FAIL" starttime="20230609 17:46:29.186" endtime="20230609 17:46:29.188"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 17:46:29.188" endtime="20230609 17:46:29.189"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.188" endtime="20230609 17:46:29.189"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 17:46:29.185" endtime="20230609 17:46:29.189">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 17:46:29.190" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 17:46:29.190" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 17:46:29.190" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 17:46:29.190" endtime="20230609 17:46:29.191"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 17:46:29.191" endtime="20230609 17:46:29.191"/>
</kw>
<status status="FAIL" starttime="20230609 17:46:29.189" endtime="20230609 17:46:29.191"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 17:46:29.191" endtime="20230609 17:46:29.192"/>
</kw>
<status status="PASS" starttime="20230609 17:46:29.191" endtime="20230609 17:46:29.192"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 17:46:29.189" endtime="20230609 17:46:29.192">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<status status="FAIL" starttime="20230609 17:46:29.174" endtime="20230609 17:46:29.192"/>
</suite>
<status status="FAIL" starttime="20230609 17:46:29.172" endtime="20230609 17:46:29.193"/>
</suite>
<status status="FAIL" starttime="20230609 17:46:28.027" endtime="20230609 17:46:29.194"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
