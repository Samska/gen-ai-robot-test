<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230601 15:57:39.124" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:57:39.574" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:57:39.574" endtime="20230601 15:57:39.574"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.573" endtime="20230601 15:57:39.574"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:57:39.712" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230601 15:57:39.713" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '42dbd9ce-e33b-4435-9f76-e7292d288aeb', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '9e273fea393c0687a6115d51cad12b43;o=1', 'Date': 'Thu, 01 Jun 2023 15:57:39 GMT', 'Server': 'Google Frontend', 'Content-Length': '6133'} 
 body={
    "quantidade": 28,
    "usuarios": [
        {
            "nome": "Keith White",
            "email": "keithwhite@test.com",
            "password": "Test;123",
            "administrador": "true",
            "_id": "3VkyFCZjaX55brOB"
        },
        {
            "nome": "Riley Meadows",
            "email": "wardlindsay@example.com",
            "password": "21nem33sV3Wv",
            "administrador": "true",
            "_id": "6ZrbiguZb3H8xbz7"
        },
        {
            "nome": "Teste de Exclusão",
            "email": "exlusao@qa123.com.br",
            "password": "teste123",
            "administrador": "true",
            "_id": "96IkPoiwTd6W8E6G"
        },
        {
            "nome": "Jose Souza da Silva",
            "email": "testetwt0113@google.com.br",
            "password": "12345",
            "administrador": "true",
            "_id": "ANUh6vcjepjot9m4"
        },
        {
            "nome": "Teste no RobotFramework1234",
            "email": "juarez4543210@hotmail.com",
            "password": "testenovo1234",
            "administrador": "true",
            "_id": "DJQllXTesdJUv25t"
        },
        {
            "nome": "Abigail Pearson",
            "email": "leelori@example.com",
            "password": "4gZoJFVoISqd",
            "administrador": "true",
            "_id": "P11p6mS9e6j3lRWe"
        },
        {
            "nome": "{{nome}}",
            "email": "Cruz@qa.com.br",
            "password": "SCHV6xXB1_PATmh",
            "administrador": "true",
            "_id": "QEculbd1dJsuv18G"
        },
        {
            "nome": "Teste de Exclusão",
            "email": "exlusao@qa.com.br",
            "password": "teste123",
            "administrador": "true",
            "_id": "RsFp1ZZGSqG68iGD"
        },
        {
            "nome": "Troy Moran",
            "email": "jonesdavid@example.org",
            "password": "fwHMTsFS3mgk",
            "administrador": "true",
            "_id": "U4gcbj9QPFePTMvA"
        },
        {
            "nome": "Donald Palmer",
            "email": "kshannon@example.net",
            "password": "MN61aKMyY2Zp",
            "administrador": "true",
            "_id": "WJLRKci7u4ThQVZi"
        },
        {
            "nome": "Bridget Satterfield",
            "email": "bridgetsatterfield@test.com",
            "password": "Test;123",
            "administrador": "true",
            "_id": "WaoQ0bq06WgCyzh1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ernx@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "WtAPGAoNV80jZwAT"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "eQc31OFVrLb6TURi"
        },
        {
            "nome": "{{nome}}",
            "email": "Jodie@qa.com.br",
            "password": "3onkUz5ipDWE6lF",
            "administrador": "true",
            "_id": "eebiRBQzxAfjwBud"
        },
        {
            "nome": "{{nome}}",
            "email": "Wade@qa.com.br",
            "password": "75sp8gpG4_cwEJL",
            "administrador": "true",
            "_id": "eiYlTXHzMuezZ3JP"
        },
        {
            "nome": "{{nome}}",
            "email": "Laurianne@qa.com.br",
            "password": "BehI7ZauXa4BWJG",
            "administrador": "true",
            "_id": "fxPPNR85wYe2RWUx"
        },
        {
            "nome": "{{nome}}",
            "email": "Hadley@qa.com.br",
            "password": "cTFFNtgOYHKCveO",
            "administrador": "true",
            "_id": "gP4GN1H0ztPPVm4T"
        },
        {
            "nome": "Jason Rodriguez",
            "email": "tracivang@example.com",
            "password": "tFOdqK1b4bdb",
            "administrador": "true",
            "_id": "hOHsnxKpiWHMWThP"
        },
        {
            "nome": "Stephen Price",
            "email": "schaeferdylan@example.com",
            "password": "8O6ksSdDZp24",
            "administrador": "true",
            "_id": "hgBx9ALEJofc7VxJ"
        },
        {
            "nome": "Ola Kilback",
            "email": "Bernadine_Feeney@hotmail.com",
            "password": "2RdPzziLESCIj3C",
            "administrador": "false",
            "_id": "jxTheZsEleTA4Xfv"
        },
        {
            "nome": "anderson",
            "email": "anderson@qa.com.br",
            "password": "123",
            "administrador": "false",
            "_id": "lW623yJDD7ZwfEO0"
        },
        {
            "nome": "Cheyenne Knox",
            "email": "connierodriguez@example.org",
            "password": "2XpL75uHis1Y",
            "administrador": "true",
            "_id": "nQr8zF2KskcB67UX"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano_teste@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "r4MkfwAxanGM2wV0"
        },
        {
            "nome": "Marcelle_Grant92",
            "email": "Adrien_Rowe89@gmail.com",
            "password": "123456789",
            "administrador": "true",
            "_id": "sU9Mo6xgAmg5VBph"
        },
        {
            "nome": "Eric Adkins",
            "email": "qmcclure@example.org",
            "password": "1JkxKESr0UqK",
            "administrador": "true",
            "_id": "srS7Ou0Du5FNhP2x"
        },
        {
            "nome": "Troy Ray",
            "email": "debbie39@example.net",
            "password": "di5JjZtW5C2X",
            "administrador": "true",
            "_id": "w6qnBS2wGoSELmzN"
        },
        {
            "nome": "Wendell White",
            "email": "wendellwhite@test.com",
            "password": "Test;123",
            "administrador": "true",
            "_id": "wbGsZa5vMrOWAm7a"
        },
        {
            "nome": "julia",
            "email": "contatojuliasena2@gmail.com",
            "password": "07101995",
            "administrador": "false",
            "_id": "x5hhnzNB64soj1IS"
        }
    ]
} 
 </msg>
<msg timestamp="20230601 15:57:39.713" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.575" endtime="20230601 15:57:39.713"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:57:39.713" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.713" endtime="20230601 15:57:39.713"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.575" endtime="20230601 15:57:39.713"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:57:39.714" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.714" endtime="20230601 15:57:39.715"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:57:39.715" endtime="20230601 15:57:39.715"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.714" endtime="20230601 15:57:39.715"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:57:39.716" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230601 15:57:39.716" endtime="20230601 15:57:39.716"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.716" endtime="20230601 15:57:39.717"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:57:39.573" endtime="20230601 15:57:39.717"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:57:39.718" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:57:39.718" endtime="20230601 15:57:39.718"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.717" endtime="20230601 15:57:39.718"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230601 15:57:39.719" level="INFO">${name} = Elizabeth Barnett</msg>
<status status="PASS" starttime="20230601 15:57:39.719" endtime="20230601 15:57:39.719"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230601 15:57:39.719" level="INFO">${email} = liwilliam@example.com</msg>
<status status="PASS" starttime="20230601 15:57:39.719" endtime="20230601 15:57:39.720"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230601 15:57:39.720" level="INFO">${password} = 2Yo7aHwpojnm</msg>
<status status="PASS" starttime="20230601 15:57:39.720" endtime="20230601 15:57:39.720"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:57:39.720" level="INFO">${name} = Elizabeth Barnett</msg>
<status status="PASS" starttime="20230601 15:57:39.720" endtime="20230601 15:57:39.720"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:57:39.721" level="INFO">${email} = liwilliam@example.com</msg>
<status status="PASS" starttime="20230601 15:57:39.720" endtime="20230601 15:57:39.721"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:57:39.721" level="INFO">${password} = 2Yo7aHwpojnm</msg>
<status status="PASS" starttime="20230601 15:57:39.721" endtime="20230601 15:57:39.721"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.718" endtime="20230601 15:57:39.721"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:57:39.722" level="INFO">${payload} = {'nome': 'Elizabeth Barnett', 'email': 'liwilliam@example.com', 'password': '2Yo7aHwpojnm', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230601 15:57:39.721" endtime="20230601 15:57:39.722"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:57:39.722" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230601 15:57:39.722" endtime="20230601 15:57:39.722"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:57:39.805" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '117'} 
 body=b'{"nome": "Elizabeth Barnett", "email": "liwilliam@example.com", "password": "2Yo7aHwpojnm", "administrador": "false"}' 
 </msg>
<msg timestamp="20230601 15:57:39.805" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '2d224e09-117a-4156-aee3-a28665494c7e', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '226bb296c83c84a90bec23b4f7456f58', 'Date': 'Thu, 01 Jun 2023 15:57:39 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "UMiBGBUyyl0ULcFK"
} 
 </msg>
<msg timestamp="20230601 15:57:39.805" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.722" endtime="20230601 15:57:39.805"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 15:57:39.806" level="INFO">${user_id} = UMiBGBUyyl0ULcFK</msg>
<status status="PASS" starttime="20230601 15:57:39.805" endtime="20230601 15:57:39.806"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230601 15:57:39.806" level="INFO">${USER_ID} = UMiBGBUyyl0ULcFK</msg>
<status status="PASS" starttime="20230601 15:57:39.806" endtime="20230601 15:57:39.806"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:57:39.807" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.806" endtime="20230601 15:57:39.807"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.721" endtime="20230601 15:57:39.807"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:57:39.808" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.807" endtime="20230601 15:57:39.808"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:57:39.808" endtime="20230601 15:57:39.808"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.807" endtime="20230601 15:57:39.808"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:57:39.809" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230601 15:57:39.809" endtime="20230601 15:57:39.809"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.809" endtime="20230601 15:57:39.809"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:57:39.717" endtime="20230601 15:57:39.810"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:57:39.811" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:57:39.811" endtime="20230601 15:57:39.811"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.810" endtime="20230601 15:57:39.811"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:57:39.888" level="INFO">GET Request : url=https://serverest.dev/usuarios/UMiBGBUyyl0ULcFK 
 path_url=/usuarios/UMiBGBUyyl0ULcFK 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230601 15:57:39.888" level="INFO">GET Response : url=https://serverest.dev/usuarios/UMiBGBUyyl0ULcFK 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '090b3707-561a-412f-98df-066655b5396d', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'b711c3d8427befcbf7a5899dc1127e6b', 'Date': 'Thu, 01 Jun 2023 15:57:39 GMT', 'Server': 'Google Frontend', 'Content-Length': '166'} 
 body={
    "nome": "Elizabeth Barnett",
    "email": "liwilliam@example.com",
    "password": "2Yo7aHwpojnm",
    "administrador": "false",
    "_id": "UMiBGBUyyl0ULcFK"
} 
 </msg>
<msg timestamp="20230601 15:57:39.888" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.812" endtime="20230601 15:57:39.888"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:57:39.889" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.889" endtime="20230601 15:57:39.889"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.811" endtime="20230601 15:57:39.889"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:57:39.890" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.889" endtime="20230601 15:57:39.890"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:57:39.890" endtime="20230601 15:57:39.891"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.889" endtime="20230601 15:57:39.891"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:57:39.892" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230601 15:57:39.891" endtime="20230601 15:57:39.892"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.891" endtime="20230601 15:57:39.892"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:57:39.810" endtime="20230601 15:57:39.892"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:57:39.893" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:57:39.893" endtime="20230601 15:57:39.893"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.892" endtime="20230601 15:57:39.893"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:57:39.894" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230601 15:57:39.894" endtime="20230601 15:57:39.894"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:57:39.894" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230601 15:57:39.894" endtime="20230601 15:57:39.894"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:57:39.978" level="INFO">PUT Request : url=https://serverest.dev/usuarios/UMiBGBUyyl0ULcFK 
 path_url=/usuarios/UMiBGBUyyl0ULcFK 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230601 15:57:39.978" level="INFO">PUT Response : url=https://serverest.dev/usuarios/UMiBGBUyyl0ULcFK 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'e9b1cda0-63bf-4132-84f1-d9d7d8eb6f29', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '6d7ca412811fa3d97f1d405a16d2b42c', 'Date': 'Thu, 01 Jun 2023 15:57:39 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230601 15:57:39.979" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.894" endtime="20230601 15:57:39.979"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:57:39.979" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.979" endtime="20230601 15:57:39.979"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.893" endtime="20230601 15:57:39.979"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:57:39.980" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.979" endtime="20230601 15:57:39.980"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:57:39.980" endtime="20230601 15:57:39.981"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.979" endtime="20230601 15:57:39.981"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:57:39.982" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230601 15:57:39.981" endtime="20230601 15:57:39.982"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.981" endtime="20230601 15:57:39.982"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:57:39.892" endtime="20230601 15:57:39.982"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:57:39.983" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:57:39.983" endtime="20230601 15:57:39.984"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.983" endtime="20230601 15:57:39.984"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:57:40.064" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/UMiBGBUyyl0ULcFK 
 path_url=/usuarios/UMiBGBUyyl0ULcFK 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230601 15:57:40.064" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/UMiBGBUyyl0ULcFK 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'd9d32583-0d1a-4da2-be5f-6f67285b8d10', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'e8ce2b20ca5bd55ddf462f81bb587cbf', 'Date': 'Thu, 01 Jun 2023 15:57:40 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230601 15:57:40.064" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:39.984" endtime="20230601 15:57:40.064"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:57:40.065" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:57:40.065" endtime="20230601 15:57:40.065"/>
</kw>
<status status="PASS" starttime="20230601 15:57:39.984" endtime="20230601 15:57:40.065"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:57:40.066" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:57:40.065" endtime="20230601 15:57:40.066"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:57:40.066" endtime="20230601 15:57:40.067"/>
</kw>
<status status="PASS" starttime="20230601 15:57:40.065" endtime="20230601 15:57:40.067"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:57:40.068" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230601 15:57:40.067" endtime="20230601 15:57:40.068"/>
</kw>
<status status="PASS" starttime="20230601 15:57:40.067" endtime="20230601 15:57:40.068"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:57:39.982" endtime="20230601 15:57:40.068"/>
</test>
<status status="PASS" starttime="20230601 15:57:39.144" endtime="20230601 15:57:40.068"/>
</suite>
<status status="PASS" starttime="20230601 15:57:39.142" endtime="20230601 15:57:40.070"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230601 15:57:40.079" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<status status="PASS" starttime="20230601 15:57:40.079" endtime="20230601 15:57:42.627"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20230601 15:57:42.627" endtime="20230601 15:57:42.731"/>
</kw>
<status status="PASS" starttime="20230601 15:57:40.078" endtime="20230601 15:57:42.731"/>
</kw>
<kw name="Given Im on the signup page" library="test_keywords_signup">
<kw name="Location Should Be" library="SeleniumLibrary">
<arg>https://front.serverest.dev/login</arg>
<doc>Verifies that the current URL is exactly ``url``.</doc>
<msg timestamp="20230601 15:57:42.736" level="INFO">Current location is 'https://front.serverest.dev/login'.</msg>
<status status="PASS" starttime="20230601 15:57:42.732" endtime="20230601 15:57:42.736"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>css=a.btn.btn-link</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:42.737" level="INFO">Clicking element 'css=a.btn.btn-link'.</msg>
<status status="PASS" starttime="20230601 15:57:42.737" endtime="20230601 15:57:42.795"/>
</kw>
<status status="PASS" starttime="20230601 15:57:42.732" endtime="20230601 15:57:42.795"/>
</kw>
<kw name="When I click in signup" library="test_keywords_signup">
<kw name="Click Button" library="SeleniumLibrary">
<arg>css=.btn.btn-primary</arg>
<doc>Clicks the button identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:42.796" level="INFO">Clicking button 'css=.btn.btn-primary'.</msg>
<status status="PASS" starttime="20230601 15:57:42.796" endtime="20230601 15:57:42.856"/>
</kw>
<status status="PASS" starttime="20230601 15:57:42.796" endtime="20230601 15:57:42.857"/>
</kw>
<kw name="Then required field messages should be displayed" library="test_keywords_signup">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>css=.alert-dismissible</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20230601 15:57:42.857" endtime="20230601 15:57:43.089"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>css=.alert-dismissible</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20230601 15:57:43.106" level="INFO">Element 'css=.alert-dismissible' is displayed.</msg>
<status status="PASS" starttime="20230601 15:57:43.089" endtime="20230601 15:57:43.106"/>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<arg>Nome é obrigatório</arg>
<doc>Verifies that current page contains ``text``.</doc>
<msg timestamp="20230601 15:57:43.120" level="INFO">Current page contains text 'Nome é obrigatório'.</msg>
<status status="PASS" starttime="20230601 15:57:43.107" endtime="20230601 15:57:43.120"/>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<arg>Email é obrigatório</arg>
<doc>Verifies that current page contains ``text``.</doc>
<msg timestamp="20230601 15:57:43.132" level="INFO">Current page contains text 'Email é obrigatório'.</msg>
<status status="PASS" starttime="20230601 15:57:43.120" endtime="20230601 15:57:43.132"/>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<arg>Password é obrigatório</arg>
<doc>Verifies that current page contains ``text``.</doc>
<msg timestamp="20230601 15:57:43.144" level="INFO">Current page contains text 'Password é obrigatório'.</msg>
<status status="PASS" starttime="20230601 15:57:43.132" endtime="20230601 15:57:43.144"/>
</kw>
<status status="PASS" starttime="20230601 15:57:42.857" endtime="20230601 15:57:43.144"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230601 15:57:43.144" endtime="20230601 15:57:43.199"/>
</kw>
<status status="PASS" starttime="20230601 15:57:43.144" endtime="20230601 15:57:43.199"/>
</kw>
<tag>e2e</tag>
<status status="PASS" starttime="20230601 15:57:40.078" endtime="20230601 15:57:43.199"/>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230601 15:57:43.201" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<status status="PASS" starttime="20230601 15:57:43.201" endtime="20230601 15:57:44.513"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20230601 15:57:44.513" endtime="20230601 15:57:44.616"/>
</kw>
<status status="PASS" starttime="20230601 15:57:43.200" endtime="20230601 15:57:44.617"/>
</kw>
<kw name="Given Im on the signup page" library="test_keywords_signup">
<kw name="Location Should Be" library="SeleniumLibrary">
<arg>https://front.serverest.dev/login</arg>
<doc>Verifies that the current URL is exactly ``url``.</doc>
<msg timestamp="20230601 15:57:44.622" level="INFO">Current location is 'https://front.serverest.dev/login'.</msg>
<status status="PASS" starttime="20230601 15:57:44.617" endtime="20230601 15:57:44.622"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>css=a.btn.btn-link</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:44.623" level="INFO">Clicking element 'css=a.btn.btn-link'.</msg>
<status status="PASS" starttime="20230601 15:57:44.622" endtime="20230601 15:57:44.676"/>
</kw>
<status status="PASS" starttime="20230601 15:57:44.617" endtime="20230601 15:57:44.676"/>
</kw>
<kw name="And I fill in the signup fields with valid data" library="test_keywords_signup">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230601 15:57:44.677" level="INFO">${name} = Mercedes Gardner</msg>
<status status="PASS" starttime="20230601 15:57:44.676" endtime="20230601 15:57:44.677"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230601 15:57:44.677" level="INFO">${email} = rkoch@example.com</msg>
<status status="PASS" starttime="20230601 15:57:44.677" endtime="20230601 15:57:44.677"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230601 15:57:44.678" level="INFO">${password} = OyTwLmx2r7d6</msg>
<status status="PASS" starttime="20230601 15:57:44.678" endtime="20230601 15:57:44.678"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:nome</arg>
<arg>${name}</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:44.679" level="INFO">Typing text 'Mercedes Gardner' into text field 'id:nome'.</msg>
<status status="PASS" starttime="20230601 15:57:44.678" endtime="20230601 15:57:44.795"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:email</arg>
<arg>${email}</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:44.796" level="INFO">Typing text 'rkoch@example.com' into text field 'id:email'.</msg>
<status status="PASS" starttime="20230601 15:57:44.796" endtime="20230601 15:57:44.891"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:password</arg>
<arg>${password}</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:44.892" level="INFO">Typing text 'OyTwLmx2r7d6' into text field 'id:password'.</msg>
<status status="PASS" starttime="20230601 15:57:44.892" endtime="20230601 15:57:44.978"/>
</kw>
<kw name="Select Checkbox" library="SeleniumLibrary">
<arg>id=administrador</arg>
<doc>Selects the checkbox identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:44.979" level="INFO">Selecting checkbox 'id=administrador'.</msg>
<status status="PASS" starttime="20230601 15:57:44.978" endtime="20230601 15:57:45.048"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:57:45.048" level="INFO">${name} = Mercedes Gardner</msg>
<status status="PASS" starttime="20230601 15:57:45.048" endtime="20230601 15:57:45.048"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:57:45.049" level="INFO">${email} = rkoch@example.com</msg>
<status status="PASS" starttime="20230601 15:57:45.049" endtime="20230601 15:57:45.049"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:57:45.049" level="INFO">${password} = OyTwLmx2r7d6</msg>
<status status="PASS" starttime="20230601 15:57:45.049" endtime="20230601 15:57:45.049"/>
</kw>
<status status="PASS" starttime="20230601 15:57:44.676" endtime="20230601 15:57:45.049"/>
</kw>
<kw name="When I click in signup" library="test_keywords_signup">
<kw name="Click Button" library="SeleniumLibrary">
<arg>css=.btn.btn-primary</arg>
<doc>Clicks the button identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:45.050" level="INFO">Clicking button 'css=.btn.btn-primary'.</msg>
<status status="PASS" starttime="20230601 15:57:45.050" endtime="20230601 15:57:45.104"/>
</kw>
<status status="PASS" starttime="20230601 15:57:45.049" endtime="20230601 15:57:45.105"/>
</kw>
<kw name="Then the page should contain the text &quot;Cadastro realizado com sucesso&quot;" library="test_keywords_signup" sourcename="Then the page should contain the text &quot;${expected_text}&quot;">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>css=.alert-dismissible</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20230601 15:57:45.105" endtime="20230601 15:57:45.335"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>css=.alert-dismissible</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20230601 15:57:45.352" level="INFO">Element 'css=.alert-dismissible' is displayed.</msg>
<status status="PASS" starttime="20230601 15:57:45.336" endtime="20230601 15:57:45.353"/>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<arg>${expected_text}</arg>
<doc>Verifies that current page contains ``text``.</doc>
<msg timestamp="20230601 15:57:45.365" level="INFO">Current page contains text 'Cadastro realizado com sucesso'.</msg>
<status status="PASS" starttime="20230601 15:57:45.353" endtime="20230601 15:57:45.365"/>
</kw>
<status status="PASS" starttime="20230601 15:57:45.105" endtime="20230601 15:57:45.365"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230601 15:57:45.365" endtime="20230601 15:57:45.420"/>
</kw>
<status status="PASS" starttime="20230601 15:57:45.365" endtime="20230601 15:57:45.420"/>
</kw>
<tag>e2e</tag>
<status status="PASS" starttime="20230601 15:57:43.200" endtime="20230601 15:57:45.420"/>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230601 15:57:45.422" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<status status="PASS" starttime="20230601 15:57:45.422" endtime="20230601 15:57:46.737"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20230601 15:57:46.737" endtime="20230601 15:57:46.840"/>
</kw>
<status status="PASS" starttime="20230601 15:57:45.421" endtime="20230601 15:57:46.841"/>
</kw>
<kw name="Given Im on the signup page" library="test_keywords_signup">
<kw name="Location Should Be" library="SeleniumLibrary">
<arg>https://front.serverest.dev/login</arg>
<doc>Verifies that the current URL is exactly ``url``.</doc>
<msg timestamp="20230601 15:57:46.846" level="INFO">Current location is 'https://front.serverest.dev/login'.</msg>
<status status="PASS" starttime="20230601 15:57:46.841" endtime="20230601 15:57:46.846"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>css=a.btn.btn-link</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:46.847" level="INFO">Clicking element 'css=a.btn.btn-link'.</msg>
<status status="PASS" starttime="20230601 15:57:46.846" endtime="20230601 15:57:46.898"/>
</kw>
<status status="PASS" starttime="20230601 15:57:46.841" endtime="20230601 15:57:46.899"/>
</kw>
<kw name="And I fill in the signup fields with an email already registered" library="test_keywords_signup">
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:nome</arg>
<arg>${name}</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:46.900" level="INFO">Typing text 'Mercedes Gardner' into text field 'id:nome'.</msg>
<status status="PASS" starttime="20230601 15:57:46.899" endtime="20230601 15:57:47.022"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:email</arg>
<arg>${email}</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:47.023" level="INFO">Typing text 'rkoch@example.com' into text field 'id:email'.</msg>
<status status="PASS" starttime="20230601 15:57:47.022" endtime="20230601 15:57:47.117"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:password</arg>
<arg>${password}</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:47.118" level="INFO">Typing text 'OyTwLmx2r7d6' into text field 'id:password'.</msg>
<status status="PASS" starttime="20230601 15:57:47.117" endtime="20230601 15:57:47.207"/>
</kw>
<kw name="Select Checkbox" library="SeleniumLibrary">
<arg>id=administrador</arg>
<doc>Selects the checkbox identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:47.208" level="INFO">Selecting checkbox 'id=administrador'.</msg>
<status status="PASS" starttime="20230601 15:57:47.208" endtime="20230601 15:57:47.276"/>
</kw>
<status status="PASS" starttime="20230601 15:57:46.899" endtime="20230601 15:57:47.276"/>
</kw>
<kw name="When I click in signup" library="test_keywords_signup">
<kw name="Click Button" library="SeleniumLibrary">
<arg>css=.btn.btn-primary</arg>
<doc>Clicks the button identified by ``locator``.</doc>
<msg timestamp="20230601 15:57:47.277" level="INFO">Clicking button 'css=.btn.btn-primary'.</msg>
<status status="PASS" starttime="20230601 15:57:47.277" endtime="20230601 15:57:47.331"/>
</kw>
<status status="PASS" starttime="20230601 15:57:47.276" endtime="20230601 15:57:47.331"/>
</kw>
<kw name="Then the page should contain the text &quot;Este email já está sendo usado&quot;" library="test_keywords_signup" sourcename="Then the page should contain the text &quot;${expected_text}&quot;">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>css=.alert-dismissible</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20230601 15:57:47.331" endtime="20230601 15:57:47.561"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>css=.alert-dismissible</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20230601 15:57:47.578" level="INFO">Element 'css=.alert-dismissible' is displayed.</msg>
<status status="PASS" starttime="20230601 15:57:47.561" endtime="20230601 15:57:47.578"/>
</kw>
<kw name="Page Should Contain" library="SeleniumLibrary">
<arg>${expected_text}</arg>
<doc>Verifies that current page contains ``text``.</doc>
<msg timestamp="20230601 15:57:47.593" level="INFO">Current page contains text 'Este email já está sendo usado'.</msg>
<status status="PASS" starttime="20230601 15:57:47.579" endtime="20230601 15:57:47.593"/>
</kw>
<status status="PASS" starttime="20230601 15:57:47.331" endtime="20230601 15:57:47.593"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230601 15:57:47.594" endtime="20230601 15:57:47.649"/>
</kw>
<status status="PASS" starttime="20230601 15:57:47.593" endtime="20230601 15:57:47.649"/>
</kw>
<tag>e2e</tag>
<status status="PASS" starttime="20230601 15:57:45.421" endtime="20230601 15:57:47.649"/>
</test>
<status status="PASS" starttime="20230601 15:57:40.072" endtime="20230601 15:57:47.650"/>
</suite>
<status status="PASS" starttime="20230601 15:57:40.070" endtime="20230601 15:57:47.651"/>
</suite>
<status status="PASS" starttime="20230601 15:57:39.124" endtime="20230601 15:57:47.652"/>
</suite>
<statistics>
<total>
<stat pass="8" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="3" fail="0" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="8" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
