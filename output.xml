<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230609 19:09:01.569" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 19:09:02.390" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 19:09:02.390" endtime="20230609 19:09:02.391"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.390" endtime="20230609 19:09:02.391"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 19:09:02.539" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 19:09:02.539" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '4d68de9f-c907-4456-be8a-7f811690cc14', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '26fccc2460a9f01334d66a32a61ef899;o=1', 'Date': 'Fri, 09 Jun 2023 19:09:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '40269'} 
 body={
    "quantidade": 184,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "ttdq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "02DQkHSzXSqpcIka"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano55@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "0F1dhHbEeX2mrwft"
        },
        {
            "nome": "Drew Gerhold",
            "email": "almamosciski@test.com",
            "password": "9rJt1UcYQcnYJ7S",
            "administrador": "true",
            "_id": "0bnETEAn1Bj6PNeB"
        },
        {
            "nome": "Fulano da Silva",
            "email": "tlji@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0v9qTX5aeOtCF1sZ"
        },
        {
            "nome": "Christie Murazik",
            "email": "Eleazar.Hand25@yahoo.com",
            "password": "RZu8J4l1RolHVA9",
            "administrador": "true",
            "_id": "0zJJLyoiAC4LDuvK"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltr23123213ano@qa.com.br",
            "password": "te21312321321321321321312312",
            "administrador": "true",
            "_id": "19qYwOl1yhTmb9BG"
        },
        {
            "nome": "Tanya Larson",
            "email": "Evelyn.Greenholt-Farrell45@gmail.com",
            "password": "xhsyXupps0dhUhd",
            "administrador": "true",
            "_id": "1roUnulKv3v1koBe"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "todd42@example.com",
            "password": "Abc@123",
            "administrador": "true",
            "_id": "1sgIbfnuiyiNZqrg"
        },
        {
            "nome": "Antonio Funk III",
            "email": "Dan1@hotmail.com",
            "password": "DRpPX1z2ZECGMOi",
            "administrador": "true",
            "_id": "24Gamt7XRlANtwIj"
        },
        {
            "nome": "Weber 40",
            "email": "wsdesgtbvxyers1235w@mail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "3IrhmbechR9pI7eS"
        },
        {
            "nome": "Alfred Jaskolski",
            "email": "Marquise37@gmail.com",
            "password": "nqaFgugOOBVDLgZ",
            "administrador": "false",
            "_id": "3jE9j1N3PRSGSKXE"
        },
        {
            "nome": "Fulano da Silva",
            "email": "umzg@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "3pmr3d11mOjXcw48"
        },
        {
            "nome": "Tyler Oberbrunner",
            "email": "Ralph.Kuhic77@gmail.com",
            "password": "jtnofzT612n3Xwf",
            "administrador": "true",
            "_id": "3qdUSEh1LherGOxK"
        },
        {
            "nome": "Candice Zieme",
            "email": "Karelle.Davis33@hotmail.com",
            "password": "6gFuBILhb53G5Dd",
            "administrador": "true",
            "_id": "3v0ICd9RA3lOxu95"
        },
        {
            "nome": "Fulano da Silva",
            "email": "wecr@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4hcofxmM4X9ChELr"
        },
        {
            "nome": "Juanita Champlin-Barrows",
            "email": "Kristofer.Koss91@yahoo.com",
            "password": "QTFqy_lAXaVN4Or",
            "administrador": "true",
            "_id": "59WU4Oi0SqCvoAfR"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "sanderson@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "5BGAG7FQWpC8XanE"
        },
        {
            "nome": "Ruty",
            "email": "rutysa@hotmail.com",
            "password": "abc123",
            "administrador": "true",
            "_id": "5NnUe3903HAV4j0X"
        },
        {
            "nome": "Olivia Jast",
            "email": "Tamara84@gmail.com",
            "password": "YHIi4p7y5BotON_",
            "administrador": "false",
            "_id": "5bh5PuewiWA7sbyL"
        },
        {
            "nome": "Dr. Genevieve Abbott",
            "email": "Thelma.Johns99@hotmail.com",
            "password": "STu4AA3MMHDAnvo",
            "administrador": "true",
            "_id": "5l70IkKnpYUhr79n"
        },
        {
            "nome": "Dr. Antonio Collins",
            "email": "Demond91@hotmail.com",
            "password": "NqGDrB7bBw9VIwF",
            "administrador": "true",
            "_id": "6TAOnbRy0UrP9Ove"
        },
        {
            "nome": "Ms. Sophie Carter",
            "email": "Alysha18@yahoo.com",
            "password": "WvUzLByxSI_c8mN",
            "administrador": "true",
            "_id": "6lJRxOuN7m67apKs"
        },
        {
            "nome": "teste",
            "email": "teste@hotmail.br",
            "password": "1",
            "administrador": "true",
            "_id": "72dcS17y72QsiCjf"
        },
        {
            "nome": "Antonia Metz",
            "email": "Frederic_Reinger74@hotmail.com",
            "password": "bnmLvoWV21UGlkH",
            "administrador": "true",
            "_id": "7Un0DB88ipdaWPMM"
        },
        {
            "nome": "Brenda Waelchi",
            "email": "Trey_Wiegand81@hotmail.com",
            "password": "nA6gyxKUUqaA26D",
            "administrador": "true",
            "_id": "8CtP2qA9OnaIAnYp"
        },
        {
            "nome": "Jacsonsm",
            "email": "whodge@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "8SvBtCnNTB4cCSCJ"
        },
        {
            "nome": "Joanne Hintz",
            "email": "Ladarius_Champlin@yahoo.com",
            "password": "y190q3go3p0VrZY",
            "administrador": "true",
            "_id": "9LxF0vW4m0Bc7Rtu"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qliw@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "A0XW4CgHSmYnnlUf"
        },
        {
            "nome": "Weber 40",
            "email": "wsdesgtbvxye@mail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "A6qpZQHP1DLgZmVZ"
        },
        {
            "nome": "Brandon Jakubowski",
            "email": "Maritza45@hotmail.com",
            "password": "yKsneR_sw2NT8Un",
            "administrador": "true",
            "_id": "ASGTkKRr0F1f7ATG"
        },
        {
            "nome": "Margie Koch-Stehr",
            "email": "Brennon_Littel81@hotmail.com",
            "password": "fQl5qQkd6xHbYVo",
            "administrador": "false",
            "_id": "AZzE7UeEwSBdI11l"
        },
        {
            "nome": "Leslie Ondricka I",
            "email": "Jackie83@yahoo.com",
            "password": "4nyqqgA0c8nDc6A",
            "administrador": "true",
            "_id": "Ak1Wh4evPpp7z2bN"
        },
        {
            "nome": "Teste Eduardo edite",
            "email": "testeeduardo222@qa.com",
            "password": "12345789",
            "administrador": "true",
            "_id": "Axldi78KNMfO1ShP"
        },
        {
            "nome": "Christina Beer IV",
            "email": "Jacinthe1@hotmail.com",
            "password": "rY3BqzIHSdUQS5Z",
            "administrador": "true",
            "_id": "ByIp6wYmfcU36L3Z"
        },
        {
            "nome": "Bryan Reynolds",
            "email": "agreen@example.org",
            "password": "E9ClRZZvx4Th",
            "administrador": "true",
            "_id": "C7OvK06XohCWgFIU"
        },
        {
            "nome": "Kimberly Reinger",
            "email": "Maritza50@yahoo.com",
            "password": "XTsbHkKBFM45RIO",
            "administrador": "true",
            "_id": "CY9EWrxoytmjxUDJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "xgnp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "Cbr6oAFoAWyLzhhX"
        },
        {
            "nome": "Weber 40",
            "email": "wsdesgtbvxyer@mail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "D86LS7Qx6Rl3wHLu"
        },
        {
            "nome": "Evan Schmitt",
            "email": "Florida_Beier-Mitchell@hotmail.com",
            "password": "Bu0y6HVKVrADVdp",
            "administrador": "true",
            "_id": "Dc4eLDemlemniGXq"
        },
        {
            "nome": "Catherine Stark IV",
            "email": "Max97@yahoo.com",
            "password": "6_wmElvxgWu5D_r",
            "administrador": "true",
            "_id": "DjlloxVdhp1ROguN"
        },
        {
            "nome": "Cris",
            "email": "testeqa@teste.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "E0oPC5p9YIuYLekG"
        },
        {
            "nome": "oooo",
            "email": "0@email.com",
            "password": "000",
            "administrador": "true",
            "_id": "EYmjNQ4OIhVVksEl"
        },
        {
            "nome": "Ms. Tonya Shields",
            "email": "Brionna_Reilly22@yahoo.com",
            "password": "Pwk9g00GyMuU0AB",
            "administrador": "true",
            "_id": "Effb9VyPoEfW9Vxe"
        },
        {
            "nome": "Candace Swaniawski",
            "email": "Durward_Brown@hotmail.com",
            "password": "BCcvoP3EtLi8PQW",
            "administrador": "false",
            "_id": "FQD5HyjaIVhaqLTV"
        },
        {
            "nome": "Rolando Heaney",
            "email": "Keaton_Stamm@hotmail.com",
            "password": "Zke9Wn9MtK1pMAS",
            "administrador": "true",
            "_id": "G0nIzUm3mwIfVdyd"
        },
        {
            "nome": "Stacy Doyle-Carter",
      ... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230609 19:09:02.540" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.391" endtime="20230609 19:09:02.540"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 19:09:02.540" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.540" endtime="20230609 19:09:02.540"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.391" endtime="20230609 19:09:02.540"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 19:09:02.542" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.541" endtime="20230609 19:09:02.542"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:09:02.542" endtime="20230609 19:09:02.543"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.541" endtime="20230609 19:09:02.543"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 19:09:02.544" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 19:09:02.544" endtime="20230609 19:09:02.544"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.543" endtime="20230609 19:09:02.545"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:09:02.389" endtime="20230609 19:09:02.545"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 19:09:02.546" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 19:09:02.546" endtime="20230609 19:09:02.546"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.546" endtime="20230609 19:09:02.547"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230609 19:09:02.547" level="INFO">${name} = Michael Wolfe</msg>
<status status="PASS" starttime="20230609 19:09:02.547" endtime="20230609 19:09:02.547"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230609 19:09:02.548" level="INFO">${email} = johntrujillo@example.org</msg>
<status status="PASS" starttime="20230609 19:09:02.548" endtime="20230609 19:09:02.548"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230609 19:09:02.549" level="INFO">${password} = 89vjKvwbN8Gp</msg>
<status status="PASS" starttime="20230609 19:09:02.548" endtime="20230609 19:09:02.549"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 19:09:02.549" level="INFO">${name} = Michael Wolfe</msg>
<status status="PASS" starttime="20230609 19:09:02.549" endtime="20230609 19:09:02.549"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 19:09:02.549" level="INFO">${email} = johntrujillo@example.org</msg>
<status status="PASS" starttime="20230609 19:09:02.549" endtime="20230609 19:09:02.549"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 19:09:02.550" level="INFO">${password} = 89vjKvwbN8Gp</msg>
<status status="PASS" starttime="20230609 19:09:02.549" endtime="20230609 19:09:02.550"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.547" endtime="20230609 19:09:02.550"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 19:09:02.551" level="INFO">${payload} = {'nome': 'Michael Wolfe', 'email': 'johntrujillo@example.org', 'password': '89vjKvwbN8Gp', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 19:09:02.550" endtime="20230609 19:09:02.551"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 19:09:02.551" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 19:09:02.551" endtime="20230609 19:09:02.551"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 19:09:02.621" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '116'} 
 body=b'{"nome": "Michael Wolfe", "email": "johntrujillo@example.org", "password": "89vjKvwbN8Gp", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 19:09:02.622" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '8fa5613e-f208-4900-8b17-6621b10bc1ca', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '6ccaf8c923226f1f29094a93be22eb5c', 'Date': 'Fri, 09 Jun 2023 19:09:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "Oqm8XOLMJ3kLV6fu"
} 
 </msg>
<msg timestamp="20230609 19:09:02.622" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.551" endtime="20230609 19:09:02.622"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230609 19:09:02.623" level="INFO">${user_id} = Oqm8XOLMJ3kLV6fu</msg>
<status status="PASS" starttime="20230609 19:09:02.622" endtime="20230609 19:09:02.623"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230609 19:09:02.624" level="INFO">${USER_ID} = Oqm8XOLMJ3kLV6fu</msg>
<status status="PASS" starttime="20230609 19:09:02.623" endtime="20230609 19:09:02.624"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 19:09:02.624" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.624" endtime="20230609 19:09:02.624"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.550" endtime="20230609 19:09:02.624"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 19:09:02.626" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.625" endtime="20230609 19:09:02.626"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:09:02.626" endtime="20230609 19:09:02.626"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.625" endtime="20230609 19:09:02.627"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 19:09:02.627" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 19:09:02.627" endtime="20230609 19:09:02.628"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.627" endtime="20230609 19:09:02.628"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:09:02.545" endtime="20230609 19:09:02.628"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 19:09:02.629" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 19:09:02.629" endtime="20230609 19:09:02.629"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.629" endtime="20230609 19:09:02.630"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 19:09:02.702" level="INFO">GET Request : url=https://serverest.dev/usuarios/Oqm8XOLMJ3kLV6fu 
 path_url=/usuarios/Oqm8XOLMJ3kLV6fu 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 19:09:02.703" level="INFO">GET Response : url=https://serverest.dev/usuarios/Oqm8XOLMJ3kLV6fu 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '3a0f9fe1-3283-4d0a-afe1-ccf4ec32a64c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '1428e87e8135e73c3f11688e57e352d7', 'Date': 'Fri, 09 Jun 2023 19:09:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '165'} 
 body={
    "nome": "Michael Wolfe",
    "email": "johntrujillo@example.org",
    "password": "89vjKvwbN8Gp",
    "administrador": "false",
    "_id": "Oqm8XOLMJ3kLV6fu"
} 
 </msg>
<msg timestamp="20230609 19:09:02.703" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.630" endtime="20230609 19:09:02.703"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 19:09:02.704" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.703" endtime="20230609 19:09:02.704"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.630" endtime="20230609 19:09:02.704"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 19:09:02.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.704" endtime="20230609 19:09:02.705"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:09:02.705" endtime="20230609 19:09:02.706"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.704" endtime="20230609 19:09:02.706"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 19:09:02.707" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230609 19:09:02.707" endtime="20230609 19:09:02.707"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.706" endtime="20230609 19:09:02.707"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:09:02.628" endtime="20230609 19:09:02.707"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 19:09:02.709" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 19:09:02.709" endtime="20230609 19:09:02.709"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.708" endtime="20230609 19:09:02.709"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 19:09:02.710" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 19:09:02.710" endtime="20230609 19:09:02.710"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 19:09:02.710" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 19:09:02.710" endtime="20230609 19:09:02.711"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 19:09:02.783" level="INFO">PUT Request : url=https://serverest.dev/usuarios/Oqm8XOLMJ3kLV6fu 
 path_url=/usuarios/Oqm8XOLMJ3kLV6fu 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 19:09:02.784" level="INFO">PUT Response : url=https://serverest.dev/usuarios/Oqm8XOLMJ3kLV6fu 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '25f46953-292e-402b-bf95-035c2b2515c7', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c0dc32d67ecd1ca8786b9c8ef71c4731', 'Date': 'Fri, 09 Jun 2023 19:09:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230609 19:09:02.784" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.711" endtime="20230609 19:09:02.784"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 19:09:02.784" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.784" endtime="20230609 19:09:02.785"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.709" endtime="20230609 19:09:02.785"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 19:09:02.786" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.785" endtime="20230609 19:09:02.786"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:09:02.786" endtime="20230609 19:09:02.787"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.785" endtime="20230609 19:09:02.787"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 19:09:02.788" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 19:09:02.788" endtime="20230609 19:09:02.788"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.787" endtime="20230609 19:09:02.788"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:09:02.708" endtime="20230609 19:09:02.789"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 19:09:02.790" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 19:09:02.790" endtime="20230609 19:09:02.790"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.789" endtime="20230609 19:09:02.790"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 19:09:02.863" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/Oqm8XOLMJ3kLV6fu 
 path_url=/usuarios/Oqm8XOLMJ3kLV6fu 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230609 19:09:02.863" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/Oqm8XOLMJ3kLV6fu 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '246ae93a-5cea-4fbb-b26f-3159cdaf618e', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '034ec97cf651c46996d9d0a00b8de7e6', 'Date': 'Fri, 09 Jun 2023 19:09:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230609 19:09:02.863" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.791" endtime="20230609 19:09:02.863"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 19:09:02.864" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.863" endtime="20230609 19:09:02.864"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.790" endtime="20230609 19:09:02.864"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 19:09:02.865" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 19:09:02.864" endtime="20230609 19:09:02.865"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 19:09:02.865" endtime="20230609 19:09:02.866"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.864" endtime="20230609 19:09:02.866"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 19:09:02.867" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 19:09:02.867" endtime="20230609 19:09:02.867"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.866" endtime="20230609 19:09:02.867"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 19:09:02.789" endtime="20230609 19:09:02.868"/>
</test>
<status status="PASS" starttime="20230609 19:09:01.593" endtime="20230609 19:09:02.868"/>
</suite>
<status status="PASS" starttime="20230609 19:09:01.590" endtime="20230609 19:09:02.870"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 19:09:02.881" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 19:09:02.881" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 19:09:02.881" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 19:09:02.880" endtime="20230609 19:09:02.882"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 19:09:02.882" endtime="20230609 19:09:02.882"/>
</kw>
<status status="FAIL" starttime="20230609 19:09:02.880" endtime="20230609 19:09:02.882"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 19:09:02.883" endtime="20230609 19:09:02.883"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.883" endtime="20230609 19:09:02.883"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 19:09:02.879" endtime="20230609 19:09:02.883">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 19:09:02.886" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 19:09:02.886" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 19:09:02.886" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 19:09:02.885" endtime="20230609 19:09:02.886"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 19:09:02.886" endtime="20230609 19:09:02.886"/>
</kw>
<status status="FAIL" starttime="20230609 19:09:02.884" endtime="20230609 19:09:02.886"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 19:09:02.887" endtime="20230609 19:09:02.887"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.887" endtime="20230609 19:09:02.887"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 19:09:02.883" endtime="20230609 19:09:02.887">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 19:09:02.889" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 19:09:02.889" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 19:09:02.889" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 19:09:02.888" endtime="20230609 19:09:02.889"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 19:09:02.889" endtime="20230609 19:09:02.889"/>
</kw>
<status status="FAIL" starttime="20230609 19:09:02.888" endtime="20230609 19:09:02.889"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 19:09:02.890" endtime="20230609 19:09:02.890"/>
</kw>
<status status="PASS" starttime="20230609 19:09:02.890" endtime="20230609 19:09:02.890"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 19:09:02.888" endtime="20230609 19:09:02.890">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<status status="FAIL" starttime="20230609 19:09:02.872" endtime="20230609 19:09:02.891"/>
</suite>
<status status="FAIL" starttime="20230609 19:09:02.870" endtime="20230609 19:09:02.891"/>
</suite>
<status status="FAIL" starttime="20230609 19:09:01.570" endtime="20230609 19:09:02.892"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
