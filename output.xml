<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230417 01:02:52.496" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users/test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230417 01:02:52.898" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230417 01:02:52.898" endtime="20230417 01:02:52.899"/>
</kw>
<status status="PASS" starttime="20230417 01:02:52.897" endtime="20230417 01:02:52.899"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230417 01:02:53.143" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230417 01:02:53.143" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '63c36c97-afc5-4356-925e-698d3cc7d180', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '78f2cb4f9a41f3b4429ccb8f5dd49ec8;o=1', 'Date': 'Mon, 17 Apr 2023 01:02:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '10036'} 
 body={
    "quantidade": 44,
    "usuarios": [
        {
            "nome": "João sem pé de alface",
            "email": "Aimee_Macejkovic@hotmail.com",
            "password": "7Z_ukDoOI7ncKhd",
            "administrador": "true",
            "_id": "0jsw7VBo2ZNwjquM"
        },
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "joao@semfeijao.com",
            "password": "feijao",
            "administrador": "true",
            "_id": "1P8TooJcRvAijafG"
        },
        {
            "nome": "Fulano da Silva",
            "email": "aueq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "53zJja0bAPdIjoYy"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Dorothy.Runolfsson32@hotmail.com",
            "password": "5vailMlShLixWR1",
            "administrador": "true",
            "_id": "5WtosTFMFuiWI7VT"
        },
        {
            "nome": "João sem pé de alface",
            "email": "Hugh24@hotmail.com",
            "password": "vkLgPNetglqWx49",
            "administrador": "true",
            "_id": "5bpVUufSIXDgx73U"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Magdalena7@example.net",
            "password": "teste",
            "administrador": "true",
            "_id": "5xJo68guJO90S3an"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Jaunita.Von18@hotmail.com",
            "password": "kBalCVn2AP28lrO",
            "administrador": "true",
            "_id": "6h1ZuIOVSiD5qoBB"
        },
        {
            "nome": "João sem pé de alface",
            "email": "Henry8@gmail.com",
            "password": "GT995XonswQEa1e",
            "administrador": "true",
            "_id": "6zENQ8Nbg402qOy8"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Paula.Pfeffer85@yahoo.com",
            "password": "feijao",
            "administrador": "false",
            "_id": "8jQekMrpRucVlLbT"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "9v1waltX91x2dtjn"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Maynard_Moore@hotmail.com",
            "password": "feijao",
            "administrador": "false",
            "_id": "Bmk0yMf0PScoT4xr"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Trinity.Murray@hotmail.com",
            "password": "feijao",
            "administrador": "false",
            "_id": "Br8q8YpSDv5ctxxu"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Tyra.Stehr30@gmail.com",
            "password": "liuVHX80lgmidU8",
            "administrador": "false",
            "_id": "BxKXzlWht6h1JOy6"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Burley34@hotmail.com",
            "password": "NMcYpBHvDiQ8Is6",
            "administrador": "false",
            "_id": "CKZT9mJZDN8dsyjb"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Ida.Konopelski54@gmail.com",
            "password": "wM7ITvo5rQ_KtSM",
            "administrador": "true",
            "_id": "CuZTTW96Zj3WUsnG"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Zion85@gmail.com",
            "password": "feijao",
            "administrador": "false",
            "_id": "DYlDxLjCeeWwKW12"
        },
        {
            "nome": "João sem pé de Feijão 7123",
            "email": "joao77@semfeijao.com",
            "password": "feijao",
            "administrador": "true",
            "_id": "ERGn1kOwYienfDCZ"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Althea.Denesik@example.org",
            "password": "teste",
            "administrador": "true",
            "_id": "IBasJQpBhmwbUh30"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Nicolette_Harber68@yahoo.com",
            "password": "zC_gZvSRSsxQyBL",
            "administrador": "false",
            "_id": "JOX3HN4PZGXXCajR"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Genevieve_Krajcik@yahoo.com",
            "password": "MczwTekY81yjXb2",
            "administrador": "true",
            "_id": "M5REByEVp7N18BgJ"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Darrion_Dicki44@yahoo.com",
            "password": "feijao",
            "administrador": "false",
            "_id": "PA6drBmZ761eE3eD"
        },
        {
            "nome": "Jose da silva pereira",
            "email": "JoseSilva@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "RJd3accWWE0EUUnx"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Nicolas_Farrell@gmail.com",
            "password": "_yLFIw57NJyiwzD",
            "administrador": "false",
            "_id": "bTV93WEQEedhGkbR"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ajad@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "bcPUizZUCRIenf2u"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Eileen_Schamberger12@hotmail.com",
            "password": "D31fd9ML3UStm_K",
            "administrador": "true",
            "_id": "bgNxZNctTR9pbfZN"
        },
        {
            "nome": "Fulano da Silva",
            "email": "zclv@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "eil0j7zYopal4ulC"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Nigel_Carter99@example.com",
            "password": "teste",
            "administrador": "true",
            "_id": "fN641V9ZWHFoMg49"
        },
        {
            "nome": "João sem pé de alface",
            "email": "Harvey_Stanton@yahoo.com",
            "password": "DUU_4eLBlhWpxW6",
            "administrador": "true",
            "_id": "gkEfcvILDddJAvxF"
        },
        {
            "nome": "Fulano da Silva",
            "email": "kdnz@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "h3AbhOmF8BAA95oS"
        },
        {
            "nome": "João sem pé de alface",
            "email": "Pasquale.Kling89@hotmail.com",
            "password": "lGao43QdCD8ixDN",
            "administrador": "true",
            "_id": "h49o4So3ql8Ntz8C"
        },
        {
            "nome": "João sem pé de alface",
            "email": "Myriam_Rodriguez15@gmail.com",
            "password": "OPy47pqqV8YxXx_",
            "administrador": "true",
            "_id": "hwvWPfyOvVgZI7xm"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Leonardo.Beatty@example.com",
            "password": "teste",
            "administrador": "true",
            "_id": "jLDhG8GWhzVZIxmX"
        },
        {
            "nome": "João sem pé de Feijão2",
            "email": "joao2@semfeijao.com",
            "password": "feijao",
            "administrador": "true",
            "_id": "lEWE3E7OMfwiN9YQ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "godm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "mBxX568Vwr8bBYP4"
        },
        {
            "nome": "Fulano da Silva",
            "email": "lkxk@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "nZm0Vk2VKzXmfXVa"
        },
        {
            "nome": "João sem pé de Feijão3",
            "email": "joaos02@feijao.com",
            "password": "feijao",
            "administrador": "false",
            "_id": "qjlIPQOY4SkluD4o"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Rahsaan.Stroman69@gmail.com",
            "password": "qU_mEWITP8Nr3PP",
            "administrador": "false",
            "_id": "s29acG61sNbJLeAE"
        },
        {
            "nome": "João sem pé de Feijão",
            "email": "Gianni_Friesen@yahoo.com",
            "password": "6FjxeiEkI8Qwpda",
            "administrador": "false",
            "_id": "tN5u4MDjEAcPpcBs"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Newell_Koss15@hotmail.com",
            "password": "w35UZ5qQEbAfaNK",
            "administrador": "true",
            "_id": "tT3puMSJkRqYpEMH"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Baron.Weissnat@yahoo.com",
            "password": "3Z79aW7jhPuYt_0",
            "administrador": "true",
            "_id": "tXkZ1AYhe562wk3Q"
        },
        {
            "nome": "Alberto Roberto",
            "email": "alberto@test1.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "udfs6ht39Y0G1KPT"
        },
        {
            "nome": "Roberto Silva",
            "email": "Robertos@test1.com.br",
            "password": "teste",
            "administrador": "false",
            "_id": "vk6sFHZRSUIdHIB3"
        },
        {
            "nome": "João sem pé de Feijão4",
            "email": "Georgianna46@yahoo.com",
            "password": "cvYLmloBena6_MR",
            "administrador": "true",
            "_id": "wUu5hOa0iFv1x4Pe"
        }
    ]
} 
 </msg>
<msg timestamp="20230417 01:02:53.144" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:52.899" endtime="20230417 01:02:53.144"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230417 01:02:53.144" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.144" endtime="20230417 01:02:53.144"/>
</kw>
<status status="PASS" starttime="20230417 01:02:52.899" endtime="20230417 01:02:53.145"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230417 01:02:53.146" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.145" endtime="20230417 01:02:53.146"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230417 01:02:53.146" endtime="20230417 01:02:53.147"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.145" endtime="20230417 01:02:53.147"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230417 01:02:53.148" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230417 01:02:53.148" endtime="20230417 01:02:53.148"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.147" endtime="20230417 01:02:53.149"/>
</kw>
<status status="PASS" starttime="20230417 01:02:52.897" endtime="20230417 01:02:53.149"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230417 01:02:53.151" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230417 01:02:53.150" endtime="20230417 01:02:53.151"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.150" endtime="20230417 01:02:53.151"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230417 01:02:53.152" level="INFO">${name} = Kimberly Lozano</msg>
<status status="PASS" starttime="20230417 01:02:53.151" endtime="20230417 01:02:53.152"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230417 01:02:53.153" level="INFO">${email} = marcuslucero@example.org</msg>
<status status="PASS" starttime="20230417 01:02:53.152" endtime="20230417 01:02:53.153"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230417 01:02:53.153" level="INFO">${password} = L^P7b6XwF!</msg>
<status status="PASS" starttime="20230417 01:02:53.153" endtime="20230417 01:02:53.153"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230417 01:02:53.154" level="INFO">${name} = Kimberly Lozano</msg>
<status status="PASS" starttime="20230417 01:02:53.153" endtime="20230417 01:02:53.154"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230417 01:02:53.154" level="INFO">${email} = marcuslucero@example.org</msg>
<status status="PASS" starttime="20230417 01:02:53.154" endtime="20230417 01:02:53.154"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230417 01:02:53.154" level="INFO">${password} = L^P7b6XwF!</msg>
<status status="PASS" starttime="20230417 01:02:53.154" endtime="20230417 01:02:53.154"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.151" endtime="20230417 01:02:53.155"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230417 01:02:53.156" level="INFO">${payload} = {'nome': 'Kimberly Lozano', 'email': 'marcuslucero@example.org', 'password': 'L^P7b6XwF!', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230417 01:02:53.155" endtime="20230417 01:02:53.156"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230417 01:02:53.156" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230417 01:02:53.156" endtime="20230417 01:02:53.156"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230417 01:02:53.255" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '116'} 
 body=b'{"nome": "Kimberly Lozano", "email": "marcuslucero@example.org", "password": "L^P7b6XwF!", "administrador": "false"}' 
 </msg>
<msg timestamp="20230417 01:02:53.255" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'db5a0308-77ef-4e0d-9550-89674a7a2f18', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '9aa90f9a0b8d0566c936c4b7e9f34803', 'Date': 'Mon, 17 Apr 2023 01:02:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "ItTN1IexV22J2xMt"
} 
 </msg>
<msg timestamp="20230417 01:02:53.255" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.156" endtime="20230417 01:02:53.255"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230417 01:02:53.257" level="INFO">${user_id} = ItTN1IexV22J2xMt</msg>
<status status="PASS" starttime="20230417 01:02:53.255" endtime="20230417 01:02:53.257"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230417 01:02:53.257" level="INFO">${USER_ID} = ItTN1IexV22J2xMt</msg>
<status status="PASS" starttime="20230417 01:02:53.257" endtime="20230417 01:02:53.257"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230417 01:02:53.258" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.258" endtime="20230417 01:02:53.258"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.155" endtime="20230417 01:02:53.258"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230417 01:02:53.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.258" endtime="20230417 01:02:53.259"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230417 01:02:53.259" endtime="20230417 01:02:53.260"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.258" endtime="20230417 01:02:53.260"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230417 01:02:53.261" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230417 01:02:53.261" endtime="20230417 01:02:53.261"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.260" endtime="20230417 01:02:53.261"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.150" endtime="20230417 01:02:53.262"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="21">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230417 01:02:53.263" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230417 01:02:53.263" endtime="20230417 01:02:53.264"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.263" endtime="20230417 01:02:53.264"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230417 01:02:53.362" level="INFO">GET Request : url=https://serverest.dev/usuarios/ItTN1IexV22J2xMt 
 path_url=/usuarios/ItTN1IexV22J2xMt 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230417 01:02:53.363" level="INFO">GET Response : url=https://serverest.dev/usuarios/ItTN1IexV22J2xMt 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '14e66bce-4349-4824-b494-0a528bf7cdc7', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '4b3c72da31d38168deb017284ab5e881', 'Date': 'Mon, 17 Apr 2023 01:02:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '165'} 
 body={
    "nome": "Kimberly Lozano",
    "email": "marcuslucero@example.org",
    "password": "L^P7b6XwF!",
    "administrador": "false",
    "_id": "ItTN1IexV22J2xMt"
} 
 </msg>
<msg timestamp="20230417 01:02:53.363" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.264" endtime="20230417 01:02:53.363"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230417 01:02:53.364" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.363" endtime="20230417 01:02:53.364"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.264" endtime="20230417 01:02:53.364"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230417 01:02:53.366" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.365" endtime="20230417 01:02:53.366"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230417 01:02:53.367" endtime="20230417 01:02:53.368"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.364" endtime="20230417 01:02:53.368"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230417 01:02:53.369" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230417 01:02:53.369" endtime="20230417 01:02:53.370"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.368" endtime="20230417 01:02:53.370"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.262" endtime="20230417 01:02:53.370"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="26">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230417 01:02:53.371" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230417 01:02:53.371" endtime="20230417 01:02:53.372"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.371" endtime="20230417 01:02:53.372"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230417 01:02:53.373" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230417 01:02:53.372" endtime="20230417 01:02:53.373"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230417 01:02:53.373" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230417 01:02:53.373" endtime="20230417 01:02:53.373"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230417 01:02:53.472" level="INFO">PUT Request : url=https://serverest.dev/usuarios/ItTN1IexV22J2xMt 
 path_url=/usuarios/ItTN1IexV22J2xMt 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230417 01:02:53.472" level="INFO">PUT Response : url=https://serverest.dev/usuarios/ItTN1IexV22J2xMt 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '71fae9bd-361d-4ce0-b7b0-b01a7f1be1e7', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '13ee3cc0f311be29f256ad501616f38d', 'Date': 'Mon, 17 Apr 2023 01:02:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230417 01:02:53.472" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.373" endtime="20230417 01:02:53.472"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230417 01:02:53.473" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.472" endtime="20230417 01:02:53.473"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.372" endtime="20230417 01:02:53.473"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230417 01:02:53.474" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.473" endtime="20230417 01:02:53.474"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230417 01:02:53.474" endtime="20230417 01:02:53.475"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.473" endtime="20230417 01:02:53.475"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230417 01:02:53.476" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230417 01:02:53.476" endtime="20230417 01:02:53.476"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.475" endtime="20230417 01:02:53.476"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.370" endtime="20230417 01:02:53.477"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="31">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230417 01:02:53.478" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230417 01:02:53.478" endtime="20230417 01:02:53.479"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.478" endtime="20230417 01:02:53.479"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230417 01:02:53.577" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/ItTN1IexV22J2xMt 
 path_url=/usuarios/ItTN1IexV22J2xMt 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230417 01:02:53.577" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/ItTN1IexV22J2xMt 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '60d6c55e-b2e5-4adf-8503-65254c38d098', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'af0fb3ecded167d99a06bffcbeb37281', 'Date': 'Mon, 17 Apr 2023 01:02:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230417 01:02:53.577" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.479" endtime="20230417 01:02:53.577"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230417 01:02:53.578" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.578" endtime="20230417 01:02:53.578"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.479" endtime="20230417 01:02:53.578"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230417 01:02:53.580" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230417 01:02:53.579" endtime="20230417 01:02:53.581"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230417 01:02:53.581" endtime="20230417 01:02:53.582"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.579" endtime="20230417 01:02:53.582"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230417 01:02:53.583" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230417 01:02:53.583" endtime="20230417 01:02:53.583"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.582" endtime="20230417 01:02:53.584"/>
</kw>
<status status="PASS" starttime="20230417 01:02:53.477" endtime="20230417 01:02:53.584"/>
</test>
<status status="PASS" starttime="20230417 01:02:52.525" endtime="20230417 01:02:53.585"/>
</suite>
<status status="PASS" starttime="20230417 01:02:52.523" endtime="20230417 01:02:53.586"/>
</suite>
<status status="PASS" starttime="20230417 01:02:52.521" endtime="20230417 01:02:53.587"/>
</suite>
<status status="PASS" starttime="20230417 01:02:52.498" endtime="20230417 01:02:53.588"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
