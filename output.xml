<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230601 15:35:46.356" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:35:46.852" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:35:46.851" endtime="20230601 15:35:46.852"/>
</kw>
<status status="PASS" starttime="20230601 15:35:46.851" endtime="20230601 15:35:46.852"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:35:47.014" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230601 15:35:47.014" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '27be00ba-106a-4cc2-8588-4f578dc8b2ba', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '3e44289545fd35330e10e07d242da8e5;o=1', 'Date': 'Thu, 01 Jun 2023 15:35:46 GMT', 'Server': 'Google Frontend', 'Content-Length': '5263'} 
 body={
    "quantidade": 24,
    "usuarios": [
        {
            "nome": "Keith White",
            "email": "keithwhite@test.com",
            "password": "Test;123",
            "administrador": "true",
            "_id": "3VkyFCZjaX55brOB"
        },
        {
            "nome": "Teste de Exclusão",
            "email": "exlusao@qa123.com.br",
            "password": "teste123",
            "administrador": "true",
            "_id": "96IkPoiwTd6W8E6G"
        },
        {
            "nome": "Jose Souza da Silva",
            "email": "testetwt0113@google.com.br",
            "password": "12345",
            "administrador": "true",
            "_id": "ANUh6vcjepjot9m4"
        },
        {
            "nome": "Teste no RobotFramework1234",
            "email": "juarez4543210@hotmail.com",
            "password": "testenovo1234",
            "administrador": "true",
            "_id": "DJQllXTesdJUv25t"
        },
        {
            "nome": "Abigail Pearson",
            "email": "leelori@example.com",
            "password": "4gZoJFVoISqd",
            "administrador": "true",
            "_id": "P11p6mS9e6j3lRWe"
        },
        {
            "nome": "{{nome}}",
            "email": "Cruz@qa.com.br",
            "password": "SCHV6xXB1_PATmh",
            "administrador": "true",
            "_id": "QEculbd1dJsuv18G"
        },
        {
            "nome": "Teste de Exclusão",
            "email": "exlusao@qa.com.br",
            "password": "teste123",
            "administrador": "true",
            "_id": "RsFp1ZZGSqG68iGD"
        },
        {
            "nome": "Troy Moran",
            "email": "jonesdavid@example.org",
            "password": "fwHMTsFS3mgk",
            "administrador": "true",
            "_id": "U4gcbj9QPFePTMvA"
        },
        {
            "nome": "Bridget Satterfield",
            "email": "bridgetsatterfield@test.com",
            "password": "Test;123",
            "administrador": "true",
            "_id": "WaoQ0bq06WgCyzh1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ernx@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "WtAPGAoNV80jZwAT"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "eQc31OFVrLb6TURi"
        },
        {
            "nome": "{{nome}}",
            "email": "Jodie@qa.com.br",
            "password": "3onkUz5ipDWE6lF",
            "administrador": "true",
            "_id": "eebiRBQzxAfjwBud"
        },
        {
            "nome": "{{nome}}",
            "email": "Wade@qa.com.br",
            "password": "75sp8gpG4_cwEJL",
            "administrador": "true",
            "_id": "eiYlTXHzMuezZ3JP"
        },
        {
            "nome": "{{nome}}",
            "email": "Hadley@qa.com.br",
            "password": "cTFFNtgOYHKCveO",
            "administrador": "true",
            "_id": "gP4GN1H0ztPPVm4T"
        },
        {
            "nome": "Jason Rodriguez",
            "email": "tracivang@example.com",
            "password": "tFOdqK1b4bdb",
            "administrador": "true",
            "_id": "hOHsnxKpiWHMWThP"
        },
        {
            "nome": "Stephen Price",
            "email": "schaeferdylan@example.com",
            "password": "8O6ksSdDZp24",
            "administrador": "true",
            "_id": "hgBx9ALEJofc7VxJ"
        },
        {
            "nome": "Ola Kilback",
            "email": "Bernadine_Feeney@hotmail.com",
            "password": "2RdPzziLESCIj3C",
            "administrador": "false",
            "_id": "jxTheZsEleTA4Xfv"
        },
        {
            "nome": "anderson",
            "email": "anderson@qa.com.br",
            "password": "123",
            "administrador": "false",
            "_id": "lW623yJDD7ZwfEO0"
        },
        {
            "nome": "Cheyenne Knox",
            "email": "connierodriguez@example.org",
            "password": "2XpL75uHis1Y",
            "administrador": "true",
            "_id": "nQr8zF2KskcB67UX"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano_teste@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "r4MkfwAxanGM2wV0"
        },
        {
            "nome": "Marcelle_Grant92",
            "email": "Adrien_Rowe89@gmail.com",
            "password": "123456789",
            "administrador": "true",
            "_id": "sU9Mo6xgAmg5VBph"
        },
        {
            "nome": "Troy Ray",
            "email": "debbie39@example.net",
            "password": "di5JjZtW5C2X",
            "administrador": "true",
            "_id": "w6qnBS2wGoSELmzN"
        },
        {
            "nome": "Wendell White",
            "email": "wendellwhite@test.com",
            "password": "Test;123",
            "administrador": "true",
            "_id": "wbGsZa5vMrOWAm7a"
        },
        {
            "nome": "julia",
            "email": "contatojuliasena2@gmail.com",
            "password": "07101995",
            "administrador": "false",
            "_id": "x5hhnzNB64soj1IS"
        }
    ]
} 
 </msg>
<msg timestamp="20230601 15:35:47.014" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:46.852" endtime="20230601 15:35:47.014"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:35:47.015" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.014" endtime="20230601 15:35:47.015"/>
</kw>
<status status="PASS" starttime="20230601 15:35:46.852" endtime="20230601 15:35:47.015"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:35:47.016" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.015" endtime="20230601 15:35:47.016"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:35:47.016" endtime="20230601 15:35:47.017"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.015" endtime="20230601 15:35:47.017"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:35:47.018" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230601 15:35:47.017" endtime="20230601 15:35:47.018"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.017" endtime="20230601 15:35:47.018"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:35:46.850" endtime="20230601 15:35:47.018"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:35:47.019" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:35:47.019" endtime="20230601 15:35:47.020"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.019" endtime="20230601 15:35:47.020"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230601 15:35:47.020" level="INFO">${name} = Darren Johnson</msg>
<status status="PASS" starttime="20230601 15:35:47.020" endtime="20230601 15:35:47.021"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230601 15:35:47.021" level="INFO">${email} = iross@example.com</msg>
<status status="PASS" starttime="20230601 15:35:47.021" endtime="20230601 15:35:47.021"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230601 15:35:47.021" level="INFO">${password} = HGL4bjXr2W0N</msg>
<status status="PASS" starttime="20230601 15:35:47.021" endtime="20230601 15:35:47.021"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:35:47.022" level="INFO">${name} = Darren Johnson</msg>
<status status="PASS" starttime="20230601 15:35:47.022" endtime="20230601 15:35:47.022"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:35:47.022" level="INFO">${email} = iross@example.com</msg>
<status status="PASS" starttime="20230601 15:35:47.022" endtime="20230601 15:35:47.022"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230601 15:35:47.022" level="INFO">${password} = HGL4bjXr2W0N</msg>
<status status="PASS" starttime="20230601 15:35:47.022" endtime="20230601 15:35:47.022"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.020" endtime="20230601 15:35:47.023"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:35:47.023" level="INFO">${payload} = {'nome': 'Darren Johnson', 'email': 'iross@example.com', 'password': 'HGL4bjXr2W0N', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230601 15:35:47.023" endtime="20230601 15:35:47.023"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:35:47.024" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230601 15:35:47.023" endtime="20230601 15:35:47.024"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:35:47.091" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "Darren Johnson", "email": "iross@example.com", "password": "HGL4bjXr2W0N", "administrador": "false"}' 
 </msg>
<msg timestamp="20230601 15:35:47.091" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '9c8a3c67-0f62-42b9-a192-e09a37099d45', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a169491c0492076dbbc0de86c05caf2e', 'Date': 'Thu, 01 Jun 2023 15:35:47 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "C4hG1tYqSTFhR8Uk"
} 
 </msg>
<msg timestamp="20230601 15:35:47.091" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.024" endtime="20230601 15:35:47.091"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230601 15:35:47.092" level="INFO">${user_id} = C4hG1tYqSTFhR8Uk</msg>
<status status="PASS" starttime="20230601 15:35:47.091" endtime="20230601 15:35:47.092"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230601 15:35:47.092" level="INFO">${USER_ID} = C4hG1tYqSTFhR8Uk</msg>
<status status="PASS" starttime="20230601 15:35:47.092" endtime="20230601 15:35:47.093"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:35:47.093" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.093" endtime="20230601 15:35:47.093"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.023" endtime="20230601 15:35:47.093"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:35:47.094" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.093" endtime="20230601 15:35:47.094"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:35:47.094" endtime="20230601 15:35:47.095"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.093" endtime="20230601 15:35:47.095"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:35:47.096" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230601 15:35:47.095" endtime="20230601 15:35:47.096"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.095" endtime="20230601 15:35:47.096"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:35:47.018" endtime="20230601 15:35:47.096"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:35:47.097" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:35:47.097" endtime="20230601 15:35:47.098"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.097" endtime="20230601 15:35:47.098"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:35:47.169" level="INFO">GET Request : url=https://serverest.dev/usuarios/C4hG1tYqSTFhR8Uk 
 path_url=/usuarios/C4hG1tYqSTFhR8Uk 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230601 15:35:47.169" level="INFO">GET Response : url=https://serverest.dev/usuarios/C4hG1tYqSTFhR8Uk 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '678dc90b-b15a-43da-bc48-28fca44a4021', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'bc8fe27f653cb037f33e9517b266f39e', 'Date': 'Thu, 01 Jun 2023 15:35:47 GMT', 'Server': 'Google Frontend', 'Content-Length': '159'} 
 body={
    "nome": "Darren Johnson",
    "email": "iross@example.com",
    "password": "HGL4bjXr2W0N",
    "administrador": "false",
    "_id": "C4hG1tYqSTFhR8Uk"
} 
 </msg>
<msg timestamp="20230601 15:35:47.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.098" endtime="20230601 15:35:47.169"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:35:47.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.169" endtime="20230601 15:35:47.169"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.098" endtime="20230601 15:35:47.170"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:35:47.171" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.170" endtime="20230601 15:35:47.171"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:35:47.171" endtime="20230601 15:35:47.171"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.170" endtime="20230601 15:35:47.172"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:35:47.172" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230601 15:35:47.172" endtime="20230601 15:35:47.172"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.172" endtime="20230601 15:35:47.173"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:35:47.096" endtime="20230601 15:35:47.173"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:35:47.174" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:35:47.174" endtime="20230601 15:35:47.175"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.174" endtime="20230601 15:35:47.175"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:35:47.175" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230601 15:35:47.175" endtime="20230601 15:35:47.175"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230601 15:35:47.176" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230601 15:35:47.175" endtime="20230601 15:35:47.176"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:35:47.245" level="INFO">PUT Request : url=https://serverest.dev/usuarios/C4hG1tYqSTFhR8Uk 
 path_url=/usuarios/C4hG1tYqSTFhR8Uk 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230601 15:35:47.245" level="INFO">PUT Response : url=https://serverest.dev/usuarios/C4hG1tYqSTFhR8Uk 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '272d97df-2d73-4642-84b9-e1bb85fa7220', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'eaa9038457afd08cf1bd442efd1ed955', 'Date': 'Thu, 01 Jun 2023 15:35:47 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230601 15:35:47.245" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.176" endtime="20230601 15:35:47.245"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:35:47.246" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.245" endtime="20230601 15:35:47.246"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.175" endtime="20230601 15:35:47.246"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:35:47.247" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.246" endtime="20230601 15:35:47.247"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:35:47.247" endtime="20230601 15:35:47.248"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.246" endtime="20230601 15:35:47.248"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:35:47.249" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230601 15:35:47.248" endtime="20230601 15:35:47.249"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.248" endtime="20230601 15:35:47.249"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:35:47.173" endtime="20230601 15:35:47.249"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230601 15:35:47.250" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230601 15:35:47.250" endtime="20230601 15:35:47.250"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.250" endtime="20230601 15:35:47.251"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230601 15:35:47.319" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/C4hG1tYqSTFhR8Uk 
 path_url=/usuarios/C4hG1tYqSTFhR8Uk 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230601 15:35:47.319" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/C4hG1tYqSTFhR8Uk 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '8a42590e-efba-498f-b733-8d5da730415d', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'b65a52d11d92d809c277ff0aadb187c9', 'Date': 'Thu, 01 Jun 2023 15:35:47 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230601 15:35:47.319" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.251" endtime="20230601 15:35:47.319"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230601 15:35:47.320" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.319" endtime="20230601 15:35:47.320"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.251" endtime="20230601 15:35:47.320"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230601 15:35:47.321" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230601 15:35:47.320" endtime="20230601 15:35:47.321"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230601 15:35:47.321" endtime="20230601 15:35:47.322"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.320" endtime="20230601 15:35:47.322"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230601 15:35:47.323" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230601 15:35:47.322" endtime="20230601 15:35:47.323"/>
</kw>
<status status="PASS" starttime="20230601 15:35:47.322" endtime="20230601 15:35:47.323"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230601 15:35:47.249" endtime="20230601 15:35:47.323"/>
</test>
<status status="PASS" starttime="20230601 15:35:46.376" endtime="20230601 15:35:47.323"/>
</suite>
<status status="PASS" starttime="20230601 15:35:46.375" endtime="20230601 15:35:47.325"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" type="SETUP">
<msg timestamp="20230601 15:35:47.339" level="FAIL">No keyword with name 'Before Tests' found.</msg>
<status status="FAIL" starttime="20230601 15:35:47.339" endtime="20230601 15:35:47.339"/>
</kw>
<kw name="After Tests" type="TEARDOWN">
<msg timestamp="20230601 15:35:47.346" level="FAIL">No keyword with name 'After Tests' found.</msg>
<status status="FAIL" starttime="20230601 15:35:47.346" endtime="20230601 15:35:47.346">No keyword with name 'After Tests' found.</status>
</kw>
<tag>ui</tag>
<status status="FAIL" starttime="20230601 15:35:47.331" endtime="20230601 15:35:47.346">Setup failed:
No keyword with name 'Before Tests' found.

Also teardown failed:
No keyword with name 'After Tests' found.</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" type="SETUP">
<msg timestamp="20230601 15:35:47.354" level="FAIL">No keyword with name 'Before Tests' found.</msg>
<status status="FAIL" starttime="20230601 15:35:47.354" endtime="20230601 15:35:47.354"/>
</kw>
<kw name="After Tests" type="TEARDOWN">
<msg timestamp="20230601 15:35:47.361" level="FAIL">No keyword with name 'After Tests' found.</msg>
<status status="FAIL" starttime="20230601 15:35:47.361" endtime="20230601 15:35:47.361">No keyword with name 'After Tests' found.</status>
</kw>
<tag>ui</tag>
<status status="FAIL" starttime="20230601 15:35:47.347" endtime="20230601 15:35:47.361">Setup failed:
No keyword with name 'Before Tests' found.

Also teardown failed:
No keyword with name 'After Tests' found.</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" type="SETUP">
<msg timestamp="20230601 15:35:47.368" level="FAIL">No keyword with name 'Before Tests' found.</msg>
<status status="FAIL" starttime="20230601 15:35:47.368" endtime="20230601 15:35:47.368"/>
</kw>
<kw name="After Tests" type="TEARDOWN">
<msg timestamp="20230601 15:35:47.375" level="FAIL">No keyword with name 'After Tests' found.</msg>
<status status="FAIL" starttime="20230601 15:35:47.375" endtime="20230601 15:35:47.375">No keyword with name 'After Tests' found.</status>
</kw>
<tag>ui</tag>
<status status="FAIL" starttime="20230601 15:35:47.361" endtime="20230601 15:35:47.375">Setup failed:
No keyword with name 'Before Tests' found.

Also teardown failed:
No keyword with name 'After Tests' found.</status>
</test>
<status status="FAIL" starttime="20230601 15:35:47.327" endtime="20230601 15:35:47.375"/>
</suite>
<status status="FAIL" starttime="20230601 15:35:47.325" endtime="20230601 15:35:47.376"/>
</suite>
<status status="FAIL" starttime="20230601 15:35:46.357" endtime="20230601 15:35:47.377"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">ui</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20230601 15:35:47.329" level="ERROR">Error in file '/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot' on line 3: Resource file '../../resources/ui/keywords/test_keywords_common.robot' does not exist.</msg>
<msg timestamp="20230601 15:35:47.329" level="ERROR">Error in file '/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot' on line 4: Resource file '../../resources/ui/keywords/test_keywords_signup.robot' does not exist.</msg>
<msg timestamp="20230601 15:35:47.330" level="ERROR">Error in file '/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot' on line 5: Resource file '../../resources/ui/variables/test_variables_common.robot' does not exist.</msg>
</errors>
</robot>
