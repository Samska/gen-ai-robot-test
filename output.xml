<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.8.18 on linux)" generated="20231031 00:10:15.354" rpa="false" schemaversion="4">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231031 00:10:16.123" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231031 00:10:16.122" endtime="20231031 00:10:16.123"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.122" endtime="20231031 00:10:16.123"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231031 00:10:16.387" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231031 00:10:16.387" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a3dca431c15d58d84e2a8b3096e385b5;o=1', 'Date': 'Tue, 31 Oct 2023 00:10:16 GMT', 'Server': 'Google Frontend', 'Content-Length': '35460'} 
 body={
    "quantidade": 165,
    "usuarios": [
        {
            "nome": "Vergie",
            "email": "Katherine.Cruickshank52@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "03JOloYqhuHrg8oJ"
        },
        {
            "nome": "Jo√£o",
            "email": "annab608_9a58f9cd-a92e-4382-ab9e-c5795eb5c4bd@email.com",
            "password": "Senha123@",
            "administrador": "true",
            "_id": "0fh1zXckxsmG6Jv1"
        },
        {
            "nome": "Esther Kovacek",
            "email": "Linnea_Jenkins@yahoo.com",
            "password": "PRZX2Llo_xjhqAh",
            "administrador": "false",
            "_id": "0yOr8IXvGEvKAVbz"
        },
        {
            "nome": "Doyle Stehr DDS",
            "email": "Alda62@yahoo.com",
            "password": "RHCCMn2QUNPrgpQ",
            "administrador": "false",
            "_id": "141ylWI8zRWd8EO0"
        },
        {
            "nome": "Nicolas",
            "email": "Myrtie_Nolan@gmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "19YT9ww87QP5hRyl"
        },
        {
            "nome": "Johanna Bailey",
            "email": "Roscoe_Hauck@gmail.com",
            "password": "c3izAczNl3HGdAh",
            "administrador": "false",
            "_id": "2ypzGJo2l7GOKpVv"
        },
        {
            "nome": "Ernest Nolan",
            "email": "Vilma_Schamberger64@hotmail.com",
            "password": "TNcfuNVlfW4dgbQ",
            "administrador": "false",
            "_id": "3895OQ04VpGUXTlu"
        },
        {
            "nome": "Teste1",
            "email": "mbsz@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "3aOwN01CEsqHU0KI"
        },
        {
            "nome": "Jody Johnston",
            "email": "Mara.Grimes@hotmail.com",
            "password": "Xa8CUk53GSSNfcn",
            "administrador": "false",
            "_id": "3tYjULi5Yv1W1prC"
        },
        {
            "nome": "Alexandre Rezende",
            "email": "kamilly55@example.com",
            "password": "@j!WY*xQ5k",
            "administrador": "true",
            "_id": "44qBQK3gNefjXE60"
        },
        {
            "nome": "Revail",
            "email": "Claudete_Pereira@bol.com.br",
            "password": "1234",
            "administrador": "false",
            "_id": "49qoEvEOXRHSuGht"
        },
        {
            "nome": "Joana",
            "email": "annab608_9f0b99c2-7084-49cf-aec5-62fe1fc99598@email.com",
            "password": "SenhaDaJoana123@",
            "administrador": "true",
            "_id": "4FI66sPVe4LnQKw5"
        },
        {
            "nome": "Teste1",
            "email": "xfaj@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4hRnZeJEjqzZZ83v"
        },
        {
            "nome": "Bobbie Abbott",
            "email": "Claude_Waters59@gmail.com",
            "password": "UclWjOfqXmpLtRE",
            "administrador": "false",
            "_id": "4v39ErzjoiYGW4tt"
        },
        {
            "nome": "Alejandrin",
            "email": "testeapi@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "5O4ZJy0TFlYf4pG9"
        },
        {
            "nome": "Teste1",
            "email": "ylbb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5WDAVlWLbkqE2jwD"
        },
        {
            "nome": "Nadine Bailey",
            "email": "Ashleigh_Hayes75@gmail.com",
            "password": "T9vsLmgkgfWAg8K",
            "administrador": "false",
            "_id": "5kZTwUBxBpnw1icc"
        },
        {
            "nome": "Marty Schamberger",
            "email": "Lindsey.Leffler@yahoo.com",
            "password": "gf72t_GdVQlMpty",
            "administrador": "false",
            "_id": "5v8hJUlIP89dhhkp"
        },
        {
            "nome": "Garrett White",
            "email": "Marcella.Lang@yahoo.com",
            "password": "PRZX2Llo_xjhqAh",
            "administrador": "false",
            "_id": "6IafPwkgAYJHneie"
        },
        {
            "nome": "Douglas",
            "email": "Ivah61@gmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "6UUGH4zqbAtZqdyW"
        },
        {
            "nome": "Catarina Silva",
            "email": "noah07@example.org",
            "password": "#4NKxuh!A3",
            "administrador": "true",
            "_id": "6rbiXdJ9tVSiOXdb"
        },
        {
            "nome": "Vini Moura",
            "email": "QAxovGL@gmail.com",
            "password": "senha dificil",
            "administrador": "true",
            "_id": "7IEzMlnxYc0oSCwK"
        },
        {
            "nome": "Teresa Gutmann",
            "email": "Cecil_Bins@gmail.com",
            "password": "1XHeBUHp2GQIFVc",
            "administrador": "false",
            "_id": "7LL9neZ5XFJ1Hish"
        },
        {
            "nome": "Teste1",
            "email": "qfje@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "8KF78Thmr2exKF0X"
        },
        {
            "nome": "Molly Schoen",
            "email": "Willie.MacGyver@gmail.com",
            "password": "wTZpoXGGVbMkczB",
            "administrador": "false",
            "_id": "8MTNotAq2MxFMfhy"
        },
        {
            "nome": "Harriet Durgan",
            "email": "Theresia.Treutel@gmail.com",
            "password": "lehkHsseGDFYkB0",
            "administrador": "false",
            "_id": "8iL7kegHBUisnEif"
        },
        {
            "nome": "Teste1",
            "email": "uaqo@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "93ZSYl52E3Ebc8gQ"
        },
        {
            "nome": "Teste1",
            "email": "ugbo@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "9fAPQrzPbCKWr4pI"
        },
        {
            "nome": "Teste1",
            "email": "gmjy@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "BCq4ISPeaBtFOkyM"
        },
        {
            "nome": "Teste1",
            "email": "uyym@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "C93HuN10znhZTjfw"
        },
        {
            "administrador": "false",
            "email": "Gail_Lueilwitz18@yahoo.com",
            "nome": "Leon Dickinson",
            "password": "B6rWuloX6dt23Lv",
            "_id": "CeV0Mcpexy2qtYaX"
        },
        {
            "nome": "Galego silva",
            "email": "galego.silva@hotmail.com",
            "password": "123456",
            "administrador": "true",
            "_id": "D9c3UGhcEPjpRv7U"
        },
        {
            "nome": "Laurie Borer",
            "email": "Jayce.Cole-Carter48@hotmail.com",
            "password": "V_ymioivSVTDcYv",
            "administrador": "false",
            "_id": "DePdsvH6NpAmpAAC"
        },
        {
            "nome": "Conrad Ritchie",
            "email": "Calista28@gmail.com",
            "password": "tAqCTaQboWsByue",
            "administrador": "false",
            "_id": "DgsCpULkAFanND1J"
        },
        {
            "nome": "Harriet Durgan",
            "email": "Adrien_Hane87@hotmail.com",
            "password": "lehkHsseGDFYkB0",
            "administrador": "false",
            "_id": "EB64OKN3ZlbMfM8c"
        },
        {
            "nome": "Krystal Bashirian",
            "email": "Bruce.Botsford-Jerde38@gmail.com",
            "password": "vNpFN2WJZJ_OAbM",
            "administrador": "false",
            "_id": "EHnJcyQI4iEkBaGv"
        },
        {
            "nome": "Rebeca Cardoso",
            "email": "gcardoso@example.com",
            "password": "+7jfFIr^(1",
            "administrador": "true",
            "_id": "ELoPTCmiWdTdEo2u"
        },
        {
            "nome": "Maria",
            "email": "maria@email.com",
            "password": "SenhaDaMaria123@",
            "administrador": "true",
            "_id": "EwKzmMLWtHDGo2IL"
        },
        {
            "nome": "Teste1",
            "email": "mtwg@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "F3kodTCGZHAsgyr1"
        },
        {
            "nome": "Berta",
            "email": "Yolanda.Murphy@yahoo.com",
            "password": "teste",
            "administrador": "true",
            "_id": "F6cYoZUFKBDCpMrv"
        },
        {
            "nome": "Chelsie",
            "email": "Kenton.Homenick@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "FBgCRpnrAknzljSS"
        },
        {
            "nome": "Pat Dickens",
            "email": "Marcus58@gmail.com",
            "password": "MEONSu6M2o1kwhm",
            "administrador": "false",
            "_id": "FzUOLSsOG4cIZIBz"
        },
        {
            "nome": "Teresa Gutmann",
            "email": "Claire_Mann@yahoo.com",
            "password": "1XHeBUHp2GQIFVc",
            "administrador": "false",
            "_id": "GC153s5douyY5dXG"
        },
        {
            "nome": "Jo√£o",
            "email": "annab608_47dab23e-1c05-47b3-a612-0ce466484b1d@email.com",
            "password": "Senha123@",
            "administrador": "true",
            "_id": "Gg535wJD4k94HFhi"
        },
        {
            "nome": "Usuario 1",
            "email": "duarteluiz-gustavo@example.com",
            "password": "teste",
            "administrador": "true",
            "_id": "Ha74scJDzmvrPYBU"
        },
        {
            "nome": "Floyd Rau",
            "email": "Stanford_Macejkovic69@gmail.com",
            "password": "2UfRyPTP... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20231031 00:10:16.388" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.124" endtime="20231031 00:10:16.388"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231031 00:10:16.389" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.388" endtime="20231031 00:10:16.389"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.124" endtime="20231031 00:10:16.389"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231031 00:10:16.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.389" endtime="20231031 00:10:16.390"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231031 00:10:16.390" endtime="20231031 00:10:16.392"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.389" endtime="20231031 00:10:16.392"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231031 00:10:16.393" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231031 00:10:16.392" endtime="20231031 00:10:16.393"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.392" endtime="20231031 00:10:16.393"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231031 00:10:16.121" endtime="20231031 00:10:16.393"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231031 00:10:16.395" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231031 00:10:16.395" endtime="20231031 00:10:16.396"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.395" endtime="20231031 00:10:16.396"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example: 'John Doe'</doc>
<msg timestamp="20231031 00:10:16.397" level="INFO">${name} = Dr. Amber Parsons</msg>
<status status="PASS" starttime="20231031 00:10:16.396" endtime="20231031 00:10:16.397"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20231031 00:10:16.397" level="INFO">${email} = david74@example.org</msg>
<status status="PASS" starttime="20231031 00:10:16.397" endtime="20231031 00:10:16.397"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20231031 00:10:16.398" level="INFO">${password} = LPGyCK0hPWw0</msg>
<status status="PASS" starttime="20231031 00:10:16.397" endtime="20231031 00:10:16.398"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231031 00:10:16.399" level="INFO">${name} = Dr. Amber Parsons</msg>
<status status="PASS" starttime="20231031 00:10:16.398" endtime="20231031 00:10:16.399"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231031 00:10:16.399" level="INFO">${email} = david74@example.org</msg>
<status status="PASS" starttime="20231031 00:10:16.399" endtime="20231031 00:10:16.399"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231031 00:10:16.399" level="INFO">${password} = LPGyCK0hPWw0</msg>
<status status="PASS" starttime="20231031 00:10:16.399" endtime="20231031 00:10:16.399"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.396" endtime="20231031 00:10:16.400"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231031 00:10:16.401" level="INFO">${payload} = {'nome': 'Dr. Amber Parsons', 'email': 'david74@example.org', 'password': 'LPGyCK0hPWw0', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231031 00:10:16.400" endtime="20231031 00:10:16.401"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231031 00:10:16.401" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231031 00:10:16.401" endtime="20231031 00:10:16.401"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20231031 00:10:16.505" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '115'} 
 body=b'{"nome": "Dr. Amber Parsons", "email": "david74@example.org", "password": "LPGyCK0hPWw0", "administrador": "false"}' 
 </msg>
<msg timestamp="20231031 00:10:16.505" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'db8a839894335c7a9c9c4cc7d13e8b6c', 'Date': 'Tue, 31 Oct 2023 00:10:16 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "QyAk4oZf1I2OqFDc"
} 
 </msg>
<msg timestamp="20231031 00:10:16.505" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.401" endtime="20231031 00:10:16.505"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231031 00:10:16.506" level="INFO">${user_id} = QyAk4oZf1I2OqFDc</msg>
<status status="PASS" starttime="20231031 00:10:16.505" endtime="20231031 00:10:16.506"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20231031 00:10:16.507" level="INFO">${USER_ID} = QyAk4oZf1I2OqFDc</msg>
<status status="PASS" starttime="20231031 00:10:16.507" endtime="20231031 00:10:16.507"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231031 00:10:16.508" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.507" endtime="20231031 00:10:16.508"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.400" endtime="20231031 00:10:16.508"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231031 00:10:16.509" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.509" endtime="20231031 00:10:16.509"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231031 00:10:16.510" endtime="20231031 00:10:16.510"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.508" endtime="20231031 00:10:16.510"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231031 00:10:16.511" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231031 00:10:16.511" endtime="20231031 00:10:16.511"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.510" endtime="20231031 00:10:16.512"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231031 00:10:16.394" endtime="20231031 00:10:16.512"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231031 00:10:16.513" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231031 00:10:16.513" endtime="20231031 00:10:16.514"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.513" endtime="20231031 00:10:16.514"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231031 00:10:16.625" level="INFO">GET Request : url=https://serverest.dev/usuarios/QyAk4oZf1I2OqFDc 
 path_url=/usuarios/QyAk4oZf1I2OqFDc 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231031 00:10:16.626" level="INFO">GET Response : url=https://serverest.dev/usuarios/QyAk4oZf1I2OqFDc 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'd3d7ddcbef638a093247a285de51b9f5', 'Date': 'Tue, 31 Oct 2023 00:10:16 GMT', 'Server': 'Google Frontend', 'Content-Length': '164'} 
 body={
    "nome": "Dr. Amber Parsons",
    "email": "david74@example.org",
    "password": "LPGyCK0hPWw0",
    "administrador": "false",
    "_id": "QyAk4oZf1I2OqFDc"
} 
 </msg>
<msg timestamp="20231031 00:10:16.626" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.514" endtime="20231031 00:10:16.626"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231031 00:10:16.627" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.626" endtime="20231031 00:10:16.627"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.514" endtime="20231031 00:10:16.627"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231031 00:10:16.629" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.628" endtime="20231031 00:10:16.629"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231031 00:10:16.629" endtime="20231031 00:10:16.630"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.627" endtime="20231031 00:10:16.630"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231031 00:10:16.632" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20231031 00:10:16.631" endtime="20231031 00:10:16.632"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.630" endtime="20231031 00:10:16.632"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231031 00:10:16.512" endtime="20231031 00:10:16.632"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231031 00:10:16.634" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231031 00:10:16.634" endtime="20231031 00:10:16.635"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.633" endtime="20231031 00:10:16.635"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231031 00:10:16.636" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231031 00:10:16.636" endtime="20231031 00:10:16.636"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231031 00:10:16.637" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231031 00:10:16.637" endtime="20231031 00:10:16.637"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20231031 00:10:16.741" level="INFO">PUT Request : url=https://serverest.dev/usuarios/QyAk4oZf1I2OqFDc 
 path_url=/usuarios/QyAk4oZf1I2OqFDc 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20231031 00:10:16.741" level="INFO">PUT Response : url=https://serverest.dev/usuarios/QyAk4oZf1I2OqFDc 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '63d7fe740492db7211d9ef526993d7ce', 'Date': 'Tue, 31 Oct 2023 00:10:16 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20231031 00:10:16.741" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.638" endtime="20231031 00:10:16.741"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231031 00:10:16.742" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.742" endtime="20231031 00:10:16.742"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.635" endtime="20231031 00:10:16.743"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231031 00:10:16.746" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.744" endtime="20231031 00:10:16.746"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231031 00:10:16.746" endtime="20231031 00:10:16.747"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.743" endtime="20231031 00:10:16.747"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231031 00:10:16.748" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231031 00:10:16.748" endtime="20231031 00:10:16.748"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.747" endtime="20231031 00:10:16.749"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231031 00:10:16.633" endtime="20231031 00:10:16.749"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231031 00:10:16.751" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231031 00:10:16.750" endtime="20231031 00:10:16.751"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.750" endtime="20231031 00:10:16.751"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20231031 00:10:16.852" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/QyAk4oZf1I2OqFDc 
 path_url=/usuarios/QyAk4oZf1I2OqFDc 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20231031 00:10:16.852" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/QyAk4oZf1I2OqFDc 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a6019ae2e80e6508354e0fce29aa50e8', 'Date': 'Tue, 31 Oct 2023 00:10:16 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro exclu√≠do com sucesso"
} 
 </msg>
<msg timestamp="20231031 00:10:16.852" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.751" endtime="20231031 00:10:16.852"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231031 00:10:16.853" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.853" endtime="20231031 00:10:16.853"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.751" endtime="20231031 00:10:16.853"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231031 00:10:16.855" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231031 00:10:16.854" endtime="20231031 00:10:16.855"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231031 00:10:16.855" endtime="20231031 00:10:16.856"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.853" endtime="20231031 00:10:16.856"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231031 00:10:16.857" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231031 00:10:16.856" endtime="20231031 00:10:16.857"/>
</kw>
<status status="PASS" starttime="20231031 00:10:16.856" endtime="20231031 00:10:16.857"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231031 00:10:16.749" endtime="20231031 00:10:16.857"/>
</test>
<status status="PASS" starttime="20231031 00:10:15.381" endtime="20231031 00:10:16.858"/>
</suite>
<status status="PASS" starttime="20231031 00:10:15.379" endtime="20231031 00:10:16.859"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231031 00:10:16.873" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231031 00:10:18.224" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231031 00:10:18.225" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x5600fea65fb3 &lt;unknown&gt;
#1 0x5600fe7394a7 &lt;unknown&gt;
#2 0x5600fe76cc93 &lt;unknown&gt;
#3 0x5600fe76910c &lt;unknown&gt;
#4 0x5600fe7abac6 &lt;unknown&gt;
#5 0x5600fe7a2713 &lt;unknown&gt;
#6 0x5600fe77518b &lt;unknown&gt;
#7 0x5600fe775f7e &lt;unknown&gt;
#8 0x5600fea2b8d8 &lt;unknown&gt;
#9 0x5600fea2f800 &lt;unknown&gt;
#10 0x5600fea39cfc &lt;unknown&gt;
#11 0x5600fea30418 &lt;unknown&gt;
#12 0x5600fe9fd42f &lt;unknown&gt;
#13 0x5600fea544e8 &lt;unknown&gt;
#14 0x5600fea546b4 &lt;unknown&gt;
#15 0x5600fea65143 &lt;unknown&gt;
#16 0x7f0dfd494ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231031 00:10:16.873" endtime="20231031 00:10:18.227"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231031 00:10:18.228" endtime="20231031 00:10:18.228"/>
</kw>
<status status="FAIL" starttime="20231031 00:10:16.872" endtime="20231031 00:10:18.228"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231031 00:10:18.229" endtime="20231031 00:10:18.229"/>
</kw>
<status status="PASS" starttime="20231031 00:10:18.228" endtime="20231031 00:10:18.229"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231031 00:10:16.872" endtime="20231031 00:10:18.230">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x5600fea65fb3 &lt;unknown&gt;
#1 0x5600fe7394a7 &lt;unknown&gt;
#2 0x5600fe76cc93 &lt;unknown&gt;
#3 0x5600fe76910c &lt;unknown&gt;
#4 0x5600fe7abac6 &lt;unknown&gt;
#5 0x5600fe7a2713 &lt;unknown&gt;
#6 0x5600fe77518b &lt;unknown&gt;
#7 0x5600fe775f7e &lt;unknown&gt;
#8 0x5600fea2b8d8 &lt;unknown&gt;
#9 0x5600fea2f800 &lt;unknown&gt;
#10 0x5600fea39cfc &lt;unknown&gt;
#11 0x5600fea30418 &lt;unknown&gt;
#12 0x5600fe9fd42f &lt;unknown&gt;
#13 0x5600fea544e8 &lt;unknown&gt;
#14 0x5600fea546b4 &lt;unknown&gt;
#15 0x5600fea65143 &lt;unknown&gt;
#16 0x7f0dfd494ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231031 00:10:18.234" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231031 00:10:18.919" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231031 00:10:18.920" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x564a9242dfb3 &lt;unknown&gt;
#1 0x564a921014a7 &lt;unknown&gt;
#2 0x564a92134c93 &lt;unknown&gt;
#3 0x564a9213110c &lt;unknown&gt;
#4 0x564a92173ac6 &lt;unknown&gt;
#5 0x564a9216a713 &lt;unknown&gt;
#6 0x564a9213d18b &lt;unknown&gt;
#7 0x564a9213df7e &lt;unknown&gt;
#8 0x564a923f38d8 &lt;unknown&gt;
#9 0x564a923f7800 &lt;unknown&gt;
#10 0x564a92401cfc &lt;unknown&gt;
#11 0x564a923f8418 &lt;unknown&gt;
#12 0x564a923c542f &lt;unknown&gt;
#13 0x564a9241c4e8 &lt;unknown&gt;
#14 0x564a9241c6b4 &lt;unknown&gt;
#15 0x564a9242d143 &lt;unknown&gt;
#16 0x7f624b294ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231031 00:10:18.233" endtime="20231031 00:10:18.920"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231031 00:10:18.921" endtime="20231031 00:10:18.921"/>
</kw>
<status status="FAIL" starttime="20231031 00:10:18.232" endtime="20231031 00:10:18.921"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231031 00:10:18.922" endtime="20231031 00:10:18.922"/>
</kw>
<status status="PASS" starttime="20231031 00:10:18.922" endtime="20231031 00:10:18.922"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231031 00:10:18.230" endtime="20231031 00:10:18.923">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x564a9242dfb3 &lt;unknown&gt;
#1 0x564a921014a7 &lt;unknown&gt;
#2 0x564a92134c93 &lt;unknown&gt;
#3 0x564a9213110c &lt;unknown&gt;
#4 0x564a92173ac6 &lt;unknown&gt;
#5 0x564a9216a713 &lt;unknown&gt;
#6 0x564a9213d18b &lt;unknown&gt;
#7 0x564a9213df7e &lt;unknown&gt;
#8 0x564a923f38d8 &lt;unknown&gt;
#9 0x564a923f7800 &lt;unknown&gt;
#10 0x564a92401cfc &lt;unknown&gt;
#11 0x564a923f8418 &lt;unknown&gt;
#12 0x564a923c542f &lt;unknown&gt;
#13 0x564a9241c4e8 &lt;unknown&gt;
#14 0x564a9241c6b4 &lt;unknown&gt;
#15 0x564a9242d143 &lt;unknown&gt;
#16 0x7f624b294ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231031 00:10:18.928" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231031 00:10:19.663" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231031 00:10:19.663" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x564a794f6fb3 &lt;unknown&gt;
#1 0x564a791ca4a7 &lt;unknown&gt;
#2 0x564a791fdc93 &lt;unknown&gt;
#3 0x564a791fa10c &lt;unknown&gt;
#4 0x564a7923cac6 &lt;unknown&gt;
#5 0x564a79233713 &lt;unknown&gt;
#6 0x564a7920618b &lt;unknown&gt;
#7 0x564a79206f7e &lt;unknown&gt;
#8 0x564a794bc8d8 &lt;unknown&gt;
#9 0x564a794c0800 &lt;unknown&gt;
#10 0x564a794cacfc &lt;unknown&gt;
#11 0x564a794c1418 &lt;unknown&gt;
#12 0x564a7948e42f &lt;unknown&gt;
#13 0x564a794e54e8 &lt;unknown&gt;
#14 0x564a794e56b4 &lt;unknown&gt;
#15 0x564a794f6143 &lt;unknown&gt;
#16 0x7fa334e94ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231031 00:10:18.927" endtime="20231031 00:10:19.664"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231031 00:10:19.664" endtime="20231031 00:10:19.664"/>
</kw>
<status status="FAIL" starttime="20231031 00:10:18.926" endtime="20231031 00:10:19.664"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231031 00:10:19.665" endtime="20231031 00:10:19.666"/>
</kw>
<status status="PASS" starttime="20231031 00:10:19.665" endtime="20231031 00:10:19.666"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231031 00:10:18.923" endtime="20231031 00:10:19.666">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x564a794f6fb3 &lt;unknown&gt;
#1 0x564a791ca4a7 &lt;unknown&gt;
#2 0x564a791fdc93 &lt;unknown&gt;
#3 0x564a791fa10c &lt;unknown&gt;
#4 0x564a7923cac6 &lt;unknown&gt;
#5 0x564a79233713 &lt;unknown&gt;
#6 0x564a7920618b &lt;unknown&gt;
#7 0x564a79206f7e &lt;unknown&gt;
#8 0x564a794bc8d8 &lt;unknown&gt;
#9 0x564a794c0800 &lt;unknown&gt;
#10 0x564a794cacfc &lt;unknown&gt;
#11 0x564a794c1418 &lt;unknown&gt;
#12 0x564a7948e42f &lt;unknown&gt;
#13 0x564a794e54e8 &lt;unknown&gt;
#14 0x564a794e56b4 &lt;unknown&gt;
#15 0x564a794f6143 &lt;unknown&gt;
#16 0x7fa334e94ac3 &lt;unknown&gt;
</status>
</test>
<status status="FAIL" starttime="20231031 00:10:16.862" endtime="20231031 00:10:19.668"/>
</suite>
<status status="FAIL" starttime="20231031 00:10:16.860" endtime="20231031 00:10:19.669"/>
</suite>
<status status="FAIL" starttime="20231031 00:10:15.355" endtime="20231031 00:10:19.670"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
