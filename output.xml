<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.8.18 on linux)" generated="20231114 00:10:12.902" rpa="false" schemaversion="4">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231114 00:10:13.644" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231114 00:10:13.644" endtime="20231114 00:10:13.644"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.643" endtime="20231114 00:10:13.644"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231114 00:10:13.983" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231114 00:10:13.983" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '34617b683b0e78acac13adf143644b17;o=1', 'Date': 'Tue, 14 Nov 2023 00:10:13 GMT', 'Server': 'Google Frontend', 'Content-Length': '81237'} 
 body={
    "quantidade": 381,
    "usuarios": [
        {
            "nome": "Harry Potter",
            "email": "ffal@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "00HaJwxCwkMQahe5"
        },
        {
            "nome": "Hunter Kuphal DVM",
            "email": "raymond.veum@yahoo.com",
            "password": "21rf7nyg",
            "administrador": "true",
            "_id": "01JSHnmKzJQtuSLV"
        },
        {
            "nome": "Fulano de Tall",
            "email": "harriskyle@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "0Pv6okASsje5fqvN"
        },
        {
            "nome": "Harry Potter",
            "email": "kugs@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0l2GBpIC1BJzXWKm"
        },
        {
            "nome": "Harry Potter",
            "email": "fqfo@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0l3pyfV71AbLN64N"
        },
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Julie Melo",
            "email": "Valmira12@yahoo.com",
            "password": "koRm2z613e0QhmE",
            "administrador": "true",
            "_id": "11TSscVXHwb8h3kg"
        },
        {
            "nome": "Christopher Davis",
            "email": "johnherrera@example.com",
            "password": "+Q3Nedb^*r",
            "administrador": "true",
            "_id": "1Uo7WUDxPGrPZZs3"
        },
        {
            "nome": "Fulano de Tall",
            "email": "ycampbell@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "1o9aPRJm3Kgzt7ei"
        },
        {
            "nome": "Jesenia Daniel",
            "email": "horace.hane@hotmail.com",
            "password": "vgxz085qija9",
            "administrador": "true",
            "_id": "1vwobqcbe7spV8rJ"
        },
        {
            "nome": "Fulano de Tall",
            "email": "brandonlewis@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "1xbljM6Xet0CrMGS"
        },
        {
            "nome": "Fulano de Tall",
            "email": "velasquezlindsey@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "26rWISuQXWVyxNfv"
        },
        {
            "nome": "Harry Potter",
            "email": "wgkc@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2DkVnwsE0JIcMD4J"
        },
        {
            "nome": "Harry Potter",
            "email": "uolq@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2JDxEIziBDvLFidp"
        },
        {
            "nome": "Jessie Block",
            "email": "fernando.kshlerin@gmail.com",
            "password": "5gzpv306",
            "administrador": "false",
            "_id": "2UrFU2cBR8TUqJX8"
        },
        {
            "nome": "Harry Potter",
            "email": "ywpp@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2cQY8q9RSspXGZQ0"
        },
        {
            "nome": "Fulano de Tall",
            "email": "christina06@example.org",
            "password": "123456",
            "administrador": "true",
            "_id": "2opkFyPF5vtjNCVo"
        },
        {
            "nome": "Gerald.Runolfsson67",
            "email": "Julia.Rempel@hotmail.com",
            "password": "848468539",
            "administrador": "true",
            "_id": "3CyI2ifJJhdJdawy"
        },
        {
            "nome": "Fulano de Tall",
            "email": "jennifer52@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "3FJUAUeHP0ATFXNE"
        },
        {
            "nome": "Renata Martins",
            "email": "Viviana.Macedo99@hotmail.com",
            "password": "aAB1cjb8GLgGNDy",
            "administrador": "true",
            "_id": "3lPoTqtnk00ThDqT"
        },
        {
            "nome": "Harry Potter",
            "email": "phed@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "3mLljgxtC0CQCvSl"
        },
        {
            "nome": "Esta Lebsack",
            "email": "bao.nikolaus@yahoo.com",
            "password": "mjic10q61e",
            "administrador": "true",
            "_id": "3r5E8usSAhdf0GEF"
        },
        {
            "nome": "Miss Devin Langworth",
            "email": "cletus.okon@yahoo.com",
            "password": "02f8s041mcqm2tc",
            "administrador": "true",
            "_id": "42vdfTcl1cAqwNME"
        },
        {
            "nome": "Harry Potter",
            "email": "fdaf@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "48Sp4OcggkGOt4GR"
        },
        {
            "nome": "Harry Potter",
            "email": "fxih@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4WpQItEHPirUO52K"
        },
        {
            "nome": "Fulano de Tall",
            "email": "sray@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "4XJPhORB9qFPtwG5"
        },
        {
            "nome": "Geazi Costa",
            "email": "Regina35@hotmail.com",
            "password": "FlAw0d1W2Qv6MnS",
            "administrador": "true",
            "_id": "4azREy54znLq438u"
        },
        {
            "nome": "Fulano de Tall",
            "email": "aharrington@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "4eCBEkplODaiL9z5"
        },
        {
            "nome": "Fulano de Tall",
            "email": "angelafrazier@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "4j9dAsdToIjJjYyW"
        },
        {
            "nome": "Harry Potter",
            "email": "cuhw@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4qo5umE0GXH02ZoG"
        },
        {
            "nome": "Harry Potter",
            "email": "fscl@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4xzpTYXhr1lctZuM"
        },
        {
            "nome": "Otoniel Santos",
            "email": "Jacimar1@yahoo.com",
            "password": "XhOzSIhM61pEfsL",
            "administrador": "true",
            "_id": "55lvVTtQ5G9KNdeQ"
        },
        {
            "nome": "Meridith Reinger",
            "email": "johnathan.franecki@yahoo.com",
            "password": "fmqzbbq6",
            "administrador": "true",
            "_id": "5DAkF3BUMYq073wM"
        },
        {
            "nome": "Fulano de Tall",
            "email": "vdiaz@example.org",
            "password": "123456",
            "administrador": "true",
            "_id": "5Dm3BdRTgUPv2DPO"
        },
        {
            "nome": "Fulano de Tall",
            "email": "stacy40@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "5LuONtgejXVMdpX0"
        },
        {
            "nome": "Harry Potter",
            "email": "finj@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5WYcVaknj9n1YD78"
        },
        {
            "nome": "Fulano de Tall",
            "email": "amy47@example.org",
            "password": "123456",
            "administrador": "true",
            "_id": "5aB4mUT3EKNUwH4M"
        },
        {
            "nome": "Elva",
            "email": "sharon.goldner@yahoo.com",
            "password": "a45w639k1irmp",
            "administrador": "true",
            "_id": "5nosBuXPGl3Z6KHH"
        },
        {
            "nome": "Rosely Nogueira",
            "email": "Manuela_Reis@hotmail.com",
            "password": "AApCq0Nte6nvDWs",
            "administrador": "true",
            "_id": "5seApQWGnW7gePr6"
        },
        {
            "nome": "Harry Potter",
            "email": "cwwe@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "6ToKkhnNQmp0UipH"
        },
        {
            "nome": "Carlo Feeney",
            "email": "augustina.konopelski@yahoo.com",
            "password": "qt1r2qfichceed",
            "administrador": "true",
            "_id": "6USNs9w3LmXELbw2"
        },
        {
            "nome": "Harry Potter",
            "email": "yarn@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "6WlATpcsXopGjvYt"
        },
        {
            "nome": "Harry Potter",
            "email": "esqn@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "6v1AVyXLpUKpSdbx"
        },
        {
            "nome": "Harry Potter",
            "email": "kujb@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "72zzlhrj47l1h7PY"
        },
        {
            "nome": "Harry Potter",
            "email": "bguo@emailqa.com",
            "password": "1234",
            "administrador": "true",
            "_id": "74VbDOxheMoEaJph"
        },
        {
            "nome": "Ms. Virgen Cronin",
            "email": "brooks.leannon@gmail.com",
            "password": "vrf6qd3rblnoc8",
            "administrador": "true",
            "_id": "7XC3VdXwPBDleywc"
        },
        {
            "nome": "Margaret Pereira",
            "email": "June_Silva@hotmail.com",
            "password": "63np8... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20231114 00:10:13.984" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:13.645" endtime="20231114 00:10:13.984"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231114 00:10:13.984" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:13.984" endtime="20231114 00:10:13.984"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.644" endtime="20231114 00:10:13.984"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231114 00:10:13.985" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231114 00:10:13.985" endtime="20231114 00:10:13.985"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231114 00:10:13.985" endtime="20231114 00:10:13.986"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.984" endtime="20231114 00:10:13.986"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231114 00:10:13.988" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231114 00:10:13.987" endtime="20231114 00:10:13.988"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.987" endtime="20231114 00:10:13.988"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231114 00:10:13.643" endtime="20231114 00:10:13.988"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231114 00:10:13.989" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231114 00:10:13.989" endtime="20231114 00:10:13.989"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.988" endtime="20231114 00:10:13.989"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example: 'John Doe'</doc>
<msg timestamp="20231114 00:10:13.990" level="INFO">${name} = Scott Rice</msg>
<status status="PASS" starttime="20231114 00:10:13.989" endtime="20231114 00:10:13.990"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20231114 00:10:13.990" level="INFO">${email} = sanchezjessica@example.org</msg>
<status status="PASS" starttime="20231114 00:10:13.990" endtime="20231114 00:10:13.990"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20231114 00:10:13.991" level="INFO">${password} = uNyZRAWnFT0d</msg>
<status status="PASS" starttime="20231114 00:10:13.990" endtime="20231114 00:10:13.991"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231114 00:10:13.991" level="INFO">${name} = Scott Rice</msg>
<status status="PASS" starttime="20231114 00:10:13.991" endtime="20231114 00:10:13.991"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231114 00:10:13.991" level="INFO">${email} = sanchezjessica@example.org</msg>
<status status="PASS" starttime="20231114 00:10:13.991" endtime="20231114 00:10:13.991"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231114 00:10:13.991" level="INFO">${password} = uNyZRAWnFT0d</msg>
<status status="PASS" starttime="20231114 00:10:13.991" endtime="20231114 00:10:13.992"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.989" endtime="20231114 00:10:13.992"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231114 00:10:13.992" level="INFO">${payload} = {'nome': 'Scott Rice', 'email': 'sanchezjessica@example.org', 'password': 'uNyZRAWnFT0d', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231114 00:10:13.992" endtime="20231114 00:10:13.992"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231114 00:10:13.993" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231114 00:10:13.992" endtime="20231114 00:10:13.993"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20231114 00:10:14.079" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '115'} 
 body=b'{"nome": "Scott Rice", "email": "sanchezjessica@example.org", "password": "uNyZRAWnFT0d", "administrador": "false"}' 
 </msg>
<msg timestamp="20231114 00:10:14.079" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '8cf58a0a56d148ce71f725c926106ace', 'Date': 'Tue, 14 Nov 2023 00:10:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "llA58PC82HxY4f7G"
} 
 </msg>
<msg timestamp="20231114 00:10:14.079" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:13.993" endtime="20231114 00:10:14.079"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20231114 00:10:14.080" level="INFO">${user_id} = llA58PC82HxY4f7G</msg>
<status status="PASS" starttime="20231114 00:10:14.080" endtime="20231114 00:10:14.080"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20231114 00:10:14.081" level="INFO">${USER_ID} = llA58PC82HxY4f7G</msg>
<status status="PASS" starttime="20231114 00:10:14.080" endtime="20231114 00:10:14.081"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231114 00:10:14.081" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.081" endtime="20231114 00:10:14.081"/>
</kw>
<status status="PASS" starttime="20231114 00:10:13.992" endtime="20231114 00:10:14.081"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231114 00:10:14.082" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.082" endtime="20231114 00:10:14.082"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231114 00:10:14.082" endtime="20231114 00:10:14.083"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.081" endtime="20231114 00:10:14.083"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231114 00:10:14.084" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20231114 00:10:14.083" endtime="20231114 00:10:14.084"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.083" endtime="20231114 00:10:14.084"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231114 00:10:13.988" endtime="20231114 00:10:14.084"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231114 00:10:14.085" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231114 00:10:14.085" endtime="20231114 00:10:14.085"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.085" endtime="20231114 00:10:14.085"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20231114 00:10:14.168" level="INFO">GET Request : url=https://serverest.dev/usuarios/llA58PC82HxY4f7G 
 path_url=/usuarios/llA58PC82HxY4f7G 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20231114 00:10:14.169" level="INFO">GET Response : url=https://serverest.dev/usuarios/llA58PC82HxY4f7G 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'd3c6d5ac8acb3ff8ed0816d4e52c8e03', 'Date': 'Tue, 14 Nov 2023 00:10:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '164'} 
 body={
    "nome": "Scott Rice",
    "email": "sanchezjessica@example.org",
    "password": "uNyZRAWnFT0d",
    "administrador": "false",
    "_id": "llA58PC82HxY4f7G"
} 
 </msg>
<msg timestamp="20231114 00:10:14.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.086" endtime="20231114 00:10:14.169"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231114 00:10:14.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.169" endtime="20231114 00:10:14.169"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.086" endtime="20231114 00:10:14.169"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231114 00:10:14.170" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.170" endtime="20231114 00:10:14.170"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231114 00:10:14.170" endtime="20231114 00:10:14.171"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.169" endtime="20231114 00:10:14.171"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231114 00:10:14.171" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20231114 00:10:14.171" endtime="20231114 00:10:14.171"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.171" endtime="20231114 00:10:14.172"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231114 00:10:14.084" endtime="20231114 00:10:14.172"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231114 00:10:14.173" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231114 00:10:14.172" endtime="20231114 00:10:14.173"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.172" endtime="20231114 00:10:14.173"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231114 00:10:14.173" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20231114 00:10:14.173" endtime="20231114 00:10:14.173"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20231114 00:10:14.174" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20231114 00:10:14.174" endtime="20231114 00:10:14.174"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20231114 00:10:14.264" level="INFO">PUT Request : url=https://serverest.dev/usuarios/llA58PC82HxY4f7G 
 path_url=/usuarios/llA58PC82HxY4f7G 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20231114 00:10:14.264" level="INFO">PUT Response : url=https://serverest.dev/usuarios/llA58PC82HxY4f7G 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'e1ab0e117dca8e9463ccd833783da6e8', 'Date': 'Tue, 14 Nov 2023 00:10:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20231114 00:10:14.264" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.174" endtime="20231114 00:10:14.264"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231114 00:10:14.264" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.264" endtime="20231114 00:10:14.265"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.173" endtime="20231114 00:10:14.265"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231114 00:10:14.266" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.265" endtime="20231114 00:10:14.266"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231114 00:10:14.266" endtime="20231114 00:10:14.266"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.265" endtime="20231114 00:10:14.266"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231114 00:10:14.267" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231114 00:10:14.267" endtime="20231114 00:10:14.267"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.266" endtime="20231114 00:10:14.267"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231114 00:10:14.172" endtime="20231114 00:10:14.267"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20231114 00:10:14.268" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20231114 00:10:14.268" endtime="20231114 00:10:14.269"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.268" endtime="20231114 00:10:14.269"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20231114 00:10:14.369" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/llA58PC82HxY4f7G 
 path_url=/usuarios/llA58PC82HxY4f7G 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20231114 00:10:14.369" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/llA58PC82HxY4f7G 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'e7c6f388672b49943a9eb966333507bb', 'Date': 'Tue, 14 Nov 2023 00:10:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20231114 00:10:14.369" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.269" endtime="20231114 00:10:14.369"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20231114 00:10:14.370" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.369" endtime="20231114 00:10:14.370"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.269" endtime="20231114 00:10:14.370"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20231114 00:10:14.370" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231114 00:10:14.370" endtime="20231114 00:10:14.371"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231114 00:10:14.371" endtime="20231114 00:10:14.371"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.370" endtime="20231114 00:10:14.371"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20231114 00:10:14.372" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20231114 00:10:14.371" endtime="20231114 00:10:14.372"/>
</kw>
<status status="PASS" starttime="20231114 00:10:14.371" endtime="20231114 00:10:14.372"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20231114 00:10:14.268" endtime="20231114 00:10:14.372"/>
</test>
<status status="PASS" starttime="20231114 00:10:12.920" endtime="20231114 00:10:14.373"/>
</suite>
<status status="PASS" starttime="20231114 00:10:12.919" endtime="20231114 00:10:14.374"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231114 00:10:14.383" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231114 00:10:17.021" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231114 00:10:17.021" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x561f027fafb3 &lt;unknown&gt;
#1 0x561f024ce4a7 &lt;unknown&gt;
#2 0x561f02501c93 &lt;unknown&gt;
#3 0x561f024fe10c &lt;unknown&gt;
#4 0x561f02540ac6 &lt;unknown&gt;
#5 0x561f02537713 &lt;unknown&gt;
#6 0x561f0250a18b &lt;unknown&gt;
#7 0x561f0250af7e &lt;unknown&gt;
#8 0x561f027c08d8 &lt;unknown&gt;
#9 0x561f027c4800 &lt;unknown&gt;
#10 0x561f027cecfc &lt;unknown&gt;
#11 0x561f027c5418 &lt;unknown&gt;
#12 0x561f0279242f &lt;unknown&gt;
#13 0x561f027e94e8 &lt;unknown&gt;
#14 0x561f027e96b4 &lt;unknown&gt;
#15 0x561f027fa143 &lt;unknown&gt;
#16 0x7f89d2094ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231114 00:10:14.383" endtime="20231114 00:10:17.022"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231114 00:10:17.023" endtime="20231114 00:10:17.023"/>
</kw>
<status status="FAIL" starttime="20231114 00:10:14.382" endtime="20231114 00:10:17.023"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231114 00:10:17.023" endtime="20231114 00:10:17.024"/>
</kw>
<status status="PASS" starttime="20231114 00:10:17.023" endtime="20231114 00:10:17.024"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231114 00:10:14.382" endtime="20231114 00:10:17.024">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x561f027fafb3 &lt;unknown&gt;
#1 0x561f024ce4a7 &lt;unknown&gt;
#2 0x561f02501c93 &lt;unknown&gt;
#3 0x561f024fe10c &lt;unknown&gt;
#4 0x561f02540ac6 &lt;unknown&gt;
#5 0x561f02537713 &lt;unknown&gt;
#6 0x561f0250a18b &lt;unknown&gt;
#7 0x561f0250af7e &lt;unknown&gt;
#8 0x561f027c08d8 &lt;unknown&gt;
#9 0x561f027c4800 &lt;unknown&gt;
#10 0x561f027cecfc &lt;unknown&gt;
#11 0x561f027c5418 &lt;unknown&gt;
#12 0x561f0279242f &lt;unknown&gt;
#13 0x561f027e94e8 &lt;unknown&gt;
#14 0x561f027e96b4 &lt;unknown&gt;
#15 0x561f027fa143 &lt;unknown&gt;
#16 0x7f89d2094ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231114 00:10:17.025" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231114 00:10:17.694" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231114 00:10:17.694" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55bd51aa1fb3 &lt;unknown&gt;
#1 0x55bd517754a7 &lt;unknown&gt;
#2 0x55bd517a8c93 &lt;unknown&gt;
#3 0x55bd517a510c &lt;unknown&gt;
#4 0x55bd517e7ac6 &lt;unknown&gt;
#5 0x55bd517de713 &lt;unknown&gt;
#6 0x55bd517b118b &lt;unknown&gt;
#7 0x55bd517b1f7e &lt;unknown&gt;
#8 0x55bd51a678d8 &lt;unknown&gt;
#9 0x55bd51a6b800 &lt;unknown&gt;
#10 0x55bd51a75cfc &lt;unknown&gt;
#11 0x55bd51a6c418 &lt;unknown&gt;
#12 0x55bd51a3942f &lt;unknown&gt;
#13 0x55bd51a904e8 &lt;unknown&gt;
#14 0x55bd51a906b4 &lt;unknown&gt;
#15 0x55bd51aa1143 &lt;unknown&gt;
#16 0x7fc6f1a94ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231114 00:10:17.025" endtime="20231114 00:10:17.695"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231114 00:10:17.695" endtime="20231114 00:10:17.695"/>
</kw>
<status status="FAIL" starttime="20231114 00:10:17.025" endtime="20231114 00:10:17.695"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231114 00:10:17.696" endtime="20231114 00:10:17.696"/>
</kw>
<status status="PASS" starttime="20231114 00:10:17.695" endtime="20231114 00:10:17.696"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231114 00:10:17.024" endtime="20231114 00:10:17.696">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55bd51aa1fb3 &lt;unknown&gt;
#1 0x55bd517754a7 &lt;unknown&gt;
#2 0x55bd517a8c93 &lt;unknown&gt;
#3 0x55bd517a510c &lt;unknown&gt;
#4 0x55bd517e7ac6 &lt;unknown&gt;
#5 0x55bd517de713 &lt;unknown&gt;
#6 0x55bd517b118b &lt;unknown&gt;
#7 0x55bd517b1f7e &lt;unknown&gt;
#8 0x55bd51a678d8 &lt;unknown&gt;
#9 0x55bd51a6b800 &lt;unknown&gt;
#10 0x55bd51a75cfc &lt;unknown&gt;
#11 0x55bd51a6c418 &lt;unknown&gt;
#12 0x55bd51a3942f &lt;unknown&gt;
#13 0x55bd51a904e8 &lt;unknown&gt;
#14 0x55bd51a906b4 &lt;unknown&gt;
#15 0x55bd51aa1143 &lt;unknown&gt;
#16 0x7fc6f1a94ac3 &lt;unknown&gt;
</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20231114 00:10:17.698" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20231114 00:10:18.366" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20231114 00:10:18.366" level="FAIL">SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55e5a9321fb3 &lt;unknown&gt;
#1 0x55e5a8ff54a7 &lt;unknown&gt;
#2 0x55e5a9028c93 &lt;unknown&gt;
#3 0x55e5a902510c &lt;unknown&gt;
#4 0x55e5a9067ac6 &lt;unknown&gt;
#5 0x55e5a905e713 &lt;unknown&gt;
#6 0x55e5a903118b &lt;unknown&gt;
#7 0x55e5a9031f7e &lt;unknown&gt;
#8 0x55e5a92e78d8 &lt;unknown&gt;
#9 0x55e5a92eb800 &lt;unknown&gt;
#10 0x55e5a92f5cfc &lt;unknown&gt;
#11 0x55e5a92ec418 &lt;unknown&gt;
#12 0x55e5a92b942f &lt;unknown&gt;
#13 0x55e5a93104e8 &lt;unknown&gt;
#14 0x55e5a93106b4 &lt;unknown&gt;
#15 0x55e5a9321143 &lt;unknown&gt;
#16 0x7ffb53694ac3 &lt;unknown&gt;
</msg>
<status status="FAIL" starttime="20231114 00:10:17.697" endtime="20231114 00:10:18.366"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20231114 00:10:18.367" endtime="20231114 00:10:18.367"/>
</kw>
<status status="FAIL" starttime="20231114 00:10:17.697" endtime="20231114 00:10:18.367"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20231114 00:10:18.370" endtime="20231114 00:10:18.370"/>
</kw>
<status status="PASS" starttime="20231114 00:10:18.367" endtime="20231114 00:10:18.370"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20231114 00:10:17.696" endtime="20231114 00:10:18.370">Setup failed:
SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.
  (session not created: DevToolsActivePort file doesn't exist)
  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)
Stacktrace:
#0 0x55e5a9321fb3 &lt;unknown&gt;
#1 0x55e5a8ff54a7 &lt;unknown&gt;
#2 0x55e5a9028c93 &lt;unknown&gt;
#3 0x55e5a902510c &lt;unknown&gt;
#4 0x55e5a9067ac6 &lt;unknown&gt;
#5 0x55e5a905e713 &lt;unknown&gt;
#6 0x55e5a903118b &lt;unknown&gt;
#7 0x55e5a9031f7e &lt;unknown&gt;
#8 0x55e5a92e78d8 &lt;unknown&gt;
#9 0x55e5a92eb800 &lt;unknown&gt;
#10 0x55e5a92f5cfc &lt;unknown&gt;
#11 0x55e5a92ec418 &lt;unknown&gt;
#12 0x55e5a92b942f &lt;unknown&gt;
#13 0x55e5a93104e8 &lt;unknown&gt;
#14 0x55e5a93106b4 &lt;unknown&gt;
#15 0x55e5a9321143 &lt;unknown&gt;
#16 0x7ffb53694ac3 &lt;unknown&gt;
</status>
</test>
<status status="FAIL" starttime="20231114 00:10:14.376" endtime="20231114 00:10:18.371"/>
</suite>
<status status="FAIL" starttime="20231114 00:10:14.374" endtime="20231114 00:10:18.372"/>
</suite>
<status status="FAIL" starttime="20231114 00:10:12.902" endtime="20231114 00:10:18.373"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
