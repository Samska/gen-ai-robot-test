<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230609 01:13:51.734" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/test_api_users.robot">
<test id="s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 01:13:52.693" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 01:13:52.693" endtime="20230609 01:13:52.693"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.692" endtime="20230609 01:13:52.694"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 01:13:52.857" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 01:13:52.857" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'c4d8e447-6305-4dfb-9200-f2f6d6d0335e', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'dc4aef975ac1186f1db14ac98148b57d;o=1', 'Date': 'Fri, 09 Jun 2023 01:13:52 GMT', 'Server': 'Google Frontend', 'Content-Length': '81521'} 
 body={
    "quantidade": 369,
    "usuarios": [
        {
            "nome": "Miranda Schneider",
            "email": "Erich_Bergstrom@gmail.com",
            "password": "cafyf8BIPCcAgyn",
            "administrador": "true",
            "_id": "0DJZ8XeG2lXIyWII"
        },
        {
            "nome": "Geoffrey Nitzsche Sr.",
            "email": "Casimir.Pfannerstill57@hotmail.com",
            "password": "jZcxqWf1mkBd5Fm",
            "administrador": "true",
            "_id": "0H6vKZ6Z1EnTecmt"
        },
        {
            "nome": "Rick Bruen",
            "email": "Geovany_Shanahan87@hotmail.com",
            "password": "42hnL35_hln3EGM",
            "administrador": "true",
            "_id": "0MpUsddPaiomYslk"
        },
        {
            "nome": "Ricky Bechtelar",
            "email": "Stuart.Ryan@yahoo.com",
            "password": "Lky7bMzCeZ6YQzm",
            "administrador": "true",
            "_id": "0myeJPDwuUSUOvlT"
        },
        {
            "nome": "Estelle Hamill",
            "email": "Giovanni.Klein@hotmail.com",
            "password": "VF7Wyb7chCDswwq",
            "administrador": "true",
            "_id": "1BhfUsXBZtCihebQ"
        },
        {
            "nome": "Lewis Feil",
            "email": "Elta_Walker97@hotmail.com",
            "password": "Jd7zNORyPKMHDmw",
            "administrador": "true",
            "_id": "1JFVnsmi195fM72g"
        },
        {
            "nome": "Terence Barrows",
            "email": "Shaun.Volkman@example.com",
            "password": "gl4nwQWPW6PHenK",
            "administrador": "true",
            "_id": "1RhqgGRwyEUJnUb2"
        },
        {
            "nome": "Minnie Altenwerth",
            "email": "Vicenta1@yahoo.com",
            "password": "URRT1dIBS_eWqRH",
            "administrador": "true",
            "_id": "1UWkn9e2n2bT7G4v"
        },
        {
            "nome": "Sabrina Swift",
            "email": "Karson_Sporer@gmail.com",
            "password": "apZRDXlC5VZ7Mrx",
            "administrador": "true",
            "_id": "1hMm7F7OUuRFuURt"
        },
        {
            "nome": "Grant Effertz",
            "email": "Dina2@example.net",
            "password": "7BnWy6Ajcrdrpk9",
            "administrador": "true",
            "_id": "1wZ8evpFA2laX3uh"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "michael18@example.org",
            "password": "123456",
            "administrador": "true",
            "_id": "2Jdbt7ojLQEP5zFA"
        },
        {
            "nome": "Velma McDermott",
            "email": "Sherman.Kling58@example.com",
            "password": "TX5LH9sMMlCen2B",
            "administrador": "true",
            "_id": "2nsOhxcCo1iwvvcw"
        },
        {
            "nome": "Nelson Lynch",
            "email": "Kailee54@gmail.com",
            "password": "ok9y8JUuU4CJrhG",
            "administrador": "false",
            "_id": "330oYNqLifO2DHzU"
        },
        {
            "nome": "Dr. Amy Nienow",
            "email": "Cletus28@yahoo.com",
            "password": "MS7L4GoYVkt9J5B",
            "administrador": "true",
            "_id": "3Eq533KSUAmr6PZx"
        },
        {
            "nome": "Myra Raynor",
            "email": "Roselyn37@gmail.com",
            "password": "kFBwS6LwRu1itWD",
            "administrador": "true",
            "_id": "3XGRC2IY1fiHeqC0"
        },
        {
            "nome": "Annette Hoeger",
            "email": "Heloise.Turcotte41@example.org",
            "password": "jybfHGVj8uZFu0N",
            "administrador": "true",
            "_id": "401uSa4609jydVfO"
        },
        {
            "nome": "Terrence Luettgen",
            "email": "Dorian_Satterfield@yahoo.com",
            "password": "N4Tl_6ogKcwAmNM",
            "administrador": "true",
            "_id": "45Zs21POtpnGedV7"
        },
        {
            "nome": "Karen Bailey",
            "email": "Brent.Oberbrunner95@gmail.com",
            "password": "1NRvriMCOBFQXxa",
            "administrador": "true",
            "_id": "45ossMrGBrmvx5Ex"
        },
        {
            "nome": "Nelson Murazik",
            "email": "Diamond_Kirlin@example.org",
            "password": "Ymr4rMs4PqWI6gg",
            "administrador": "true",
            "_id": "4EIhyPZ40LhpsYwC"
        },
        {
            "nome": "Andy Klein",
            "email": "Tina70@hotmail.com",
            "password": "89haJRioph4BRxs",
            "administrador": "true",
            "_id": "4FFn8TKQVgWJ7Xo4"
        },
        {
            "nome": "Veronica Corkery",
            "email": "Shaniya.Lueilwitz@example.com",
            "password": "u3nSmMNxJsBTnkZ",
            "administrador": "true",
            "_id": "4TKMr9d3IkGEEf6n"
        },
        {
            "nome": "Faith Lockman",
            "email": "Carlo_DuBuque82@hotmail.com",
            "password": "9eDYovx3jN0qH7J",
            "administrador": "true",
            "_id": "4XTctOG6XtEYCgfX"
        },
        {
            "nome": "Micheal Daniel",
            "email": "Kellen_Swift@gmail.com",
            "password": "39eIQCnOuuX_5FM",
            "administrador": "true",
            "_id": "4a5sCNd3IvEs1vEo"
        },
        {
            "nome": "Rachael Renner Jr.",
            "email": "Leonora96@hotmail.com",
            "password": "qS9CR5gyaBVRCnX",
            "administrador": "true",
            "_id": "4m8UWd14nuTowC4Z"
        },
        {
            "nome": "Benny Zieme-Ryan",
            "email": "Barney.Funk21@hotmail.com",
            "password": "1wbAoh0H1K1mjsb",
            "administrador": "true",
            "_id": "5EnSO3nTanyPAydz"
        },
        {
            "nome": "Gretchen Price",
            "email": "Ramiro15@example.net",
            "password": "EK56FaRNd6i_oR9",
            "administrador": "true",
            "_id": "5IKkCOLrj1vhuKxY"
        },
        {
            "nome": "Myles Reichel",
            "email": "myles.reichel@email.com",
            "password": "zIUWGUY7Nr0VAIf",
            "administrador": "true",
            "_id": "5MhRHtWfj7FV0Q2G"
        },
        {
            "nome": "Sherry Mills",
            "email": "Isabell7@example.net",
            "password": "hwPiORUDT0tlOV7",
            "administrador": "true",
            "_id": "5ZWrlP47cvBLfEcZ"
        },
        {
            "nome": "Jackie Breitenberg Jr.",
            "email": "Taya_Kiehn@gmail.com",
            "password": "iiLqRrBAuwvIWUv",
            "administrador": "true",
            "_id": "5dqxJ4E2i4Qwebgo"
        },
        {
            "nome": "Rachel Witting",
            "email": "Tia_Nicolas21@hotmail.com",
            "password": "VETxCh6uzfAuZJm",
            "administrador": "false",
            "_id": "6KGOc3ISPwokSFuF"
        },
        {
            "nome": "Marty Jakubowski",
            "email": "Andreanne88@gmail.com",
            "password": "uxHOzgiYFYZJMa5",
            "administrador": "true",
            "_id": "6dSywwhoNY8x2Z5N"
        },
        {
            "nome": "William Schultz MD",
            "email": "Alaina.Harber@hotmail.com",
            "password": "b0RY_0Wev1OFK0u",
            "administrador": "true",
            "_id": "6j3esFcVZrBG8XDC"
        },
        {
            "nome": "Ralph Reichert",
            "email": "Wilma28@example.org",
            "password": "ZJ2QqqunJywWMvi",
            "administrador": "true",
            "_id": "71RmfeYi0gQNlRHD"
        },
        {
            "nome": "Jarrell Graham",
            "email": "jarrell.graham@email.com",
            "password": "OPwGCZ1abHJ7Cjh",
            "administrador": "true",
            "_id": "7PTsYi0VY9MkF7KA"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "stewartgloria@example.org",
            "password": "123456",
            "administrador": "true",
            "_id": "7a863qAs6QPmsDW5"
        },
        {
            "nome": "Cristiano Mothe",
            "email": "matthew28@example.com",
            "password": "123456",
            "administrador": "true",
            "_id": "85YzCtFMVSiYnNkM"
        },
        {
            "nome": "Roderick Howell",
            "email": "Reginald_Adams97@example.com",
            "password": "hu8Z0xz6262P_cu",
            "administrador": "true",
            "_id": "8EAHojidmq44iVgn"
        },
        {
            "nome": "Dr. Sabrina Wehner",
            "email": "Alisha.Baumbach@gmail.com",
            "password": "nGh8LfuCpFrvagK",
            "administrador": "false",
            "_id": "8mYxXIyAuSCXjTDO"
        },
        {
            "nome": "Jorge McGlynn",
            "email": "Hipolito.Hills43@gmail.com",
            "password": "jmCmUlOjl9BFNh2",
            "administrador": "true",
            "_id": "8uilhx23ncMM2N3f"
        },
        {
            "nome": "Colin Leannon",
            "email": "Hayden_Mraz65@gmail.com",
            "password": "hnF6qUysb_PX9fO",
            "administrador": "false",
            "_id": "8uqIHb3DDqmoUPqd"
        },
        {
            "nome": "Zena",
            "email": "ixin@mailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "902g21haK605ucus"
        },
        {
            "nome": "Kelly O'Conner",
            "email": "Durward_Bashirian@hotmail.com",
            "password": "95_AsDWTruo3Mbc",
            "administrador": "true",
            "_id": "90Noz3C62IEniplS"
        },
        {
            "nome": "Zena",
            "email": "tlgh@mailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "92V8vZ6dGESZmQOY"
        },
        {
            "nome": "Mayara Fernandes",
            "email": "shortbarbara@example.net",
            "password": "123456",
            "administrador": "true",
            "_id": "95dXwqJ1dh63I6N4"
        },
        {
            "nome": "Patsy Bernhard PhD",
            "email": "Jayda.Wil... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230609 01:13:52.858" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.694" endtime="20230609 01:13:52.858"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 01:13:52.859" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.858" endtime="20230609 01:13:52.859"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.694" endtime="20230609 01:13:52.859"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 01:13:52.860" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.859" endtime="20230609 01:13:52.860"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 01:13:52.860" endtime="20230609 01:13:52.862"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.859" endtime="20230609 01:13:52.862"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 01:13:52.864" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 01:13:52.863" endtime="20230609 01:13:52.864"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.862" endtime="20230609 01:13:52.864"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 01:13:52.691" endtime="20230609 01:13:52.864"/>
</test>
<test id="s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 01:13:52.866" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 01:13:52.866" endtime="20230609 01:13:52.866"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.865" endtime="20230609 01:13:52.866"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230609 01:13:52.867" level="INFO">${name} = Sean Brown</msg>
<status status="PASS" starttime="20230609 01:13:52.867" endtime="20230609 01:13:52.867"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230609 01:13:52.868" level="INFO">${email} = watkinschristy@example.com</msg>
<status status="PASS" starttime="20230609 01:13:52.867" endtime="20230609 01:13:52.868"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<arg>length=12</arg>
<arg>special_chars=False</arg>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230609 01:13:52.868" level="INFO">${password} = RjNxBKJgB925</msg>
<status status="PASS" starttime="20230609 01:13:52.868" endtime="20230609 01:13:52.868"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 01:13:52.869" level="INFO">${name} = Sean Brown</msg>
<status status="PASS" starttime="20230609 01:13:52.869" endtime="20230609 01:13:52.869"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 01:13:52.869" level="INFO">${email} = watkinschristy@example.com</msg>
<status status="PASS" starttime="20230609 01:13:52.869" endtime="20230609 01:13:52.869"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230609 01:13:52.870" level="INFO">${password} = RjNxBKJgB925</msg>
<status status="PASS" starttime="20230609 01:13:52.870" endtime="20230609 01:13:52.870"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.866" endtime="20230609 01:13:52.870"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 01:13:52.871" level="INFO">${payload} = {'nome': 'Sean Brown', 'email': 'watkinschristy@example.com', 'password': 'RjNxBKJgB925', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 01:13:52.870" endtime="20230609 01:13:52.871"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 01:13:52.871" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 01:13:52.871" endtime="20230609 01:13:52.871"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 01:13:52.943" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '115'} 
 body=b'{"nome": "Sean Brown", "email": "watkinschristy@example.com", "password": "RjNxBKJgB925", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 01:13:52.944" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '5af2503d-c0d7-45ae-b566-38e8f08f164a', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'f0c3cf9a7ebae101da6173c3dc64056d', 'Date': 'Fri, 09 Jun 2023 01:13:52 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "mJ81K2zdAigDQEJs"
} 
 </msg>
<msg timestamp="20230609 01:13:52.944" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.871" endtime="20230609 01:13:52.944"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230609 01:13:52.945" level="INFO">${user_id} = mJ81K2zdAigDQEJs</msg>
<status status="PASS" starttime="20230609 01:13:52.944" endtime="20230609 01:13:52.945"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230609 01:13:52.946" level="INFO">${USER_ID} = mJ81K2zdAigDQEJs</msg>
<status status="PASS" starttime="20230609 01:13:52.945" endtime="20230609 01:13:52.946"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 01:13:52.946" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.946" endtime="20230609 01:13:52.946"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.870" endtime="20230609 01:13:52.946"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 01:13:52.948" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.947" endtime="20230609 01:13:52.948"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 01:13:52.948" endtime="20230609 01:13:52.949"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.946" endtime="20230609 01:13:52.949"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 01:13:52.950" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230609 01:13:52.949" endtime="20230609 01:13:52.950"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.949" endtime="20230609 01:13:52.950"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 01:13:52.865" endtime="20230609 01:13:52.950"/>
</test>
<test id="s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="22">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 01:13:52.952" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 01:13:52.952" endtime="20230609 01:13:52.952"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.951" endtime="20230609 01:13:52.952"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 01:13:53.031" level="INFO">GET Request : url=https://serverest.dev/usuarios/mJ81K2zdAigDQEJs 
 path_url=/usuarios/mJ81K2zdAigDQEJs 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230609 01:13:53.031" level="INFO">GET Response : url=https://serverest.dev/usuarios/mJ81K2zdAigDQEJs 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'f781ff62-aaee-482c-97a4-09456f749cb9', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a5112a59e34b04cb2d2c777c1362be09', 'Date': 'Fri, 09 Jun 2023 01:13:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '164'} 
 body={
    "nome": "Sean Brown",
    "email": "watkinschristy@example.com",
    "password": "RjNxBKJgB925",
    "administrador": "false",
    "_id": "mJ81K2zdAigDQEJs"
} 
 </msg>
<msg timestamp="20230609 01:13:53.031" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:52.954" endtime="20230609 01:13:53.031"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 01:13:53.032" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.031" endtime="20230609 01:13:53.032"/>
</kw>
<status status="PASS" starttime="20230609 01:13:52.953" endtime="20230609 01:13:53.032"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 01:13:53.033" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.033" endtime="20230609 01:13:53.033"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 01:13:53.033" endtime="20230609 01:13:53.034"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.032" endtime="20230609 01:13:53.034"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 01:13:53.036" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230609 01:13:53.035" endtime="20230609 01:13:53.036"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.035" endtime="20230609 01:13:53.036"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 01:13:52.951" endtime="20230609 01:13:53.036"/>
</test>
<test id="s1-s1-s1-t4" name="Scenario: Update the created user" line="28">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 01:13:53.038" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 01:13:53.037" endtime="20230609 01:13:53.038"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.037" endtime="20230609 01:13:53.038"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 01:13:53.039" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230609 01:13:53.039" endtime="20230609 01:13:53.039"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230609 01:13:53.040" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230609 01:13:53.039" endtime="20230609 01:13:53.040"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 01:13:53.116" level="INFO">PUT Request : url=https://serverest.dev/usuarios/mJ81K2zdAigDQEJs 
 path_url=/usuarios/mJ81K2zdAigDQEJs 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230609 01:13:53.116" level="INFO">PUT Response : url=https://serverest.dev/usuarios/mJ81K2zdAigDQEJs 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'b6de7462-5e46-4324-b4e0-31385095abb2', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '0f8256a207809a44a8a5eabaa77c6135', 'Date': 'Fri, 09 Jun 2023 01:13:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230609 01:13:53.116" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.040" endtime="20230609 01:13:53.116"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 01:13:53.117" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.116" endtime="20230609 01:13:53.117"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.038" endtime="20230609 01:13:53.117"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 01:13:53.118" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.118" endtime="20230609 01:13:53.119"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 01:13:53.119" endtime="20230609 01:13:53.119"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.117" endtime="20230609 01:13:53.120"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 01:13:53.121" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 01:13:53.120" endtime="20230609 01:13:53.121"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.120" endtime="20230609 01:13:53.121"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 01:13:53.037" endtime="20230609 01:13:53.122"/>
</test>
<test id="s1-s1-s1-t5" name="Scenario: Delete the created user" line="34">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230609 01:13:53.124" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230609 01:13:53.123" endtime="20230609 01:13:53.124"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.123" endtime="20230609 01:13:53.124"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230609 01:13:53.203" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/mJ81K2zdAigDQEJs 
 path_url=/usuarios/mJ81K2zdAigDQEJs 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230609 01:13:53.203" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/mJ81K2zdAigDQEJs 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '75b7cac4-fc59-4028-893e-31d88e19c3a8', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '8e856e6db4b91d465d9d1dcc4465a5f1', 'Date': 'Fri, 09 Jun 2023 01:13:53 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230609 01:13:53.204" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.125" endtime="20230609 01:13:53.204"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230609 01:13:53.205" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.204" endtime="20230609 01:13:53.205"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.124" endtime="20230609 01:13:53.205"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230609 01:13:53.207" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230609 01:13:53.206" endtime="20230609 01:13:53.208"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230609 01:13:53.208" endtime="20230609 01:13:53.208"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.205" endtime="20230609 01:13:53.209"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230609 01:13:53.210" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230609 01:13:53.209" endtime="20230609 01:13:53.210"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.209" endtime="20230609 01:13:53.210"/>
</kw>
<tag>api</tag>
<status status="PASS" starttime="20230609 01:13:53.122" endtime="20230609 01:13:53.210"/>
</test>
<status status="PASS" starttime="20230609 01:13:51.759" endtime="20230609 01:13:53.211"/>
</suite>
<status status="PASS" starttime="20230609 01:13:51.757" endtime="20230609 01:13:53.213"/>
</suite>
<suite id="s1-s2" name="E2E" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e">
<suite id="s1-s2-s1" name="Test Ui Signup" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/e2e/test_ui_signup.robot">
<test id="s1-s2-s1-t1" name="Scenario: Signup with empty fields" line="10">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 01:13:53.226" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 01:13:53.226" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 01:13:53.226" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 01:13:53.225" endtime="20230609 01:13:53.227"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 01:13:53.227" endtime="20230609 01:13:53.227"/>
</kw>
<status status="FAIL" starttime="20230609 01:13:53.224" endtime="20230609 01:13:53.228"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 01:13:53.228" endtime="20230609 01:13:53.229"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.228" endtime="20230609 01:13:53.229"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 01:13:53.224" endtime="20230609 01:13:53.229">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t2" name="Scenario: Signup done successfully" line="16">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 01:13:53.232" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 01:13:53.232" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 01:13:53.232" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 01:13:53.231" endtime="20230609 01:13:53.232"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 01:13:53.232" endtime="20230609 01:13:53.232"/>
</kw>
<status status="FAIL" starttime="20230609 01:13:53.230" endtime="20230609 01:13:53.233"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 01:13:53.233" endtime="20230609 01:13:53.233"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.233" endtime="20230609 01:13:53.233"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 01:13:53.229" endtime="20230609 01:13:53.233">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<test id="s1-s2-s1-t3" name="Scenario: Signup with already used email" line="23">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${HEADLESS} ${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230609 01:13:53.235" level="INFO">Opening browser 'headless Chrome' to base url 'https://front.serverest.dev/'.</msg>
<msg timestamp="20230609 01:13:53.235" level="INFO">Cannot capture screenshot because no browser is open.</msg>
<msg timestamp="20230609 01:13:53.236" level="FAIL">TypeError: __init__() got an unexpected keyword argument 'service_log_path'</msg>
<status status="FAIL" starttime="20230609 01:13:53.235" endtime="20230609 01:13:53.236"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="NOT RUN" starttime="20230609 01:13:53.236" endtime="20230609 01:13:53.236"/>
</kw>
<status status="FAIL" starttime="20230609 01:13:53.234" endtime="20230609 01:13:53.236"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230609 01:13:53.237" endtime="20230609 01:13:53.237"/>
</kw>
<status status="PASS" starttime="20230609 01:13:53.236" endtime="20230609 01:13:53.237"/>
</kw>
<tag>e2e</tag>
<status status="FAIL" starttime="20230609 01:13:53.234" endtime="20230609 01:13:53.237">Setup failed:
TypeError: __init__() got an unexpected keyword argument 'service_log_path'</status>
</test>
<status status="FAIL" starttime="20230609 01:13:53.215" endtime="20230609 01:13:53.237"/>
</suite>
<status status="FAIL" starttime="20230609 01:13:53.213" endtime="20230609 01:13:53.238"/>
</suite>
<status status="FAIL" starttime="20230609 01:13:51.735" endtime="20230609 01:13:53.239"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="3" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="5" fail="0" skip="0">api</stat>
<stat pass="0" fail="3" skip="0">e2e</stat>
</tag>
<suite>
<stat pass="5" fail="3" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Test Api Users">Tests.Api.Test Api Users</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2" name="E2E">Tests.E2E</stat>
<stat pass="0" fail="3" skip="0" id="s1-s2-s1" name="Test Ui Signup">Tests.E2E.Test Ui Signup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
