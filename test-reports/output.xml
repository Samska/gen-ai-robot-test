<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.8.16 on linux)" generated="20230413 17:36:02.155" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests">
<suite id="s1-s1" name="Api" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api">
<suite id="s1-s1-s1" name="Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="/home/runner/work/gen-ai-robot-test/gen-ai-robot-test/tests/api/users/test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:36:02.770" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:36:02.770" endtime="20230413 17:36:02.771"/>
</kw>
<status status="PASS" starttime="20230413 17:36:02.769" endtime="20230413 17:36:02.771"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:36:03.027" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:36:03.027" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'fa891b40-4111-4c74-990a-c073ab604723', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '048deec3768135db5ba87673b9e93b3f;o=1', 'Date': 'Thu, 13 Apr 2023 17:36:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '8558'} 
 body={
    "quantidade": 40,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "beltrano@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "1I5MtFIUIIOY5fV8"
        },
        {
            "nome": "Windows da Silva",
            "email": "ipqxei@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "2JhTk8dSFIFe8lH6"
        },
        {
            "nome": "aaa",
            "email": "bbb@hotmail.com",
            "password": "teste",
            "administrador": "true",
            "_id": "2Lp5Uq7pDHUbBffY"
        },
        {
            "nome": "Beth Ratke",
            "email": "stacy@osinski-osinski.info",
            "password": "teste",
            "administrador": "true",
            "_id": "71wWcZo3ezwrC3Cr"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ppfv@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "9mIJVW1Ol7xedZFs"
        },
        {
            "nome": "Fulano da Silva",
            "email": "pxwc@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "APyHOugT42PmdOBJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "mvsc@qa.com.br",
            "password": "teste",
            "administrador": "true",
            "_id": "FxBMCLty8jySZP22"
        },
        {
            "nome": "Fulano da Silva",
            "email": "vasm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "GCpN2ihUBADVFECo"
        },
        {
            "nome": "Fulano da Silva",
            "email": "juvo@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "H7CG5GTrfZj2tn96"
        },
        {
            "nome": "Delma Welch",
            "email": "jermaine@rodriguez.com",
            "password": "teste",
            "administrador": "true",
            "_id": "IJG76Lf2CDJbbMsw"
        },
        {
            "nome": "Fulano da Silva",
            "email": "xisn@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "IPaJtKGqg7LbtiU8"
        },
        {
            "nome": "Fulano da Silva",
            "email": "jlnp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "J3UFFE8BkXHPl98Q"
        },
        {
            "nome": "Erasmo Greenfelder",
            "email": "gary@green.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "L9YvsBccf96rb0IJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "dvrb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "LbqHhFaMoMXgzH6e"
        },
        {
            "nome": "batata",
            "email": "hayden_steuber@cartwright.info",
            "password": "teste",
            "administrador": "true",
            "_id": "MFX1zgBTAv3RdyAw"
        },
        {
            "nome": "Fulano da Silva",
            "email": "gzmi@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "MVIuW7YbJau8fYqf"
        },
        {
            "nome": "Twila Hessel",
            "email": "derek@frami-huel.info",
            "password": "teste",
            "administrador": "true",
            "_id": "VkpCmTunrhycBbfW"
        },
        {
            "nome": "Fulano da Silva",
            "email": "crhp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "WaqzREFowvCuPHI4"
        },
        {
            "nome": "Windows da Silva",
            "email": "fslffc@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "XTwLaV0XfRxVQhUW"
        },
        {
            "nome": "Fulano da Silva",
            "email": "evlw@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "XgZqO6TvbkxB0ZiZ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "slqa@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "ZDWAI2kyN4JNLHdV"
        },
        {
            "nome": "Keshia Sanford",
            "email": "antonio_gleason@abbott.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "ZsGL8uPkee6KhzCc"
        },
        {
            "nome": "Fulano da Silva",
            "email": "qrzm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "dBt5B3uvz6v6XJ1Y"
        },
        {
            "nome": "Windows da Silva",
            "email": "guiwtc@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "dYbAWCLodZs9INI4"
        },
        {
            "nome": "Keisha Witting",
            "email": "alexandra.jakubowski@hirthe-wisoky.org",
            "password": "teste",
            "administrador": "true",
            "_id": "gUKn5J99Pi2FaKPZ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "yrim@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "iHBbR39t0ubzjbPq"
        },
        {
            "nome": "Windows da Silva",
            "email": "lliebv@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "iv23MKIg4gCOCuqE"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Abbigail.Purdy@example.org",
            "password": "teste",
            "administrador": "true",
            "_id": "jTe7D7OVhdK0Ggsf"
        },
        {
            "nome": "Basil Renner",
            "email": "valentin_heathcote@parisian.com",
            "password": "teste",
            "administrador": "true",
            "_id": "kiqxPiLVa1rvPRw7"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ywal@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "lFKFtZbCGJwdqrRd"
        },
        {
            "nome": "Windows da Silva",
            "email": "mdjicj@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "lMuS9y6b6CMlz4WM"
        },
        {
            "nome": "Windows da Silva",
            "email": "mwgrlo@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "oiVWYW5KdkaZHGsH"
        },
        {
            "nome": "Fulano da Silva",
            "email": "gfdb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "qIVGM0GTgQJH34nw"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ryhm@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "qjFxff4MfEXkeiSE"
        },
        {
            "nome": "Fulano da Silva",
            "email": "frjr@emailteste.com",
            "password": "teste1234",
            "administrador": "true",
            "_id": "r6z0GKciHu02XnEd"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Carlee_Shields@example.com",
            "password": "teste",
            "administrador": "true",
            "_id": "vB7VATGIp6u1ay9w"
        },
        {
            "nome": "Fulano da Silva",
            "email": "orpn@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "wQFiz8g2ElHHEhEp"
        },
        {
            "nome": "Fulano da Silva",
            "email": "vzbu@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "xZQopWhTnUVxXmYv"
        },
        {
            "nome": "Jamey Wilkinson I",
            "email": "gary@okon-ratke.biz",
            "password": "teste",
            "administrador": "false",
            "_id": "yonFUppR1mA1rN3E"
        }
    ]
} 
 </msg>
<msg timestamp="20230413 17:36:03.028" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:02.771" endtime="20230413 17:36:03.028"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:36:03.028" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.028" endtime="20230413 17:36:03.028"/>
</kw>
<status status="PASS" starttime="20230413 17:36:02.771" endtime="20230413 17:36:03.029"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:36:03.030" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.029" endtime="20230413 17:36:03.030"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:36:03.030" endtime="20230413 17:36:03.031"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.029" endtime="20230413 17:36:03.031"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:36:03.033" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230413 17:36:03.032" endtime="20230413 17:36:03.033"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.031" endtime="20230413 17:36:03.033"/>
</kw>
<status status="PASS" starttime="20230413 17:36:02.768" endtime="20230413 17:36:03.033"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:36:03.035" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:36:03.034" endtime="20230413 17:36:03.035"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.034" endtime="20230413 17:36:03.035"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230413 17:36:03.036" level="INFO">${name} = Thomas Jackson</msg>
<status status="PASS" starttime="20230413 17:36:03.035" endtime="20230413 17:36:03.036"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230413 17:36:03.037" level="INFO">${email} = john41@example.org</msg>
<status status="PASS" starttime="20230413 17:36:03.037" endtime="20230413 17:36:03.037"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230413 17:36:03.037" level="INFO">${password} = l$yP97Ag^v</msg>
<status status="PASS" starttime="20230413 17:36:03.037" endtime="20230413 17:36:03.037"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:36:03.038" level="INFO">${name} = Thomas Jackson</msg>
<status status="PASS" starttime="20230413 17:36:03.038" endtime="20230413 17:36:03.038"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:36:03.038" level="INFO">${email} = john41@example.org</msg>
<status status="PASS" starttime="20230413 17:36:03.038" endtime="20230413 17:36:03.038"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230413 17:36:03.039" level="INFO">${password} = l$yP97Ag^v</msg>
<status status="PASS" starttime="20230413 17:36:03.039" endtime="20230413 17:36:03.039"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.035" endtime="20230413 17:36:03.039"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:36:03.040" level="INFO">${payload} = {'nome': 'Thomas Jackson', 'email': 'john41@example.org', 'password': 'l$yP97Ag^v', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230413 17:36:03.040" endtime="20230413 17:36:03.040"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:36:03.041" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230413 17:36:03.041" endtime="20230413 17:36:03.041"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:36:03.138" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '109'} 
 body=b'{"nome": "Thomas Jackson", "email": "john41@example.org", "password": "l$yP97Ag^v", "administrador": "false"}' 
 </msg>
<msg timestamp="20230413 17:36:03.138" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '3079a46f-4411-4f64-89ad-0584c94f05bf', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'd46823b078acdabb9deb54005e7417fa', 'Date': 'Thu, 13 Apr 2023 17:36:03 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "j2LOigyj5HRpVp6C"
} 
 </msg>
<msg timestamp="20230413 17:36:03.138" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.041" endtime="20230413 17:36:03.138"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230413 17:36:03.139" level="INFO">${user_id} = j2LOigyj5HRpVp6C</msg>
<status status="PASS" starttime="20230413 17:36:03.138" endtime="20230413 17:36:03.139"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230413 17:36:03.140" level="INFO">${USER_ID} = j2LOigyj5HRpVp6C</msg>
<status status="PASS" starttime="20230413 17:36:03.139" endtime="20230413 17:36:03.140"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:36:03.140" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.140" endtime="20230413 17:36:03.140"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.039" endtime="20230413 17:36:03.141"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:36:03.142" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.141" endtime="20230413 17:36:03.142"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:36:03.142" endtime="20230413 17:36:03.143"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.141" endtime="20230413 17:36:03.143"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:36:03.144" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230413 17:36:03.143" endtime="20230413 17:36:03.144"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.143" endtime="20230413 17:36:03.144"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.033" endtime="20230413 17:36:03.145"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="21">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:36:03.146" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:36:03.146" endtime="20230413 17:36:03.146"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.145" endtime="20230413 17:36:03.147"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:36:03.251" level="INFO">GET Request : url=https://serverest.dev/usuarios/j2LOigyj5HRpVp6C 
 path_url=/usuarios/j2LOigyj5HRpVp6C 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:36:03.252" level="INFO">GET Response : url=https://serverest.dev/usuarios/j2LOigyj5HRpVp6C 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'dd3e8f72-295f-4791-a962-e161930eae2c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '30c1144719b40157743c595f041550b5', 'Date': 'Thu, 13 Apr 2023 17:36:03 GMT', 'Server': 'Google Frontend', 'Content-Length': '158'} 
 body={
    "nome": "Thomas Jackson",
    "email": "john41@example.org",
    "password": "l$yP97Ag^v",
    "administrador": "false",
    "_id": "j2LOigyj5HRpVp6C"
} 
 </msg>
<msg timestamp="20230413 17:36:03.252" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.147" endtime="20230413 17:36:03.252"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:36:03.253" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.252" endtime="20230413 17:36:03.253"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.147" endtime="20230413 17:36:03.253"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:36:03.254" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.253" endtime="20230413 17:36:03.254"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:36:03.254" endtime="20230413 17:36:03.255"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.253" endtime="20230413 17:36:03.255"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:36:03.256" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230413 17:36:03.256" endtime="20230413 17:36:03.257"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.255" endtime="20230413 17:36:03.257"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.145" endtime="20230413 17:36:03.257"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="26">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:36:03.258" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:36:03.258" endtime="20230413 17:36:03.259"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.258" endtime="20230413 17:36:03.259"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:36:03.260" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230413 17:36:03.260" endtime="20230413 17:36:03.260"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230413 17:36:03.260" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230413 17:36:03.260" endtime="20230413 17:36:03.261"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:36:03.356" level="INFO">PUT Request : url=https://serverest.dev/usuarios/j2LOigyj5HRpVp6C 
 path_url=/usuarios/j2LOigyj5HRpVp6C 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230413 17:36:03.356" level="INFO">PUT Response : url=https://serverest.dev/usuarios/j2LOigyj5HRpVp6C 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '5132cc0a-bc27-4da4-b199-f89461c013b6', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '7ac4a0803eec47a087f81e227daeb0bc', 'Date': 'Thu, 13 Apr 2023 17:36:03 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230413 17:36:03.357" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.261" endtime="20230413 17:36:03.357"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:36:03.357" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.357" endtime="20230413 17:36:03.357"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.259" endtime="20230413 17:36:03.357"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:36:03.359" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.358" endtime="20230413 17:36:03.359"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:36:03.359" endtime="20230413 17:36:03.360"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.358" endtime="20230413 17:36:03.360"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:36:03.361" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230413 17:36:03.360" endtime="20230413 17:36:03.361"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.360" endtime="20230413 17:36:03.361"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.257" endtime="20230413 17:36:03.362"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="31">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230413 17:36:03.365" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230413 17:36:03.365" endtime="20230413 17:36:03.365"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.364" endtime="20230413 17:36:03.366"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230413 17:36:03.461" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/j2LOigyj5HRpVp6C 
 path_url=/usuarios/j2LOigyj5HRpVp6C 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230413 17:36:03.461" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/j2LOigyj5HRpVp6C 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '1ddf9928-75da-4915-bcb3-c0ff3c208765', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '455ff9d840015238a34e5527102302f5', 'Date': 'Thu, 13 Apr 2023 17:36:03 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230413 17:36:03.461" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.366" endtime="20230413 17:36:03.461"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230413 17:36:03.462" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.461" endtime="20230413 17:36:03.462"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.366" endtime="20230413 17:36:03.462"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230413 17:36:03.463" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230413 17:36:03.462" endtime="20230413 17:36:03.463"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230413 17:36:03.464" endtime="20230413 17:36:03.464"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.462" endtime="20230413 17:36:03.464"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230413 17:36:03.465" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230413 17:36:03.465" endtime="20230413 17:36:03.466"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.464" endtime="20230413 17:36:03.466"/>
</kw>
<status status="PASS" starttime="20230413 17:36:03.362" endtime="20230413 17:36:03.466"/>
</test>
<status status="PASS" starttime="20230413 17:36:02.200" endtime="20230413 17:36:03.466"/>
</suite>
<status status="PASS" starttime="20230413 17:36:02.198" endtime="20230413 17:36:03.468"/>
</suite>
<status status="PASS" starttime="20230413 17:36:02.196" endtime="20230413 17:36:03.469"/>
</suite>
<status status="PASS" starttime="20230413 17:36:02.156" endtime="20230413 17:36:03.470"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
