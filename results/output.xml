<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.3 on win32)" generated="20230411 22:14:01.749" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests">
<suite id="s1-s1" name="Api" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api">
<suite id="s1-s1-s1" name="Users" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api\users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api\users\test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230411 22:14:02.506" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230411 22:14:02.506" endtime="20230411 22:14:02.506"/>
</kw>
<status status="PASS" starttime="20230411 22:14:02.505" endtime="20230411 22:14:02.506"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230411 22:14:03.110" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230411 22:14:03.110" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '965bb00c-83e8-4b16-8f42-c08e06dc9a7c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '303b2605adceb9d6d1a45bfe23f4cef9;o=1', 'Date': 'Wed, 12 Apr 2023 01:14:00 GMT', 'Server': 'Google Frontend', 'Content-Length': '105983'} 
 body={
    "quantidade": 494,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "bjdl@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0PpromcJDODpPvlN"
        },
        {
            "nome": "Fulano da Silva",
            "email": "hrcr@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0Udg679QVidT6GND"
        },
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Fulano da Silva",
            "email": "srxp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "0vj4pKemU50eCZj9"
        },
        {
            "nome": "Anthony",
            "email": "malu.teles@gmail.com",
            "password": "xoilmhf57np",
            "administrador": "true",
            "_id": "0zkctypO30o3SJ3M"
        },
        {
            "nome": "Fulano da Silva",
            "email": "yfqi@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "1BEKKowEWRSQPT7x"
        },
        {
            "nome": "Fulano da Silva",
            "email": "lwme@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "1FOLkuslm9pQDHST"
        },
        {
            "nome": "Fulano da Silva",
            "email": "gqro@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "1cs5QukyhF9LmOf8"
        },
        {
            "nome": "Fulano da Silva",
            "email": "lezo@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "1jPvt4ELHx3AFW5b"
        },
        {
            "password": "0p7l6gk2",
            "administrador": "true",
            "nome": "Thiago",
            "email": "perola.aguiar@bol.com.br",
            "_id": "1ltEPgqzZksOxNaB"
        },
        {
            "nome": "Gov. Fernando McCullough",
            "email": "pauletta@luettgen.com",
            "password": "teste",
            "administrador": "true",
            "_id": "1m08oMoLUVBjJlgC"
        },
        {
            "nome": "ABC",
            "email": "abc@qa.com.br",
            "password": "abc",
            "administrador": "true",
            "_id": "29E0OKVwIWSwr0OO"
        },
        {
            "nome": "Fulano da Silva",
            "email": "czzp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2BZ7gIQFg6gxNJ8F"
        },
        {
            "nome": "Fulano da Silva",
            "email": "lmwp@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2MZwHDwAEa6nfYlC"
        },
        {
            "nome": "Fulano da Silva",
            "email": "wysy@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2SE6gnrSA0yOYIMQ"
        },
        {
            "nome": "Maria Laura",
            "email": "barbara.viana@bol.com.br",
            "password": "4acgmgekrq4ge",
            "administrador": "true",
            "_id": "2YZBf3h5pfKMkAXB"
        },
        {
            "nome": "Núbia",
            "email": "rafaela.melo@live.com",
            "password": "putdousuario",
            "administrador": "true",
            "_id": "2bOMr3BCaTwZosVF"
        },
        {
            "nome": "João Miguel",
            "email": "heloisa.reis@gmail.com",
            "password": "vwoug5eovcqa",
            "administrador": "true",
            "_id": "2fp6mHoP0n2xwo2j"
        },
        {
            "nome": "Fulano da Silva",
            "email": "kswt@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "2vaWEMyWflstfhMz"
        },
        {
            "nome": "Fulano da Silva",
            "email": "zxej@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "31W0STMLjSpvxkdP"
        },
        {
            "nome": "Fulano da Silva",
            "email": "lktb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "3FbUODTOm4xrR1J8"
        },
        {
            "nome": "Fulano da Silva",
            "email": "wocz@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "3pYMdZrkpHZPsmVm"
        },
        {
            "password": "tmsr11tn7h",
            "administrador": "true",
            "nome": "Enzo Gabriel",
            "email": "alessandro.aguiar@live.com",
            "_id": "3wQWWCU3tWRVTl3f"
        },
        {
            "nome": "Márcio",
            "email": "mariaisis.teles@bol.com.br",
            "password": "o3x0fkv0ep9kh",
            "administrador": "true",
            "_id": "499pOAIODpfzGmuD"
        },
        {
            "nome": "Fulano da Silva",
            "email": "pyeb@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4B24wtM9lc8psk5G"
        },
        {
            "nome": "Johnie Jenkins",
            "email": "an@rolfson.name",
            "password": "uKasKvTvGiU",
            "administrador": "true",
            "_id": "4H8OLul7B5cVd1zr"
        },
        {
            "nome": "Luiza",
            "email": "henrique.madeira@live.com",
            "password": "pgryz72ww94mkd",
            "administrador": "true",
            "_id": "4P32iiZvpRtgMHWR"
        },
        {
            "nome": "Benício",
            "email": "anajulia.camacho@bol.com.br",
            "password": "1lu0lt6b6t8z48",
            "administrador": "true",
            "_id": "4ZGnZfZpfGEGOLBb"
        },
        {
            "nome": "Fulano da Silva",
            "email": "zsiz@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4k4Bmxbgkc1gtpUk"
        },
        {
            "nome": "Luiz Felipe",
            "email": "luan.darocha@hotmail.com",
            "password": "epo0hpu8i",
            "administrador": "true",
            "_id": "4tbargjUQdVHGA4X"
        },
        {
            "nome": "João Lucas",
            "email": "luizfelipe.assumpcao@live.com",
            "password": "jyrs6dz0w",
            "administrador": "true",
            "_id": "567I2fEwUclPWgjs"
        },
        {
            "nome": "Antonella",
            "email": "erick.guterres@bol.com.br",
            "password": "3i99u5gxfu",
            "administrador": "true",
            "_id": "57zUg2SJksqtF5yj"
        },
        {
            "nome": "Clara",
            "email": "ian.rodrigues@gmail.com",
            "password": "wsxr6jo51",
            "administrador": "true",
            "_id": "5St8jhOwVhfQ1jC8"
        },
        {
            "nome": "Fulano da Silva",
            "email": "mbvq@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5WLUmqef4Elr8OUa"
        },
        {
            "nome": "Fulano da Silva",
            "email": "cbue@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5Xm9WGzgXgWjYIQu"
        },
        {
            "nome": "Fulano da Silva",
            "email": "sedc@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5oSCyACxxcvSbnmp"
        },
        {
            "nome": "Fulano da Silva",
            "email": "ttou@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5rxAeMzv6ehYAbAc"
        },
        {
            "nome": "Fulano da Silva",
            "email": "abba@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "5wxRUqaX3OmiPHni"
        },
        {
            "password": "cqrl0abgoov6zz",
            "administrador": "true",
            "nome": "Benjamin",
            "email": "sophia.crespo@hotmail.com",
            "_id": "6G4M2UInyWiL3P76"
        },
        {
            "nome": "batata",
            "email": "rudolph@powlowski-satterfield.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "6LW9EApWxw7gzR0W"
        },
        {
            "nome": "Fulano da Silva",
            "email": "wbqf@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "6e4R97T6vCbmVTAO"
        },
        {
            "password": "hffpzvyo1bt",
            "administrador": "true",
            "nome": "Theo",
            "email": "daniel.lima@yahoo.com",
            "_id": "7EXt5F7ysO9HLJ36"
        },
        {
            "nome": "João Pedro",
            "email": "clara.ferraco@live.com",
            "password": "jef8ce7p",
            "administrador": "true",
            "_id": "7MHLYqxNS32mWNpV"
        },
        {
            "nome": "Fulano da Silva",
            "email": "phie@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "7MYYMJYwt8peInsM"
        },
        {
            "nome": "Fulano da Silva",
            "email": "kptx@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "7W2JP9Ifybo601oJ"
        },
        {
            "nome": "Fulano da Silva",
            "email": "daep@emailteste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "7WQXSSnu5V3mzetu"
        },
        {
            "nome": "Isaac",
            "email": "analuiza.raia@live.com",
            "password": "13qn939zzjbk0",
            "administrador": "true",
           ... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230411 22:14:03.111" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:02.507" endtime="20230411 22:14:03.111"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230411 22:14:03.111" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:03.111" endtime="20230411 22:14:03.111"/>
</kw>
<status status="PASS" starttime="20230411 22:14:02.507" endtime="20230411 22:14:03.111"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="The response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230411 22:14:03.114" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230411 22:14:03.113" endtime="20230411 22:14:03.114"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230411 22:14:03.114" endtime="20230411 22:14:03.115"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.113" endtime="20230411 22:14:03.115"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230411 22:14:03.117" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230411 22:14:03.116" endtime="20230411 22:14:03.117"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.116" endtime="20230411 22:14:03.118"/>
</kw>
<status status="PASS" starttime="20230411 22:14:02.502" endtime="20230411 22:14:03.118"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="14">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230411 22:14:03.123" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230411 22:14:03.123" endtime="20230411 22:14:03.124"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.123" endtime="20230411 22:14:03.124"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230411 22:14:03.125" level="INFO">${name} = Alexandra Gutierrez</msg>
<status status="PASS" starttime="20230411 22:14:03.124" endtime="20230411 22:14:03.125"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230411 22:14:03.125" level="INFO">${email} = ohunter@example.com</msg>
<status status="PASS" starttime="20230411 22:14:03.125" endtime="20230411 22:14:03.125"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230411 22:14:03.125" level="INFO">${password} = ^yNJeImsP5</msg>
<status status="PASS" starttime="20230411 22:14:03.125" endtime="20230411 22:14:03.125"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230411 22:14:03.125" level="INFO">${name} = Alexandra Gutierrez</msg>
<status status="PASS" starttime="20230411 22:14:03.125" endtime="20230411 22:14:03.126"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230411 22:14:03.126" level="INFO">${email} = ohunter@example.com</msg>
<status status="PASS" starttime="20230411 22:14:03.126" endtime="20230411 22:14:03.126"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230411 22:14:03.126" level="INFO">${password} = ^yNJeImsP5</msg>
<status status="PASS" starttime="20230411 22:14:03.126" endtime="20230411 22:14:03.126"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.124" endtime="20230411 22:14:03.126"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230411 22:14:03.128" level="INFO">${payload} = {'nome': 'Alexandra Gutierrez', 'email': 'ohunter@example.com', 'password': '^yNJeImsP5', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230411 22:14:03.127" endtime="20230411 22:14:03.128"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230411 22:14:03.128" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230411 22:14:03.128" endtime="20230411 22:14:03.128"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230411 22:14:03.707" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '115'} 
 body=b'{"nome": "Alexandra Gutierrez", "email": "ohunter@example.com", "password": "^yNJeImsP5", "administrador": "false"}' 
 </msg>
<msg timestamp="20230411 22:14:03.707" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '0159ba13-dbc0-4d5c-9235-441e43b501c5', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '0033926deadb9a7f9df930f4ff8174ee', 'Date': 'Wed, 12 Apr 2023 01:14:01 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "YCwUPD9iUx1HvCsZ"
} 
 </msg>
<msg timestamp="20230411 22:14:03.707" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:03.128" endtime="20230411 22:14:03.707"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230411 22:14:03.708" level="INFO">${user_id} = YCwUPD9iUx1HvCsZ</msg>
<status status="PASS" starttime="20230411 22:14:03.708" endtime="20230411 22:14:03.708"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230411 22:14:03.708" level="INFO">${USER_ID} = YCwUPD9iUx1HvCsZ</msg>
<status status="PASS" starttime="20230411 22:14:03.708" endtime="20230411 22:14:03.709"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230411 22:14:03.709" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:03.709" endtime="20230411 22:14:03.709"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.127" endtime="20230411 22:14:03.709"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="The response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230411 22:14:03.712" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230411 22:14:03.711" endtime="20230411 22:14:03.712"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230411 22:14:03.712" endtime="20230411 22:14:03.713"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.711" endtime="20230411 22:14:03.713"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230411 22:14:03.717" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230411 22:14:03.717" endtime="20230411 22:14:03.717"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.716" endtime="20230411 22:14:03.717"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.122" endtime="20230411 22:14:03.718"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="20">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230411 22:14:03.719" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230411 22:14:03.719" endtime="20230411 22:14:03.720"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.719" endtime="20230411 22:14:03.720"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230411 22:14:04.056" level="INFO">GET Request : url=https://serverest.dev/usuarios/YCwUPD9iUx1HvCsZ 
 path_url=/usuarios/YCwUPD9iUx1HvCsZ 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230411 22:14:04.056" level="INFO">GET Response : url=https://serverest.dev/usuarios/YCwUPD9iUx1HvCsZ 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'b28d6e8c-d828-4851-9589-b71120c88c1c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '1f1f6fb3838b2a2800f69b7cd456f0f3', 'Date': 'Wed, 12 Apr 2023 01:14:01 GMT', 'Server': 'Google Frontend', 'Content-Length': '164'} 
 body={
    "nome": "Alexandra Gutierrez",
    "email": "ohunter@example.com",
    "password": "^yNJeImsP5",
    "administrador": "false",
    "_id": "YCwUPD9iUx1HvCsZ"
} 
 </msg>
<msg timestamp="20230411 22:14:04.056" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:03.721" endtime="20230411 22:14:04.056"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230411 22:14:04.056" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.056" endtime="20230411 22:14:04.057"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.720" endtime="20230411 22:14:04.057"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="The response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230411 22:14:04.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.057" endtime="20230411 22:14:04.058"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230411 22:14:04.058" endtime="20230411 22:14:04.058"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.057" endtime="20230411 22:14:04.058"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230411 22:14:04.059" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230411 22:14:04.059" endtime="20230411 22:14:04.059"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.058" endtime="20230411 22:14:04.059"/>
</kw>
<status status="PASS" starttime="20230411 22:14:03.718" endtime="20230411 22:14:04.059"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="25">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230411 22:14:04.061" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230411 22:14:04.061" endtime="20230411 22:14:04.061"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.061" endtime="20230411 22:14:04.062"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230411 22:14:04.062" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230411 22:14:04.062" endtime="20230411 22:14:04.062"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230411 22:14:04.062" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230411 22:14:04.062" endtime="20230411 22:14:04.062"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230411 22:14:04.385" level="INFO">PUT Request : url=https://serverest.dev/usuarios/YCwUPD9iUx1HvCsZ 
 path_url=/usuarios/YCwUPD9iUx1HvCsZ 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230411 22:14:04.385" level="INFO">PUT Response : url=https://serverest.dev/usuarios/YCwUPD9iUx1HvCsZ 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '67f68908-04dd-4ebe-98be-919ce296ded6', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '2a5fd6a5acf2eb123e512809e801f90f', 'Date': 'Wed, 12 Apr 2023 01:14:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230411 22:14:04.385" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.062" endtime="20230411 22:14:04.385"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230411 22:14:04.385" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.385" endtime="20230411 22:14:04.385"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.062" endtime="20230411 22:14:04.385"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="The response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230411 22:14:04.386" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.386" endtime="20230411 22:14:04.386"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230411 22:14:04.386" endtime="20230411 22:14:04.387"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.386" endtime="20230411 22:14:04.387"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230411 22:14:04.388" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230411 22:14:04.387" endtime="20230411 22:14:04.388"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.387" endtime="20230411 22:14:04.388"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.060" endtime="20230411 22:14:04.388"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="30">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230411 22:14:04.390" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230411 22:14:04.390" endtime="20230411 22:14:04.390"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.389" endtime="20230411 22:14:04.390"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230411 22:14:04.714" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/YCwUPD9iUx1HvCsZ 
 path_url=/usuarios/YCwUPD9iUx1HvCsZ 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230411 22:14:04.714" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/YCwUPD9iUx1HvCsZ 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '0cf0c546-aeb5-45ab-bec1-b4feacd646ca', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c877dc3be9fdda588c696af355f750ef', 'Date': 'Wed, 12 Apr 2023 01:14:02 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230411 22:14:04.714" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.391" endtime="20230411 22:14:04.714"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230411 22:14:04.714" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.714" endtime="20230411 22:14:04.714"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.391" endtime="20230411 22:14:04.714"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="The response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230411 22:14:04.715" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230411 22:14:04.715" endtime="20230411 22:14:04.715"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230411 22:14:04.716" endtime="20230411 22:14:04.716"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.715" endtime="20230411 22:14:04.716"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230411 22:14:04.717" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230411 22:14:04.717" endtime="20230411 22:14:04.717"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.716" endtime="20230411 22:14:04.717"/>
</kw>
<status status="PASS" starttime="20230411 22:14:04.389" endtime="20230411 22:14:04.720"/>
</test>
<status status="PASS" starttime="20230411 22:14:01.783" endtime="20230411 22:14:04.722"/>
</suite>
<status status="PASS" starttime="20230411 22:14:01.780" endtime="20230411 22:14:04.724"/>
</suite>
<status status="PASS" starttime="20230411 22:14:01.777" endtime="20230411 22:14:04.725"/>
</suite>
<status status="PASS" starttime="20230411 22:14:01.751" endtime="20230411 22:14:04.727"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
