<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.3 on win32)" generated="20230412 13:59:42.099" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests">
<suite id="s1-s1" name="Api" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api">
<suite id="s1-s1-s1" name="Users" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api\users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api\users\test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230412 13:59:42.651" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230412 13:59:42.650" endtime="20230412 13:59:42.651"/>
</kw>
<status status="PASS" starttime="20230412 13:59:42.650" endtime="20230412 13:59:42.651"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230412 13:59:43.157" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230412 13:59:43.158" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '96826eb9-cf61-4c43-a6e0-5f7217df57c6', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'ef1e0f6351d2b5e11cce337a9ac7c740;o=1', 'Date': 'Wed, 12 Apr 2023 16:59:41 GMT', 'Server': 'Google Frontend', 'Content-Length': '38433'} 
 body={
    "quantidade": 178,
    "usuarios": [
        {
            "nome": "teste teste",
            "email": "xnbe@teste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "05fggawaJ23nnQh1"
        },
        {
            "nome": "Fabrício",
            "email": "roberta.oliveira@bol.com.br",
            "password": "putdousuario",
            "administrador": "true",
            "_id": "0dUsiJTzXyYMQVAB"
        },
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Lucas Gabriel",
            "email": "tiago.corte@hotmail.com",
            "password": "kkj78ruf2rrd",
            "administrador": "true",
            "_id": "19Qp2mnhtrPY4PX8"
        },
        {
            "nome": "Maya",
            "email": "luizmiguel.custodio@hotmail.com",
            "password": "tx6wy6wojs",
            "administrador": "true",
            "_id": "1YsMsiQzeERpzuj5"
        },
        {
            "password": "a5qa6y7jgy3",
            "administrador": "true",
            "nome": "Gabriel",
            "email": "raul.silveira@gmail.com",
            "_id": "24XFKdLIJ8SHRiRX"
        },
        {
            "nome": "Amiltontestput",
            "email": "amiltonputtest@put.com",
            "password": "putdousuario",
            "administrador": "true",
            "_id": "3wQgiIyxI3CWyReQ"
        },
        {
            "password": "tkdu32xq5m3fe8",
            "administrador": "true",
            "nome": "Felipe",
            "email": "benjamin.delara@bol.com.br",
            "_id": "413ydIZ6Ymtvp4VC"
        },
        {
            "nome": "Luiz Otávio",
            "email": "nataniel.dorneles@bol.com.br",
            "password": "jpadvvugjfbqd",
            "administrador": "true",
            "_id": "4Jc8DMcbPhVkEzZA"
        },
        {
            "nome": "Carlos",
            "email": "tiago.almada@live.com",
            "password": "e87hhes2699amp",
            "administrador": "true",
            "_id": "4SedYnWyznm8NfOq"
        },
        {
            "nome": "Fabrício",
            "email": "mercia.xavier@gmail.com",
            "password": "putdousuario",
            "administrador": "true",
            "_id": "4WelMS8RnlJnpqxp"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Howell99@example.com",
            "password": "teste",
            "administrador": "true",
            "_id": "4gHrnKTWIEcZW4Wc"
        },
        {
            "nome": "Márcia",
            "email": "fabio.guedes@hotmail.com",
            "password": "o5olx9u3n7puz",
            "administrador": "true",
            "_id": "4kUreGmdqNEv3FHV"
        },
        {
            "nome": "teste teste",
            "email": "qevc@teste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "4vfFl8TUEScWOZww"
        },
        {
            "nome": "Ana Luiza",
            "email": "celia.bonfim@live.com",
            "password": "5vw22shddff",
            "administrador": "true",
            "_id": "58GqXo5YsZxhmBkg"
        },
        {
            "nome": "teste teste",
            "email": "ejne@teste.com",
            "password": "1234",
            "administrador": "true",
            "_id": "58Vn9Kc0IdUEWZmF"
        },
        {
            "nome": "Fabrício",
            "email": "mercia.souza@bol.com.br",
            "password": "putdousuario",
            "administrador": "true",
            "_id": "5MvDDrLnRjY9udHt"
        },
        {
            "nome": "Yago",
            "email": "isadora.araujo@hotmail.com",
            "password": "3qkchpfqqiq",
            "administrador": "true",
            "_id": "5SS6WjW39ln5FUuX"
        },
        {
            "nome": "Gaye Cremin",
            "email": "augustine@towne.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "6H4u98YDM0GLUxkb"
        },
        {
            "nome": "Windows da Silva",
            "email": "jmygzb@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "6xzKmHXFnCWXKeJu"
        },
        {
            "nome": "Bianca",
            "email": "lorena.duarte@gmail.com",
            "password": "f5g12gpszpq",
            "administrador": "true",
            "_id": "7AaGSr8mJMC3pQ5b"
        },
        {
            "nome": "Vitor Hugo",
            "email": "talita.chaves@hotmail.com",
            "password": "mh4gex89",
            "administrador": "true",
            "_id": "84DeqPOkk4yOqxXS"
        },
        {
            "nome": "Davi Luiz",
            "email": "breno.paiva@hotmail.com",
            "password": "l2rhvrt618q2",
            "administrador": "true",
            "_id": "8bW2Pw87QJ1c9Z2h"
        },
        {
            "password": "fbq0bc3u",
            "administrador": "true",
            "nome": "Morgana",
            "email": "perola.resende@live.com",
            "_id": "98iPzA0zD0YkhI5e"
        },
        {
            "nome": "Bryan",
            "email": "davimiguel.silveira@bol.com.br",
            "password": "uuhxnwicz2p",
            "administrador": "true",
            "_id": "9otRtIE0Nejtrwn3"
        },
        {
            "nome": "Ricardo",
            "email": "djalma.dabarranca@bol.com.br",
            "password": "45cx4o8rnz3e",
            "administrador": "true",
            "_id": "9xX9hC0uZoiely5G"
        },
        {
            "nome": "Maya",
            "email": "kaue.dacunha@bol.com.br",
            "password": "3e0p7mjng7",
            "administrador": "true",
            "_id": "9ydJAuOCcqrDGbEv"
        },
        {
            "nome": "Luna",
            "email": "djalma.pinto@bol.com.br",
            "password": "q4lrhrms",
            "administrador": "true",
            "_id": "AKD5fu7wk6JgHqky"
        },
        {
            "nome": "Windows da Silva",
            "email": "jdocms@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "AOoQo5i2hkR3xLQu"
        },
        {
            "nome": "Gúbio",
            "email": "matheus.mangueira@bol.com.br",
            "password": "cgvwuvytlx1",
            "administrador": "true",
            "_id": "AQ4u6XkEap743TXy"
        },
        {
            "nome": "Windows da Silva",
            "email": "lbyxak@emailteste.com",
            "password": "15674",
            "administrador": "true",
            "_id": "AnZuSkHTqsnczJ62"
        },
        {
            "password": "ocojy27ac72yw",
            "administrador": "true",
            "nome": "Bianca",
            "email": "lucca.campos@live.com",
            "_id": "B5l2E7Qy6PrQufPq"
        },
        {
            "nome": "Enzo Gabriel",
            "email": "laura.brum@hotmail.com",
            "password": "gg7rtbmynfpw",
            "administrador": "true",
            "_id": "BImxfMnwFS9gy814"
        },
        {
            "nome": "Sophia",
            "email": "mariah.diegues@gmail.com",
            "password": "7uncqja9ifn35nx",
            "administrador": "true",
            "_id": "BIuknscZIbnxX1v7"
        },
        {
            "nome": "Tiago",
            "email": "henrique.ferreira@bol.com.br",
            "password": "0zrgofcemud7a",
            "administrador": "true",
            "_id": "BQZsPtm4zTXkxr3P"
        },
        {
            "nome": "Deneval",
            "email": "noah.dabandeira@gmail.com",
            "password": "4lwh9o9b",
            "administrador": "true",
            "_id": "BSAtNYKtjB8dQo4C"
        },
        {
            "nome": "Joana",
            "email": "joaolucas.castanho@hotmail.com",
            "password": "apxf6tay6ppq250",
            "administrador": "true",
            "_id": "BULqfPMkfpv54LW3"
        },
        {
            "nome": "Alex Kunze",
            "email": "brent.nader@spencer.org",
            "password": "teste",
            "administrador": "true",
            "_id": "CUw97UwAOt4nxv2H"
        },
        {
            "nome": "Suélen",
            "email": "adriana.bittencourt@hotmail.com",
            "password": "k5czc8crp",
            "administrador": "true",
            "_id": "D4dXq3ZwSnp9kXgh"
        },
        {
            "nome": "Elísio",
            "email": "silas.martins@gmail.com",
            "password": "putdousuario",
            "administrador": "true",
            "_id": "D8y8UPBu6wV5qy5a"
        },
        {
            "nome": "Williams Kunze",
            "email": "cyril.bernier@ferry-gislason.name",
            "password": "teste",
            "administrador": "false",
            "_id": "DkJ6n40iwByZEumE"
        },
        {
            "nome": "Fabrícia",
            "email": "matheus.dias@live.com",
            "password": "tnx7kbire4lq",
            "administrador": "true",
            "_id": "E88g0bqeAUzW1JW5"
        },
        {
            "nome": "Bruna",
            "email": "milena.solimoes@gmail.com",
            "password": "jd7eo1u7",
            "administrador": "true",
            "_id": "EFaPWngT9z8s7o9M"
        },
        {
            "password": "z5z3ejg8uug1g",
            "administrador": "true",
            "nome": "Luiz Otávio",
            "email": "luiza.daaldeia@bol.com.br",
            "_id": "EYjmdRkIPBUHoXSc"
        },
        {
            "nome": "Ana Laura",
            "email": "yago.fontinhas@bol.com.br",
            "password": "oncuwiz9yhw",
            "administrador": "true",
            "_id": "EZwj85Epoio9fZX3"
        },
        {
            "nome": "Luiz Gustavo",
            "email": "alessandra.ramos@bol.com.br",
            "password": "thfjd3tx",
            "administrador": "true",
            "_id": "ErogzQnBWTODu4hq"
        },
        {
            "nome": "Norberto",
            "ema... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20230412 13:59:43.158" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:42.652" endtime="20230412 13:59:43.159"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230412 13:59:43.159" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.159" endtime="20230412 13:59:43.159"/>
</kw>
<status status="PASS" starttime="20230412 13:59:42.651" endtime="20230412 13:59:43.160"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230412 13:59:43.163" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.161" endtime="20230412 13:59:43.163"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230412 13:59:43.163" endtime="20230412 13:59:43.165"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.161" endtime="20230412 13:59:43.165"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230412 13:59:43.167" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230412 13:59:43.166" endtime="20230412 13:59:43.167"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.166" endtime="20230412 13:59:43.167"/>
</kw>
<status status="PASS" starttime="20230412 13:59:42.650" endtime="20230412 13:59:43.168"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="14">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230412 13:59:43.170" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230412 13:59:43.170" endtime="20230412 13:59:43.170"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.169" endtime="20230412 13:59:43.170"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230412 13:59:43.171" level="INFO">${name} = April Chandler</msg>
<status status="PASS" starttime="20230412 13:59:43.171" endtime="20230412 13:59:43.171"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230412 13:59:43.172" level="INFO">${email} = costarachel@example.com</msg>
<status status="PASS" starttime="20230412 13:59:43.171" endtime="20230412 13:59:43.172"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230412 13:59:43.172" level="INFO">${password} = RtL6&amp;uECG$</msg>
<status status="PASS" starttime="20230412 13:59:43.172" endtime="20230412 13:59:43.172"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230412 13:59:43.172" level="INFO">${name} = April Chandler</msg>
<status status="PASS" starttime="20230412 13:59:43.172" endtime="20230412 13:59:43.172"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230412 13:59:43.172" level="INFO">${email} = costarachel@example.com</msg>
<status status="PASS" starttime="20230412 13:59:43.172" endtime="20230412 13:59:43.173"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230412 13:59:43.173" level="INFO">${password} = RtL6&amp;uECG$</msg>
<status status="PASS" starttime="20230412 13:59:43.173" endtime="20230412 13:59:43.173"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.171" endtime="20230412 13:59:43.173"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230412 13:59:43.174" level="INFO">${payload} = {'nome': 'April Chandler', 'email': 'costarachel@example.com', 'password': 'RtL6&amp;uECG$', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230412 13:59:43.173" endtime="20230412 13:59:43.174"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230412 13:59:43.174" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230412 13:59:43.174" endtime="20230412 13:59:43.174"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230412 13:59:43.486" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '114'} 
 body=b'{"nome": "April Chandler", "email": "costarachel@example.com", "password": "RtL6&amp;uECG$", "administrador": "false"}' 
 </msg>
<msg timestamp="20230412 13:59:43.486" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '2945d095-8e8b-45ef-994a-8a72feed2023', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '75ca3a37565ba6b9e5da174449ec46aa', 'Date': 'Wed, 12 Apr 2023 16:59:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "1bcJGR7l0wSsWQlK"
} 
 </msg>
<msg timestamp="20230412 13:59:43.486" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.174" endtime="20230412 13:59:43.486"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230412 13:59:43.489" level="INFO">${user_id} = 1bcJGR7l0wSsWQlK</msg>
<status status="PASS" starttime="20230412 13:59:43.487" endtime="20230412 13:59:43.489"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230412 13:59:43.489" level="INFO">${USER_ID} = 1bcJGR7l0wSsWQlK</msg>
<status status="PASS" starttime="20230412 13:59:43.489" endtime="20230412 13:59:43.489"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230412 13:59:43.490" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.490" endtime="20230412 13:59:43.490"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.173" endtime="20230412 13:59:43.490"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230412 13:59:43.491" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.491" endtime="20230412 13:59:43.491"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230412 13:59:43.491" endtime="20230412 13:59:43.492"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.491" endtime="20230412 13:59:43.492"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230412 13:59:43.493" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230412 13:59:43.492" endtime="20230412 13:59:43.493"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.492" endtime="20230412 13:59:43.493"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.169" endtime="20230412 13:59:43.493"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="20">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230412 13:59:43.496" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230412 13:59:43.496" endtime="20230412 13:59:43.496"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.495" endtime="20230412 13:59:43.496"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230412 13:59:43.819" level="INFO">GET Request : url=https://serverest.dev/usuarios/1bcJGR7l0wSsWQlK 
 path_url=/usuarios/1bcJGR7l0wSsWQlK 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230412 13:59:43.819" level="INFO">GET Response : url=https://serverest.dev/usuarios/1bcJGR7l0wSsWQlK 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '85d8e2d9-4fb1-4491-91fa-ca97021fe842', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '42622b98d16e9323d60f841377505555', 'Date': 'Wed, 12 Apr 2023 16:59:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '163'} 
 body={
    "nome": "April Chandler",
    "email": "costarachel@example.com",
    "password": "RtL6&amp;uECG$",
    "administrador": "false",
    "_id": "1bcJGR7l0wSsWQlK"
} 
 </msg>
<msg timestamp="20230412 13:59:43.819" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.497" endtime="20230412 13:59:43.819"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230412 13:59:43.819" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.819" endtime="20230412 13:59:43.819"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.497" endtime="20230412 13:59:43.819"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230412 13:59:43.820" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.820" endtime="20230412 13:59:43.821"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230412 13:59:43.821" endtime="20230412 13:59:43.821"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.820" endtime="20230412 13:59:43.821"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230412 13:59:43.822" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230412 13:59:43.822" endtime="20230412 13:59:43.822"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.822" endtime="20230412 13:59:43.822"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.495" endtime="20230412 13:59:43.823"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="25">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230412 13:59:43.824" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230412 13:59:43.823" endtime="20230412 13:59:43.824"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.823" endtime="20230412 13:59:43.824"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230412 13:59:43.824" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230412 13:59:43.824" endtime="20230412 13:59:43.824"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230412 13:59:43.825" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230412 13:59:43.825" endtime="20230412 13:59:43.825"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230412 13:59:44.141" level="INFO">PUT Request : url=https://serverest.dev/usuarios/1bcJGR7l0wSsWQlK 
 path_url=/usuarios/1bcJGR7l0wSsWQlK 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230412 13:59:44.141" level="INFO">PUT Response : url=https://serverest.dev/usuarios/1bcJGR7l0wSsWQlK 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'c750d17c-81d2-45d7-a397-5d40f2969b2e', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'c5f09a81ad8572da03c22f486bcc1edc', 'Date': 'Wed, 12 Apr 2023 16:59:42 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230412 13:59:44.141" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:43.825" endtime="20230412 13:59:44.141"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230412 13:59:44.142" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:44.141" endtime="20230412 13:59:44.142"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.824" endtime="20230412 13:59:44.142"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230412 13:59:44.144" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230412 13:59:44.143" endtime="20230412 13:59:44.144"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230412 13:59:44.144" endtime="20230412 13:59:44.144"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.143" endtime="20230412 13:59:44.144"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230412 13:59:44.145" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230412 13:59:44.145" endtime="20230412 13:59:44.145"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.145" endtime="20230412 13:59:44.146"/>
</kw>
<status status="PASS" starttime="20230412 13:59:43.823" endtime="20230412 13:59:44.146"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="30">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230412 13:59:44.148" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230412 13:59:44.148" endtime="20230412 13:59:44.148"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.147" endtime="20230412 13:59:44.148"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230412 13:59:44.455" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/1bcJGR7l0wSsWQlK 
 path_url=/usuarios/1bcJGR7l0wSsWQlK 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230412 13:59:44.455" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/1bcJGR7l0wSsWQlK 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '7e0b6028-6238-45f2-9780-1db2ebd74111', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a1402ec8382eaf5a7a3c2503958c6cb3', 'Date': 'Wed, 12 Apr 2023 16:59:43 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230412 13:59:44.455" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:44.148" endtime="20230412 13:59:44.455"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230412 13:59:44.456" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230412 13:59:44.456" endtime="20230412 13:59:44.456"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.148" endtime="20230412 13:59:44.456"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230412 13:59:44.456" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230412 13:59:44.456" endtime="20230412 13:59:44.456"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230412 13:59:44.456" endtime="20230412 13:59:44.457"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.456" endtime="20230412 13:59:44.457"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230412 13:59:44.458" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230412 13:59:44.457" endtime="20230412 13:59:44.458"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.457" endtime="20230412 13:59:44.458"/>
</kw>
<status status="PASS" starttime="20230412 13:59:44.147" endtime="20230412 13:59:44.458"/>
</test>
<status status="PASS" starttime="20230412 13:59:42.127" endtime="20230412 13:59:44.460"/>
</suite>
<status status="PASS" starttime="20230412 13:59:42.124" endtime="20230412 13:59:44.462"/>
</suite>
<status status="PASS" starttime="20230412 13:59:42.121" endtime="20230412 13:59:44.463"/>
</suite>
<status status="PASS" starttime="20230412 13:59:42.100" endtime="20230412 13:59:44.464"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
