<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.3 on win32)" generated="20230418 12:29:14.452" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests">
<suite id="s1-s1" name="Api" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api">
<suite id="s1-s1-s1" name="Users" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api\users">
<suite id="s1-s1-s1-s1" name="Test Api Users" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\api\users\test_api_users.robot">
<test id="s1-s1-s1-s1-t1" name="Scenario: Get all registered users" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230418 12:29:15.168" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230418 12:29:15.168" endtime="20230418 12:29:15.168"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.168" endtime="20230418 12:29:15.168"/>
</kw>
<kw name="When I request the list of all registered users" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230418 12:29:15.513" level="INFO">GET Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230418 12:29:15.513" level="INFO">GET Response : url=https://serverest.dev/usuarios 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'afd5e602-2e36-48a1-900d-dd76ec4cf5e0', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': 'a8d9f955b7fb905fedc7f43fe35bcad1;o=1', 'Date': 'Tue, 18 Apr 2023 15:29:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '7857'} 
 body={
    "quantidade": 36,
    "usuarios": [
        {
            "nome": "Fulano da Silva",
            "email": "fulano@qa.com",
            "password": "teste",
            "administrador": "true",
            "_id": "0uxuPY0cbmQhpEz1"
        },
        {
            "nome": "Stacia Steuber",
            "email": "sammy@tromp.com",
            "password": "teste",
            "administrador": "true",
            "_id": "3E6wMioWFNXazohm"
        },
        {
            "nome": "Burton Willms",
            "email": "dana_barrows@lesch-ernser.net",
            "password": "teste",
            "administrador": "true",
            "_id": "4jej0NIwAs4FIDjB"
        },
        {
            "nome": "Kattie Hammes",
            "email": "reyna@kuphal-morar.co",
            "password": "teste",
            "administrador": "true",
            "_id": "6GOaX9ulsHJd4QjK"
        },
        {
            "nome": "Estrella Aufderhar Esq.",
            "email": "melonie@boyle-spinka.name",
            "password": "teste",
            "administrador": "true",
            "_id": "6bFzCxeJ8vnihRY0"
        },
        {
            "nome": "Msgr. Jaquelyn Kassulke",
            "email": "ivy.paucek@walter.net",
            "password": "teste",
            "administrador": "true",
            "_id": "73fTomD9td3hL3a5"
        },
        {
            "nome": "Telma McLaughlin",
            "email": "exie@bogan-muller.net",
            "password": "teste",
            "administrador": "false",
            "_id": "9hrnX0nQQuWsOb5H"
        },
        {
            "nome": "batata",
            "email": "randy@walter-goodwin.io",
            "password": "teste",
            "administrador": "true",
            "_id": "AIKUcKAwgPtySE9z"
        },
        {
            "nome": "Myron Fadel",
            "email": "pamelia@morissette.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "C3wHUQG15L2mZUvQ"
        },
        {
            "nome": "Magnus Herzog",
            "email": "Armani_Hills@gmail.com",
            "password": "oyfoY8dNcJjv_ZV",
            "administrador": "false",
            "_id": "C8WkVbbGE03u5UWR"
        },
        {
            "nome": "Dr. Eneida Schneider",
            "email": "garland@renner.net",
            "password": "teste",
            "administrador": "true",
            "_id": "CeEZpH7kv3gbLCMj"
        },
        {
            "nome": "Santo Rosenbaum",
            "email": "teddy@cole.io",
            "password": "teste",
            "administrador": "true",
            "_id": "HRKpIkJMOIaxHXpZ"
        },
        {
            "nome": "Marjolaine Wilderman",
            "email": "Vida46@hotmail.com",
            "password": "xlPuq1hZTtU4NAb",
            "administrador": "true",
            "_id": "LaOqWCs4aZGCYrhk"
        },
        {
            "nome": "Ophelia Wilderman",
            "email": "Estel_Schoen@yahoo.com",
            "password": "XhO1d9F1DD7LtTL",
            "administrador": "false",
            "_id": "MtWaaXTu497p4VnW"
        },
        {
            "nome": "Amely Howe",
            "email": "Kennedy_Hegmann@yahoo.com",
            "password": "aEJFYKdl_7J7G_H",
            "administrador": "true",
            "_id": "OxHIkwEi4mGssTH7"
        },
        {
            "nome": "Vernetta Kuvalis",
            "email": "miles_crona@schmidt.io",
            "password": "teste",
            "administrador": "true",
            "_id": "P8c8zVnZIdXuzXCk"
        },
        {
            "nome": "Zackery Kutch",
            "email": "Brennon.Aufderhar@gmail.com",
            "password": "aowmlzXy_jcBMFu",
            "administrador": "true",
            "_id": "S0tYq5W73fn3UzKZ"
        },
        {
            "nome": "Renaldo Lakin",
            "email": "isidra@weber.biz",
            "password": "teste",
            "administrador": "true",
            "_id": "UioR5i87MpizJ2zf"
        },
        {
            "nome": "Mickey Miller Ret.",
            "email": "dianna.bogisich@moore.biz",
            "password": "teste",
            "administrador": "false",
            "_id": "X2NklJgq1zXyrPlw"
        },
        {
            "nome": "Rogers Ondricka",
            "email": "Keara_Zieme47@hotmail.com",
            "password": "DT3iM0673grETQa",
            "administrador": "true",
            "_id": "XBL86VA9chfzp7uP"
        },
        {
            "nome": "Alda",
            "email": "Idell15@yahoo.com",
            "password": "ngzoZOerPmPk_Zh",
            "administrador": "true",
            "_id": "YstCwvWdwFn7CZ4a"
        },
        {
            "nome": "Korey Moen",
            "email": "Vernon_Weissnat31@yahoo.com",
            "password": "hnlLVn6iR6MsLNW",
            "administrador": "false",
            "_id": "ZTQjNdzciOfyonBp"
        },
        {
            "nome": "Wesley Hayes",
            "email": "raleigh@kulas.io",
            "password": "teste",
            "administrador": "true",
            "_id": "aeTrV9Rkbnz1ian3"
        },
        {
            "nome": "Joana Zemlak",
            "email": "Shyann.Sporer@yahoo.com",
            "password": "SkDZwBiTe3vaC4V",
            "administrador": "true",
            "_id": "aqCWJATzCa4gzQ8T"
        },
        {
            "nome": "Clarissa Kuhn",
            "email": "basil.daniel@tremblay.info",
            "password": "teste",
            "administrador": "true",
            "_id": "eWgQ5AwHUEs2c7Wg"
        },
        {
            "nome": "Annmarie Yundt",
            "email": "lesley.waelchi@little.co",
            "password": "teste",
            "administrador": "true",
            "_id": "gS8h1oQoPQsmfcBq"
        },
        {
            "nome": "Frank Ryan",
            "email": "Emely_Schmeler@hotmail.com",
            "password": "xMIgIrtCi_P_5sH",
            "administrador": "true",
            "_id": "gW5Szb3AkZNoZDPP"
        },
        {
            "nome": "Rita Wintheiser VM",
            "email": "kathryne@hoppe.name",
            "password": "teste",
            "administrador": "true",
            "_id": "k7v2MxehAEfxbMnD"
        },
        {
            "nome": "Serena Heaney",
            "email": "Mckenna42@gmail.com",
            "password": "4eMEBLBcNIBl6hf",
            "administrador": "false",
            "_id": "lEW4TYGd2Nn1VEvm"
        },
        {
            "nome": "Mohammad Willms",
            "email": "elvin@kreiger.co",
            "password": "teste",
            "administrador": "true",
            "_id": "mTaYR5o9PE286Kka"
        },
        {
            "nome": "{{generatedName}}",
            "email": "Era15@example.com",
            "password": "teste",
            "administrador": "true",
            "_id": "nqQU8B2whUyVIThG"
        },
        {
            "nome": "Ms. Isaura Russel",
            "email": "ammie@hoppe-harvey.co",
            "password": "teste",
            "administrador": "true",
            "_id": "qhx4IX6nxorTnVVz"
        },
        {
            "nome": "Marylynn Gusikowski",
            "email": "rosaura_jacobs@schaefer.co",
            "password": "teste",
            "administrador": "true",
            "_id": "sJFonVebO8omx2JX"
        },
        {
            "nome": "The Hon. Ena Pacocha",
            "email": "roy@goodwin.co",
            "password": "teste",
            "administrador": "true",
            "_id": "ug0X867MvSYhaK5d"
        },
        {
            "nome": "Emmalee Greenholt",
            "email": "Adolf95@gmail.com",
            "password": "XL3t7YD1HBFcNwD",
            "administrador": "false",
            "_id": "zfhWV9hPJ2w2OP38"
        },
        {
            "nome": "Irena Wiza",
            "email": "trang@heller.name",
            "password": "teste",
            "administrador": "false",
            "_id": "zhjMvgJxncHea1Jx"
        }
    ]
} 
 </msg>
<msg timestamp="20230418 12:29:15.515" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.169" endtime="20230418 12:29:15.515"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230418 12:29:15.516" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.515" endtime="20230418 12:29:15.516"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.169" endtime="20230418 12:29:15.517"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230418 12:29:15.522" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.520" endtime="20230418 12:29:15.522"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230418 12:29:15.522" endtime="20230418 12:29:15.524"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.519" endtime="20230418 12:29:15.524"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230418 12:29:15.525" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230418 12:29:15.524" endtime="20230418 12:29:15.525"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.524" endtime="20230418 12:29:15.525"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.167" endtime="20230418 12:29:15.526"/>
</test>
<test id="s1-s1-s1-s1-t2" name="Scenario: Create a new user" line="15">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230418 12:29:15.528" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230418 12:29:15.528" endtime="20230418 12:29:15.528"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.528" endtime="20230418 12:29:15.528"/>
</kw>
<kw name="Given I have a valid user data" library="test_keywords_users">
<kw name="Name" library="FakerLibrary">
<var>${name}</var>
<doc>:example 'John Doe'</doc>
<msg timestamp="20230418 12:29:15.529" level="INFO">${name} = Helen Williams</msg>
<status status="PASS" starttime="20230418 12:29:15.529" endtime="20230418 12:29:15.529"/>
</kw>
<kw name="Email" library="FakerLibrary">
<var>${email}</var>
<msg timestamp="20230418 12:29:15.530" level="INFO">${email} = qbrown@example.net</msg>
<status status="PASS" starttime="20230418 12:29:15.529" endtime="20230418 12:29:15.530"/>
</kw>
<kw name="Password" library="FakerLibrary">
<var>${password}</var>
<doc>Generate a random password of the specified ``length``.</doc>
<msg timestamp="20230418 12:29:15.530" level="INFO">${password} = ^LKFa_vYv3</msg>
<status status="PASS" starttime="20230418 12:29:15.530" endtime="20230418 12:29:15.530"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${name}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230418 12:29:15.530" level="INFO">${name} = Helen Williams</msg>
<status status="PASS" starttime="20230418 12:29:15.530" endtime="20230418 12:29:15.530"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${email}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230418 12:29:15.531" level="INFO">${email} = qbrown@example.net</msg>
<status status="PASS" starttime="20230418 12:29:15.530" endtime="20230418 12:29:15.531"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${password}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230418 12:29:15.531" level="INFO">${password} = ^LKFa_vYv3</msg>
<status status="PASS" starttime="20230418 12:29:15.531" endtime="20230418 12:29:15.531"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.529" endtime="20230418 12:29:15.531"/>
</kw>
<kw name="When I create the user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=${name}</arg>
<arg>email=${email}</arg>
<arg>password=${password}</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230418 12:29:15.532" level="INFO">${payload} = {'nome': 'Helen Williams', 'email': 'qbrown@example.net', 'password': '^LKFa_vYv3', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230418 12:29:15.531" endtime="20230418 12:29:15.532"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230418 12:29:15.532" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230418 12:29:15.532" endtime="20230418 12:29:15.532"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230418 12:29:15.844" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '109'} 
 body=b'{"nome": "Helen Williams", "email": "qbrown@example.net", "password": "^LKFa_vYv3", "administrador": "false"}' 
 </msg>
<msg timestamp="20230418 12:29:15.845" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '2cbb6374-fa86-433b-8e74-d85a9ecb6f50', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '6a5cf7fdd960b74cd6e6190f89c23050', 'Date': 'Tue, 18 Apr 2023 15:29:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "WX08lcL6Wg6kGvDe"
} 
 </msg>
<msg timestamp="20230418 12:29:15.845" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.532" endtime="20230418 12:29:15.845"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${user_id}</var>
<arg>${response.json()['_id']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20230418 12:29:15.845" level="INFO">${user_id} = WX08lcL6Wg6kGvDe</msg>
<status status="PASS" starttime="20230418 12:29:15.845" endtime="20230418 12:29:15.845"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_ID}</arg>
<arg>${user_id}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20230418 12:29:15.846" level="INFO">${USER_ID} = WX08lcL6Wg6kGvDe</msg>
<status status="PASS" starttime="20230418 12:29:15.845" endtime="20230418 12:29:15.846"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230418 12:29:15.846" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.846" endtime="20230418 12:29:15.846"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.531" endtime="20230418 12:29:15.846"/>
</kw>
<kw name="Then the response status code should be 201" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230418 12:29:15.847" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.847" endtime="20230418 12:29:15.847"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230418 12:29:15.847" endtime="20230418 12:29:15.848"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.847" endtime="20230418 12:29:15.848"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230418 12:29:15.849" level="INFO">Length is 2</msg>
<status status="PASS" starttime="20230418 12:29:15.849" endtime="20230418 12:29:15.849"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.848" endtime="20230418 12:29:15.849"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.527" endtime="20230418 12:29:15.850"/>
</test>
<test id="s1-s1-s1-s1-t3" name="Scenario: Get a specific user informations" line="21">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230418 12:29:15.852" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230418 12:29:15.852" endtime="20230418 12:29:15.852"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.851" endtime="20230418 12:29:15.852"/>
</kw>
<kw name="When I request the created user" library="test_keywords_users">
<kw name="GET On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20230418 12:29:16.165" level="INFO">GET Request : url=https://serverest.dev/usuarios/WX08lcL6Wg6kGvDe 
 path_url=/usuarios/WX08lcL6Wg6kGvDe 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20230418 12:29:16.165" level="INFO">GET Response : url=https://serverest.dev/usuarios/WX08lcL6Wg6kGvDe 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '5e98d713-8cb6-42ea-8ade-99d33c00265c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '38b7feee2491cdd413935ecde802738a', 'Date': 'Tue, 18 Apr 2023 15:29:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '158'} 
 body={
    "nome": "Helen Williams",
    "email": "qbrown@example.net",
    "password": "^LKFa_vYv3",
    "administrador": "false",
    "_id": "WX08lcL6Wg6kGvDe"
} 
 </msg>
<msg timestamp="20230418 12:29:16.166" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:15.852" endtime="20230418 12:29:16.166"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230418 12:29:16.167" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.166" endtime="20230418 12:29:16.167"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.852" endtime="20230418 12:29:16.167"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230418 12:29:16.172" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.170" endtime="20230418 12:29:16.172"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230418 12:29:16.172" endtime="20230418 12:29:16.174"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.169" endtime="20230418 12:29:16.174"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230418 12:29:16.175" level="INFO">Length is 5</msg>
<status status="PASS" starttime="20230418 12:29:16.175" endtime="20230418 12:29:16.175"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.174" endtime="20230418 12:29:16.175"/>
</kw>
<status status="PASS" starttime="20230418 12:29:15.851" endtime="20230418 12:29:16.176"/>
</test>
<test id="s1-s1-s1-s1-t4" name="Scenario: Update the created user" line="26">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230418 12:29:16.178" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230418 12:29:16.178" endtime="20230418 12:29:16.178"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.177" endtime="20230418 12:29:16.178"/>
</kw>
<kw name="When I update the created user" library="test_keywords_users">
<kw name="Create Dictionary" library="BuiltIn">
<var>${payload}</var>
<arg>nome=John Smith</arg>
<arg>email=john.smith@example.com</arg>
<arg>password=P@ssw0rd123</arg>
<arg>administrador=false</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230418 12:29:16.179" level="INFO">${payload} = {'nome': 'John Smith', 'email': 'john.smith@example.com', 'password': 'P@ssw0rd123', 'administrador': 'false'}</msg>
<status status="PASS" starttime="20230418 12:29:16.179" endtime="20230418 12:29:16.179"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230418 12:29:16.179" level="INFO">${headers} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230418 12:29:16.179" endtime="20230418 12:29:16.179"/>
</kw>
<kw name="PUT On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<arg>json=${payload}</arg>
<arg>headers=${headers}</arg>
<doc>Sends a PUT request on a previously created HTTP Session.</doc>
<msg timestamp="20230418 12:29:16.500" level="INFO">PUT Request : url=https://serverest.dev/usuarios/WX08lcL6Wg6kGvDe 
 path_url=/usuarios/WX08lcL6Wg6kGvDe 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '110'} 
 body=b'{"nome": "John Smith", "email": "john.smith@example.com", "password": "P@ssw0rd123", "administrador": "false"}' 
 </msg>
<msg timestamp="20230418 12:29:16.500" level="INFO">PUT Response : url=https://serverest.dev/usuarios/WX08lcL6Wg6kGvDe 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '64f48f8d-a04d-4dcb-8aa8-9c99258c0ef1', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '5004d4edc9c5c4d7b428112042f93329', 'Date': 'Tue, 18 Apr 2023 15:29:15 GMT', 'Server': 'Google Frontend', 'Content-Length': '50'} 
 body={
    "message": "Registro alterado com sucesso"
} 
 </msg>
<msg timestamp="20230418 12:29:16.500" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.179" endtime="20230418 12:29:16.500"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230418 12:29:16.502" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.501" endtime="20230418 12:29:16.502"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.178" endtime="20230418 12:29:16.502"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230418 12:29:16.506" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.503" endtime="20230418 12:29:16.506"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230418 12:29:16.507" endtime="20230418 12:29:16.508"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.502" endtime="20230418 12:29:16.508"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230418 12:29:16.512" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230418 12:29:16.510" endtime="20230418 12:29:16.512"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.509" endtime="20230418 12:29:16.512"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.177" endtime="20230418 12:29:16.513"/>
</test>
<test id="s1-s1-s1-s1-t5" name="Scenario: Delete the created user" line="31">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Create Session" library="RequestsLibrary">
<arg>serverest</arg>
<arg>${SERVER_BASE_URL}</arg>
<arg>disable_warnings=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230418 12:29:16.515" level="INFO">Creating Session using : alias=serverest, url=https://serverest.dev, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230418 12:29:16.515" endtime="20230418 12:29:16.515"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.515" endtime="20230418 12:29:16.515"/>
</kw>
<kw name="When I delete the created user" library="test_keywords_users">
<kw name="DELETE On Session" library="RequestsLibrary">
<var>${response}</var>
<arg>serverest</arg>
<arg>${USERS_API_ENDPOINT}/${USER_ID}</arg>
<doc>Sends a DELETE request on a previously created HTTP Session.</doc>
<msg timestamp="20230418 12:29:16.829" level="INFO">DELETE Request : url=https://serverest.dev/usuarios/WX08lcL6Wg6kGvDe 
 path_url=/usuarios/WX08lcL6Wg6kGvDe 
 headers={'User-Agent': 'python-requests/2.28.2', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0'} 
 body=None 
 </msg>
<msg timestamp="20230418 12:29:16.829" level="INFO">DELETE Response : url=https://serverest.dev/usuarios/WX08lcL6Wg6kGvDe 
 status=200, reason=OK 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': 'da3328b6-85a3-4d4f-8b30-61f9c9c21d4f', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '046b9068eefbb6663b108678edc20939', 'Date': 'Tue, 18 Apr 2023 15:29:15 GMT', 'Server': 'Google Frontend', 'Content-Length': '51'} 
 body={
    "message": "Registro excluído com sucesso"
} 
 </msg>
<msg timestamp="20230418 12:29:16.830" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.516" endtime="20230418 12:29:16.830"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230418 12:29:16.831" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.830" endtime="20230418 12:29:16.831"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.516" endtime="20230418 12:29:16.831"/>
</kw>
<kw name="Then the response status code should be 200" library="test_keywords_users" sourcename="Then the response status code should be ${status_code}">
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<arg>${response.status_code}</arg>
<arg>${status_code}</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<msg timestamp="20230418 12:29:16.835" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230418 12:29:16.833" endtime="20230418 12:29:16.836"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20230418 12:29:16.836" endtime="20230418 12:29:16.838"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.832" endtime="20230418 12:29:16.838"/>
</kw>
<kw name="And the response body should not be empty" library="test_keywords_users">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${response.json()}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20230418 12:29:16.842" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20230418 12:29:16.840" endtime="20230418 12:29:16.842"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.839" endtime="20230418 12:29:16.843"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.514" endtime="20230418 12:29:16.844"/>
</test>
<status status="PASS" starttime="20230418 12:29:14.480" endtime="20230418 12:29:16.849"/>
</suite>
<status status="PASS" starttime="20230418 12:29:14.477" endtime="20230418 12:29:16.856"/>
</suite>
<status status="PASS" starttime="20230418 12:29:14.474" endtime="20230418 12:29:16.859"/>
</suite>
<suite id="s1-s2" name="Ui" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\ui">
<suite id="s1-s2-s1" name="Login" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\ui\login">
<suite id="s1-s2-s1-s1" name="Test Ui Login" source="C:\Users\samue\OneDrive\Área de Trabalho\gen-ai-robot-test\tests\ui\login\test_ui_login.robot">
<test id="s1-s2-s1-s1-t1" name="Scenario: Log In to Sauce Demo" line="9">
<kw name="Before Tests" library="test_keywords_common" type="SETUP">
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${SERVER_BASE_URL}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20230418 12:29:16.881" level="INFO">Opening browser 'Chrome' to base url 'https://www.saucedemo.com/'.</msg>
<status status="PASS" starttime="20230418 12:29:16.880" endtime="20230418 12:29:18.357"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20230418 12:29:18.357" endtime="20230418 12:29:18.468"/>
</kw>
<status status="PASS" starttime="20230418 12:29:16.880" endtime="20230418 12:29:18.468"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:username</arg>
<arg>standard_user</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<msg timestamp="20230418 12:29:18.469" level="INFO">Typing text 'standard_user' into text field 'id:username'.</msg>
<msg timestamp="20230418 12:29:18.599" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-6.png"&gt;&lt;img src="selenium-screenshot-6.png" width="800px"&gt;&lt;/a&gt;</msg>
<msg timestamp="20230418 12:29:18.599" level="FAIL">Element with locator 'id:username' not found.</msg>
<status status="FAIL" starttime="20230418 12:29:18.469" endtime="20230418 12:29:18.601"/>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<arg>id:password</arg>
<arg>secret_sauce</arg>
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20230418 12:29:18.602" endtime="20230418 12:29:18.602"/>
</kw>
<kw name="Click Button" library="SeleniumLibrary">
<arg>login-button</arg>
<doc>Clicks the button identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20230418 12:29:18.603" endtime="20230418 12:29:18.603"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>//div[@class='product_label']</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="NOT RUN" starttime="20230418 12:29:18.603" endtime="20230418 12:29:18.603"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>//div[@class='product_label']</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<status status="NOT RUN" starttime="20230418 12:29:18.603" endtime="20230418 12:29:18.603"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="NOT RUN" starttime="20230418 12:29:18.603" endtime="20230418 12:29:18.603"/>
</kw>
<kw name="After Tests" library="test_keywords_common" type="TEARDOWN">
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230418 12:29:18.604" endtime="20230418 12:29:20.701"/>
</kw>
<status status="PASS" starttime="20230418 12:29:18.604" endtime="20230418 12:29:20.701"/>
</kw>
<doc>Tests that a user can successfully log in to the Sauce Demo website.</doc>
<tag>login</tag>
<status status="FAIL" starttime="20230418 12:29:16.879" endtime="20230418 12:29:20.702">Element with locator 'id:username' not found.</status>
</test>
<status status="FAIL" starttime="20230418 12:29:16.871" endtime="20230418 12:29:20.703"/>
</suite>
<status status="FAIL" starttime="20230418 12:29:16.867" endtime="20230418 12:29:20.705"/>
</suite>
<status status="FAIL" starttime="20230418 12:29:16.862" endtime="20230418 12:29:20.706"/>
</suite>
<status status="FAIL" starttime="20230418 12:29:14.454" endtime="20230418 12:29:20.707"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">login</stat>
</tag>
<suite>
<stat pass="5" fail="1" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Api">Tests.Api</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1" name="Users">Tests.Api.Users</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s1-s1" name="Test Api Users">Tests.Api.Users.Test Api Users</stat>
<stat pass="0" fail="1" skip="0" id="s1-s2" name="Ui">Tests.Ui</stat>
<stat pass="0" fail="1" skip="0" id="s1-s2-s1" name="Login">Tests.Ui.Login</stat>
<stat pass="0" fail="1" skip="0" id="s1-s2-s1-s1" name="Test Ui Login">Tests.Ui.Login.Test Ui Login</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
